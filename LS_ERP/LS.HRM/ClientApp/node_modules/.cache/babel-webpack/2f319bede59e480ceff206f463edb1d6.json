{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\nimport { FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../services/api.service\";\nimport * as i3 from \"../../../api-authorization/AuthorizeService\";\nimport * as i4 from \"../../../services/utility.service\";\nimport * as i5 from \"@angular/material/dialog\";\nimport * as i6 from \"../../../services/notification.service\";\nimport * as i7 from \"../../../sharedcomponent/ValidationMessagesComponent\";\nimport * as i8 from \"@angular/material/slide-toggle\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"@ngx-translate/core\";\n\nfunction AddupdateParametersForExamsComponent_div_38_ng_container_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0, 21);\n    i0.ɵɵelementStart(1, \"tr\", 22);\n    i0.ɵɵelementStart(2, \"td\");\n    i0.ɵɵelementStart(3, \"div\", 23);\n    i0.ɵɵelement(4, \"input\", 24);\n    i0.ɵɵpipe(5, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵelementStart(7, \"div\", 23);\n    i0.ɵɵelement(8, \"input\", 25);\n    i0.ɵɵpipe(9, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"td\");\n    i0.ɵɵelementStart(11, \"div\", 23);\n    i0.ɵɵelement(12, \"input\", 26);\n    i0.ɵɵpipe(13, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"td\");\n    i0.ɵɵelementStart(15, \"div\", 23);\n    i0.ɵɵelementStart(16, \"a\", 27);\n    i0.ɵɵlistener(\"click\", function AddupdateParametersForExamsComponent_div_38_ng_container_17_Template_a_click_16_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const i_r4 = restoredCtx.index;\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return ctx_r5.toggleShowsec(i_r4);\n    });\n    i0.ɵɵelement(17, \"i\", 28);\n    i0.ɵɵtext(18);\n    i0.ɵɵpipe(19, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const i_r4 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r4);\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(5, 5, \"Subject_Code\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(9, 7, \"Maximum_Marks\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(13, 9, \"Qualifying_Marks\"));\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\"\\u00A0 \", i0.ɵɵpipeBind1(19, 11, \"Add_Grade\"), \"\");\n  }\n}\n\nfunction AddupdateParametersForExamsComponent_div_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵelementStart(1, \"table\", 19);\n    i0.ɵɵelementStart(2, \"thead\");\n    i0.ɵɵelementStart(3, \"tr\");\n    i0.ɵɵelementStart(4, \"th\");\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\");\n    i0.ɵɵtext(11);\n    i0.ɵɵpipe(12, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"th\");\n    i0.ɵɵtext(14);\n    i0.ɵɵpipe(15, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"tbody\");\n    i0.ɵɵtemplate(17, AddupdateParametersForExamsComponent_div_38_ng_container_17_Template, 20, 13, \"ng-container\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 5, \"Subject_Code\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(9, 7, \"Maximum_Marks\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(12, 9, \"Qualifying_Marks\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(15, 11, \"Configure_Grade\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.getFormControls.controls);\n  }\n}\n\nfunction AddupdateParametersForExamsComponent_div_47_ng_container_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 37);\n    i0.ɵɵelementStart(1, \"tr\", 22);\n    i0.ɵɵelementStart(2, \"td\");\n    i0.ɵɵelement(3, \"input\", 25);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵelement(6, \"input\", 38);\n    i0.ɵɵpipe(7, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵelement(9, \"input\", 39);\n    i0.ɵɵpipe(10, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const j_r9 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", j_r9);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(4, 4, \"Max_Marks\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(7, 6, \"Min_Marks\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(10, 8, \"Grade_Of_Exam\"));\n  }\n}\n\nfunction AddupdateParametersForExamsComponent_div_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29);\n    i0.ɵɵelementStart(1, \"div\", 30);\n    i0.ɵɵelementStart(2, \"div\", 31);\n    i0.ɵɵelementStart(3, \"div\", 32);\n    i0.ɵɵelementStart(4, \"h3\", 33);\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 34);\n    i0.ɵɵelementStart(8, \"div\");\n    i0.ɵɵelementStart(9, \"table\", 19);\n    i0.ɵɵelementStart(10, \"thead\");\n    i0.ɵɵelementStart(11, \"tr\");\n    i0.ɵɵelementStart(12, \"th\");\n    i0.ɵɵtext(13);\n    i0.ɵɵpipe(14, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"th\");\n    i0.ɵɵtext(16);\n    i0.ɵɵpipe(17, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"th\");\n    i0.ɵɵtext(19);\n    i0.ɵɵpipe(20, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"tbody\");\n    i0.ɵɵtemplate(22, AddupdateParametersForExamsComponent_div_47_ng_container_22_Template, 11, 10, \"ng-container\", 35);\n    i0.ɵɵelementStart(23, \"tr\");\n    i0.ɵɵelementStart(24, \"td\", 36);\n    i0.ɵɵelement(25, \"input\", 16);\n    i0.ɵɵpipe(26, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r1.subjectName, \" \", i0.ɵɵpipeBind1(6, 7, \"Subject\"), \"\");\n    i0.ɵɵadvance(8);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(14, 9, \"Max_Marks\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(17, 11, \"Min_Marks\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(20, 13, \"Grade_Of_Exam\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.getTempTableFormControls.controls);\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"value\", i0.ɵɵpipeBind1(26, 15, \"Save\"));\n  }\n}\n\nexport let AddupdateParametersForExamsComponent = /*#__PURE__*/(() => {\n  class AddupdateParametersForExamsComponent {\n    constructor(fb, apiService, authService, utilService, dialogRef, notifyService) {\n      this.fb = fb;\n      this.apiService = apiService;\n      this.authService = authService;\n      this.utilService = utilService;\n      this.dialogRef = dialogRef;\n      this.notifyService = notifyService;\n      this.id = 0;\n      this.myControl = new FormControl('');\n      this.options = ['One', 'Two', 'Three'];\n      this.isShown = false;\n      this.isSecShown = false;\n      this.isArab = false;\n      this.gradeCode = '';\n      this.gradeSubjectList = [];\n      this.configRowsList = [];\n      this.buttonstatus = false;\n      this.subjectCode = '';\n      this.subjectName = '';\n      this.rid = -1;\n    }\n\n    ngOnInit() {\n      this.isArab = this.utilService.isArabic();\n\n      if (this.row) {\n        this.id = parseInt(this.row['id']);\n        this.gradeCode = this.row['gradeCode'];\n      }\n\n      this.form = this.fb.group({\n        'gradeCode': [this.gradeCode, Validators.required],\n        'academicYear': ['', Validators.required],\n        'isGradeRequired': [false],\n        'noOfGrades': ['', Validators.required],\n        'tableRows': this.fb.array([])\n      });\n      this.form2 = this.fb.group({\n        'configTempTableRows': this.fb.array([])\n      });\n      this.filteredOptions = this.myControl.valueChanges.pipe(startWith(''), map(value => this._filter(value || '')));\n      this.loadData();\n\n      if (this.row) {\n        this.id = this.row.id;\n        this.form.patchValue(this.row);\n      }\n    }\n\n    initiateTempTableForm() {\n      return this.fb.group({\n        'maximumMarks': ['', Validators.required],\n        'minimumMarks': ['', Validators.required],\n        'qualifiyingGrade': ['', Validators.required]\n      });\n    }\n\n    initiateForm(code) {\n      return this.fb.group({\n        'subCodes': [code, Validators.required],\n        'maximumMarks': ['', Validators.required],\n        'qualifyingMarks': ['', Validators.required],\n        'configRows': this.fb.array([])\n      });\n    }\n\n    initiateEditForm(subCodes, maximumMarks, qualifyingMarks, configRows) {\n      return this.fb.group({\n        'subCodes': [subCodes, Validators.required],\n        'maximumMarks': [maximumMarks, Validators.required],\n        'qualifyingMarks': [qualifyingMarks, Validators.required],\n        'configRows': [configRows]\n      });\n    }\n\n    get getFormControls() {\n      const control = this.form.get('tableRows');\n      return control;\n    }\n\n    get getTempTableFormControls() {\n      const control = this.form2.get('configTempTableRows');\n      return control;\n    }\n\n    initiateConfigForm() {\n      return this.fb.group({\n        'maximumMarks': ['', Validators.required],\n        'minimumMarks': ['', Validators.required],\n        'qualifiyingGrade': ['', Validators.required]\n      });\n    }\n\n    initiateConfigEditForm(maximumMarks, minimumMarks, qualifiyingGrade) {\n      return this.fb.group({\n        'maximumMarks': [maximumMarks, Validators.required],\n        'minimumMarks': [minimumMarks, Validators.required],\n        'qualifiyingGrade': [qualifiyingGrade, Validators.required]\n      });\n    }\n\n    loadData() {\n      this.apiService.getall('AcedemicClassGrade/GetAcademicYear').subscribe(res => {\n        this.form.patchValue({\n          'academicYear': res\n        });\n      });\n\n      if (this.gradeCode != null && this.gradeCode != '') {\n        this.apiService.getall(`AcademicsSubjects/GetAllGradeSubjectList/${this.gradeCode}`).subscribe(res => {\n          if (res) {\n            this.gradeSubjectList = res;\n            let control = this.form.get('tableRows');\n\n            for (var i = 0; i < res.length; i++) {\n              control.push(this.initiateForm(res[i].value));\n            }\n\n            if (res.length > 0) {\n              this.isShown = true;\n              this.buttonstatus = true;\n              this.editParametersForExamsData();\n            }\n          }\n        });\n      }\n    }\n\n    addGrades() {\n      const rows = this.form.get('tableRows');\n\n      if (rows.controls.length > 0 && this.rid > -1) {\n        var configTempTableRows = this.form2.get('configTempTableRows');\n        rows.controls[this.rid].value['configRows'] = configTempTableRows.value;\n\n        for (var i = configTempTableRows.length - 1; i >= 0; i--) {\n          configTempTableRows.removeAt(i);\n        }\n      }\n\n      this.rid = -1;\n      this.isSecShown = false;\n    }\n\n    toggleShow() {\n      this.isShown = !this.isShown;\n    }\n\n    toggleShowsec(rowid) {\n      const rows = this.form.get('tableRows');\n      const noOfGrades = this.form.controls['noOfGrades'].value;\n\n      if (rows.controls.length > 0 && noOfGrades > 0) {\n        var tempConfigTempTableRows = this.form2.get('configTempTableRows');\n\n        for (var i = tempConfigTempTableRows.length - 1; i >= 0; i--) {\n          tempConfigTempTableRows.removeAt(i);\n        }\n\n        this.rid = rowid;\n        this.isSecShown = true;\n        this.subjectCode = rows.controls[rowid].value['subCodes'];\n        var index = this.gradeSubjectList.findIndex(a => a.value === this.subjectCode);\n        this.subjectName = this.isArab ? this.gradeSubjectList[index].textTwo : this.gradeSubjectList[index].text;\n        var configTempTableRows = this.form2.get('configTempTableRows');\n        var actualConfigControl = rows.controls[rowid].value['configRows'];\n\n        for (var i = 0; i < noOfGrades; i++) {\n          if (actualConfigControl.length > i) {\n            configTempTableRows.push(this.fb.group(rows.controls[rowid].value['configRows'][i]));\n          } else {\n            configTempTableRows.push(this.initiateConfigForm());\n          }\n        }\n      } else this.utilService.FillUpFields();\n    }\n\n    editParametersForExamsData() {\n      this.apiService.getall(`ParametersForExams/${this.gradeCode}`).subscribe(res => {\n        if (res) {\n          this.form.patchValue({\n            'isGradeRequired': res.isGradeRequired,\n            'noOfGrades': res.noOfGrades\n          });\n          const rows = this.form.get('tableRows');\n          this.subjectCode = '';\n          this.configRowsList = [];\n\n          for (var i = 0; i < rows.length; i++) {\n            this.configRowsList = [];\n            this.subjectCode = rows.controls[i].value['subCodes'];\n            var tableRowsData = res.tableRows;\n            var index = tableRowsData.findIndex(x => x.subCodes === this.subjectCode);\n\n            if (index >= 0) {\n              rows.controls[i].patchValue({\n                'maximumMarks': tableRowsData[index].maximumMarks,\n                'qualifyingMarks': tableRowsData[index].qualifyingMarks,\n                'configRows': tableRowsData[index].configRows\n              });\n              rows.controls[i].value['configRows'] = tableRowsData[index].configRows;\n            }\n          }\n\n          this.subjectCode = '';\n          this.configRowsList = [];\n        }\n      });\n    }\n\n    _filter(value) {\n      const filterValue = value.toLowerCase();\n      return this.options.filter(option => option.toLowerCase().includes(filterValue));\n    }\n\n    submit() {\n      if (this.form.valid) {\n        this.apiService.post('ParametersForExams/CreateParametersForExams', this.form.value).subscribe(res => {\n          this.utilService.OkMessage();\n          this.reset();\n          this.dialogRef.close(true);\n        }, error => {\n          console.error(error);\n          this.utilService.ShowApiErrorMessage(error);\n        });\n      } else this.utilService.FillUpFields();\n    }\n\n    reset() {\n      this.form.reset();\n    }\n\n    closeModel() {\n      this.dialogRef.close();\n    }\n\n  }\n\n  AddupdateParametersForExamsComponent.ɵfac = function AddupdateParametersForExamsComponent_Factory(t) {\n    return new (t || AddupdateParametersForExamsComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApiService), i0.ɵɵdirectiveInject(i3.AuthorizeService), i0.ɵɵdirectiveInject(i4.UtilityService), i0.ɵɵdirectiveInject(i5.MatDialogRef), i0.ɵɵdirectiveInject(i6.NotificationService));\n  };\n\n  AddupdateParametersForExamsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddupdateParametersForExamsComponent,\n    selectors: [[\"app-addupdate-parameters-for-exams\"]],\n    decls: 48,\n    vars: 37,\n    consts: [[1, \"modal-title\"], [\"type\", \"button\", \"aria-hidden\", \"true\", 1, \"close\", 3, \"click\"], [\"novalidate\", \"\", 1, \"mt-4\", 3, \"formGroup\", \"ngSubmit\"], [1, \"outer\"], [1, \"row\", \"rowm0\", \"mt-3\"], [1, \"col-md-6\", \"col-lg-6\", \"col-sm-6\"], [1, \"form-group\"], [\"type\", \"text\", \"readonly\", \"\", \"formControlName\", \"gradeCode\", 1, \"form-control\", 3, \"placeholder\"], [3, \"control\"], [\"type\", \"text\", \"readonly\", \"\", \"formControlName\", \"academicYear\", 1, \"form-control\", 3, \"placeholder\"], [\"color\", \"primary\", \"formControlName\", \"isGradeRequired\"], [\"type\", \"text\", \"formControlName\", \"noOfGrades\", 1, \"form-control\", 3, \"placeholder\"], [\"class\", \"card-body\", 4, \"ngIf\"], [1, \"row\", \"customrow\", \"mt-4\"], [1, \"col-lg-12\", \"col-md-12\", \"text-center\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"value\", \"click\"], [\"type\", \"submit\", 1, \"btn\", \"waves-effect\", \"waves-light\", \"btn-primary\", 3, \"value\"], [\"class\", \" mt-4 pd-1\", 4, \"ngIf\"], [1, \"card-body\"], [1, \"table\", \"table-striped\", \"table-bordered\"], [\"formArrayName\", \"tableRows\", 4, \"ngFor\", \"ngForOf\"], [\"formArrayName\", \"tableRows\"], [3, \"formGroupName\"], [1, \"input-group\"], [\"type\", \"text\", \"formControlName\", \"subCodes\", \"readonly\", \"\", 1, \"form-control\", 3, \"placeholder\"], [\"type\", \"text\", \"formControlName\", \"maximumMarks\", 1, \"form-control\", 3, \"placeholder\"], [\"type\", \"text\", \"formControlName\", \"qualifyingMarks\", 1, \"form-control\", 3, \"placeholder\"], [3, \"click\"], [1, \"icon-plus\"], [1, \"mt-4\", \"pd-1\"], [1, \"customrow\", \"mt-4\", 2, \"margin\", \"0px\", \"border-bottom\", \"1px solid #ddd\"], [1, \"row\"], [1, \"col-md-12\", \"mb-3\", \"text-center\", 2, \"background\", \"#919191\"], [2, \"margin\", \"0px\", \"padding\", \"5px\", \"color\", \"#fff\"], [1, \"col-md-12\", \"mb-3\", \"text-center\"], [\"formArrayName\", \"configTempTableRows\", 4, \"ngFor\", \"ngForOf\"], [\"colspan\", \"3\", \"align\", \"center\"], [\"formArrayName\", \"configTempTableRows\"], [\"type\", \"text\", \"formControlName\", \"minimumMarks\", 1, \"form-control\", 3, \"placeholder\"], [\"type\", \"text\", \"formControlName\", \"qualifiyingGrade\", 1, \"form-control\", 3, \"placeholder\"]],\n    template: function AddupdateParametersForExamsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h3\", 0);\n        i0.ɵɵtext(1);\n        i0.ɵɵpipe(2, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function AddupdateParametersForExamsComponent_Template_button_click_3_listener() {\n          return ctx.closeModel();\n        });\n        i0.ɵɵtext(4, \" \\u00D7\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function AddupdateParametersForExamsComponent_Template_form_ngSubmit_5_listener() {\n          return ctx.submit();\n        });\n        i0.ɵɵelementStart(6, \"div\", 3);\n        i0.ɵɵelementStart(7, \"div\", 4);\n        i0.ɵɵelementStart(8, \"div\", 5);\n        i0.ɵɵelementStart(9, \"div\", 6);\n        i0.ɵɵelementStart(10, \"label\");\n        i0.ɵɵtext(11);\n        i0.ɵɵpipe(12, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"input\", 7);\n        i0.ɵɵpipe(14, \"translate\");\n        i0.ɵɵelement(15, \"validation-message\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 5);\n        i0.ɵɵelementStart(17, \"div\", 6);\n        i0.ɵɵelementStart(18, \"label\");\n        i0.ɵɵtext(19);\n        i0.ɵɵpipe(20, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"input\", 9);\n        i0.ɵɵpipe(22, \"translate\");\n        i0.ɵɵelement(23, \"validation-message\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"div\", 5);\n        i0.ɵɵelementStart(25, \"label\");\n        i0.ɵɵtext(26);\n        i0.ɵɵpipe(27, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"div\", 6);\n        i0.ɵɵelement(29, \"mat-slide-toggle\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"div\", 5);\n        i0.ɵɵelementStart(31, \"div\", 6);\n        i0.ɵɵelementStart(32, \"label\");\n        i0.ɵɵtext(33);\n        i0.ɵɵpipe(34, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(35, \"input\", 11);\n        i0.ɵɵpipe(36, \"translate\");\n        i0.ɵɵelement(37, \"validation-message\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(38, AddupdateParametersForExamsComponent_div_38_Template, 18, 13, \"div\", 12);\n        i0.ɵɵelementStart(39, \"div\", 13);\n        i0.ɵɵelementStart(40, \"div\", 14);\n        i0.ɵɵelementStart(41, \"input\", 15);\n        i0.ɵɵlistener(\"click\", function AddupdateParametersForExamsComponent_Template_input_click_41_listener() {\n          return ctx.closeModel();\n        });\n        i0.ɵɵpipe(42, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(43, \" \\u00A0\\u00A0 \");\n        i0.ɵɵelement(44, \"input\", 16);\n        i0.ɵɵpipe(45, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(46, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function AddupdateParametersForExamsComponent_Template_form_ngSubmit_46_listener() {\n          return ctx.addGrades();\n        });\n        i0.ɵɵtemplate(47, AddupdateParametersForExamsComponent_div_47_Template, 27, 17, \"div\", 17);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 17, \"Parameters_for_Exams_in_terms_of_Marks\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(12, 19, \"Class_Grade\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(14, 21, \"Class_Grade\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"control\", ctx.form.controls.gradeCode);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(20, 23, \"Academic_Year\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(22, 25, \"Academic_Year\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"control\", ctx.form.controls.academicYear);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(27, 27, \"Grading_System_Required\"));\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(34, 29, \"Number_Of_Grades\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(36, 31, \"Number_Of_Grades\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"control\", ctx.form.controls.noOfGrades);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isShown);\n        i0.ɵɵadvance(3);\n        i0.ɵɵpropertyInterpolate(\"value\", i0.ɵɵpipeBind1(42, 33, \"Cancel\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵpropertyInterpolate(\"value\", i0.ɵɵpipeBind1(45, 35, \"Save\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.form2);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isSecShown);\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i7.ValidationMessagesComponent, i8.MatSlideToggle, i9.NgIf, i9.NgForOf, i1.FormArrayName, i1.FormGroupName],\n    pipes: [i10.TranslatePipe],\n    encapsulation: 2\n  });\n  return AddupdateParametersForExamsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}