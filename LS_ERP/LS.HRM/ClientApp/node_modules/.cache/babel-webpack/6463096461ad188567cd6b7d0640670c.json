{"ast":null,"code":"import DateTime, { friendlyDateTime } from \"./datetime.js\";\nimport Duration from \"./duration.js\";\nimport Settings from \"./settings.js\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\nimport Formatter from \"./impl/formatter.js\";\nimport * as Formats from \"./impl/formats.js\";\nconst INVALID = \"Invalid Interval\"; // checks if the start is equal to or before the end\n\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\"end before start\", `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`);\n  } else {\n    return null;\n  }\n}\n/**\r\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\r\n *\r\n * Here is a brief overview of the most commonly used methods and getters in Interval:\r\n *\r\n * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.\r\n * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\r\n * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\r\n * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\r\n * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}\r\n * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toLocaleString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.\r\n */\n\n\nexport default class Interval {\n  /**\r\n   * @private\r\n   */\n  constructor(config) {\n    /**\r\n     * @access private\r\n     */\n    this.s = config.start;\n    /**\r\n     * @access private\r\n     */\n\n    this.e = config.end;\n    /**\r\n     * @access private\r\n     */\n\n    this.invalid = config.invalid || null;\n    /**\r\n     * @access private\r\n     */\n\n    this.isLuxonInterval = true;\n  }\n  /**\r\n   * Create an invalid Interval.\r\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\r\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\r\n   * @return {Interval}\r\n   */\n\n\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({\n        invalid\n      });\n    }\n  }\n  /**\r\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\r\n   * @param {DateTime|Date|Object} start\r\n   * @param {DateTime|Date|Object} end\r\n   * @return {Interval}\r\n   */\n\n\n  static fromDateTimes(start, end) {\n    const builtStart = friendlyDateTime(start),\n          builtEnd = friendlyDateTime(end);\n    const validateError = validateStartEnd(builtStart, builtEnd);\n\n    if (validateError == null) {\n      return new Interval({\n        start: builtStart,\n        end: builtEnd\n      });\n    } else {\n      return validateError;\n    }\n  }\n  /**\r\n   * Create an Interval from a start DateTime and a Duration to extend to.\r\n   * @param {DateTime|Date|Object} start\r\n   * @param {Duration|Object|number} duration - the length of the Interval.\r\n   * @return {Interval}\r\n   */\n\n\n  static after(start, duration) {\n    const dur = Duration.fromDurationLike(duration),\n          dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n  /**\r\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\r\n   * @param {DateTime|Date|Object} end\r\n   * @param {Duration|Object|number} duration - the length of the Interval.\r\n   * @return {Interval}\r\n   */\n\n\n  static before(end, duration) {\n    const dur = Duration.fromDurationLike(duration),\n          dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n  /**\r\n   * Create an Interval from an ISO 8601 string.\r\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\r\n   * @param {string} text - the ISO string to parse\r\n   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}\r\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\r\n   * @return {Interval}\r\n   */\n\n\n  static fromISO(text, opts) {\n    const [s, e] = (text || \"\").split(\"/\", 2);\n\n    if (s && e) {\n      let start, startIsValid;\n\n      try {\n        start = DateTime.fromISO(s, opts);\n        startIsValid = start.isValid;\n      } catch (e) {\n        startIsValid = false;\n      }\n\n      let end, endIsValid;\n\n      try {\n        end = DateTime.fromISO(e, opts);\n        endIsValid = end.isValid;\n      } catch (e) {\n        endIsValid = false;\n      }\n\n      if (startIsValid && endIsValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (startIsValid) {\n        const dur = Duration.fromISO(e, opts);\n\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (endIsValid) {\n        const dur = Duration.fromISO(s, opts);\n\n        if (dur.isValid) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n\n    return Interval.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n  }\n  /**\r\n   * Check if an object is an Interval. Works across context boundaries\r\n   * @param {object} o\r\n   * @return {boolean}\r\n   */\n\n\n  static isInterval(o) {\n    return o && o.isLuxonInterval || false;\n  }\n  /**\r\n   * Returns the start of the Interval\r\n   * @type {DateTime}\r\n   */\n\n\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n  /**\r\n   * Returns the end of the Interval\r\n   * @type {DateTime}\r\n   */\n\n\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n  /**\r\n   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\r\n   * @type {boolean}\r\n   */\n\n\n  get isValid() {\n    return this.invalidReason === null;\n  }\n  /**\r\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\r\n   * @type {string}\r\n   */\n\n\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n  /**\r\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\r\n   * @type {string}\r\n   */\n\n\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n  /**\r\n   * Returns the length of the Interval in the specified unit.\r\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\r\n   * @return {number}\r\n   */\n\n\n  length(unit = \"milliseconds\") {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n  /**\r\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\r\n   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\r\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\r\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\r\n   * @return {number}\r\n   */\n\n\n  count(unit = \"milliseconds\") {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n          end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + (end.valueOf() !== this.end.valueOf());\n  }\n  /**\r\n   * Returns whether this Interval's start and end are both in the same unit of time\r\n   * @param {string} unit - the unit of time to check sameness on\r\n   * @return {boolean}\r\n   */\n\n\n  hasSame(unit) {\n    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n  /**\r\n   * Return whether this Interval has the same start and end DateTimes.\r\n   * @return {boolean}\r\n   */\n\n\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n  /**\r\n   * Return whether this Interval's start is after the specified DateTime.\r\n   * @param {DateTime} dateTime\r\n   * @return {boolean}\r\n   */\n\n\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n  /**\r\n   * Return whether this Interval's end is before the specified DateTime.\r\n   * @param {DateTime} dateTime\r\n   * @return {boolean}\r\n   */\n\n\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n  /**\r\n   * Return whether this Interval contains the specified DateTime.\r\n   * @param {DateTime} dateTime\r\n   * @return {boolean}\r\n   */\n\n\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n  /**\r\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\r\n   * @param {Object} values - the values to set\r\n   * @param {DateTime} values.start - the starting DateTime\r\n   * @param {DateTime} values.end - the ending DateTime\r\n   * @return {Interval}\r\n   */\n\n\n  set({\n    start,\n    end\n  } = {}) {\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n  /**\r\n   * Split this Interval at each of the specified DateTimes\r\n   * @param {...DateTime} dateTimes - the unit of time to count.\r\n   * @return {Array}\r\n   */\n\n\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes.map(friendlyDateTime).filter(d => this.contains(d)).sort(),\n          results = [];\n    let {\n      s\n    } = this,\n        i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n            next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n  /**\r\n   * Split this Interval into smaller Intervals, each of the specified length.\r\n   * Left over time is grouped into a smaller interval\r\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\r\n   * @return {Array}\r\n   */\n\n\n  splitBy(duration) {\n    const dur = Duration.fromDurationLike(duration);\n\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n\n    let {\n      s\n    } = this,\n        idx = 1,\n        next;\n    const results = [];\n\n    while (s < this.e) {\n      const added = this.start.plus(dur.mapUnits(x => x * idx));\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      idx += 1;\n    }\n\n    return results;\n  }\n  /**\r\n   * Split this Interval into the specified number of smaller intervals.\r\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\r\n   * @return {Array}\r\n   */\n\n\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n  /**\r\n   * Return whether this Interval overlaps with the specified Interval\r\n   * @param {Interval} other\r\n   * @return {boolean}\r\n   */\n\n\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n  /**\r\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\r\n   * @param {Interval} other\r\n   * @return {boolean}\r\n   */\n\n\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n  /**\r\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\r\n   * @param {Interval} other\r\n   * @return {boolean}\r\n   */\n\n\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n  /**\r\n   * Return whether this Interval engulfs the start and end of the specified Interval.\r\n   * @param {Interval} other\r\n   * @return {boolean}\r\n   */\n\n\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n  /**\r\n   * Return whether this Interval has the same start and end as the specified Interval.\r\n   * @param {Interval} other\r\n   * @return {boolean}\r\n   */\n\n\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n  /**\r\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\r\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\r\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\r\n   * @param {Interval} other\r\n   * @return {Interval}\r\n   */\n\n\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n          e = this.e < other.e ? this.e : other.e;\n\n    if (s >= e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n  /**\r\n   * Return an Interval representing the union of this Interval and the specified Interval.\r\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\r\n   * @param {Interval} other\r\n   * @return {Interval}\r\n   */\n\n\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n          e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n  /**\r\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\r\n   * Combines overlapping and adjacent Intervals.\r\n   * @param {Array} intervals\r\n   * @return {Array}\r\n   */\n\n\n  static merge(intervals) {\n    const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(([sofar, current], item) => {\n      if (!current) {\n        return [sofar, item];\n      } else if (current.overlaps(item) || current.abutsStart(item)) {\n        return [sofar, current.union(item)];\n      } else {\n        return [sofar.concat([current]), item];\n      }\n    }, [[], null]);\n\n    if (final) {\n      found.push(final);\n    }\n\n    return found;\n  }\n  /**\r\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\r\n   * @param {Array} intervals\r\n   * @return {Array}\r\n   */\n\n\n  static xor(intervals) {\n    let start = null,\n        currentCount = 0;\n    const results = [],\n          ends = intervals.map(i => [{\n      time: i.s,\n      type: \"s\"\n    }, {\n      time: i.e,\n      type: \"e\"\n    }]),\n          flattened = Array.prototype.concat(...ends),\n          arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === \"s\" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n  /**\r\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\r\n   * @param {...Interval} intervals\r\n   * @return {Array}\r\n   */\n\n\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals)).map(i => this.intersection(i)).filter(i => i && !i.isEmpty());\n  }\n  /**\r\n   * Returns a string representation of this Interval appropriate for debugging.\r\n   * @return {string}\r\n   */\n\n\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n  /**\r\n   * Returns a localized string representing this Interval. Accepts the same options as the\r\n   * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as\r\n   * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method\r\n   * is browser-specific, but in general it will return an appropriate representation of the\r\n   * Interval in the assigned locale. Defaults to the system's locale if no locale has been\r\n   * specified.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\r\n   * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or\r\n   * Intl.DateTimeFormat constructor options.\r\n   * @param {Object} opts - Options to override the configuration of the start DateTime.\r\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022\r\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022\r\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022\r\n   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM\r\n   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p\r\n   * @return {string}\r\n   */\n\n\n  toLocaleString(formatOpts = Formats.DATE_SHORT, opts = {}) {\n    return this.isValid ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this) : INVALID;\n  }\n  /**\r\n   * Returns an ISO 8601-compliant string representation of this Interval.\r\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\r\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\r\n   * @return {string}\r\n   */\n\n\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n  /**\r\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\r\n   * The time components are ignored.\r\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\r\n   * @return {string}\r\n   */\n\n\n  toISODate() {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISODate()}/${this.e.toISODate()}`;\n  }\n  /**\r\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\r\n   * The date components are ignored.\r\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\r\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\r\n   * @return {string}\r\n   */\n\n\n  toISOTime(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;\n  }\n  /**\r\n   * Returns a string representation of this Interval formatted according to the specified format\r\n   * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible\r\n   * formatting tool.\r\n   * @param {string} dateFormat - The format string. This string formats the start and end time.\r\n   * See {@link DateTime#toFormat} for details.\r\n   * @param {Object} opts - Options.\r\n   * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end\r\n   * representations.\r\n   * @return {string}\r\n   */\n\n\n  toFormat(dateFormat, {\n    separator = \" – \"\n  } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n  /**\r\n   * Return a Duration representing the time spanned by this interval.\r\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\r\n   * @param {Object} opts - options that affect the creation of the Duration\r\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\r\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\r\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\r\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\r\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\r\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\r\n   * @return {Duration}\r\n   */\n\n\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n\n    return this.e.diff(this.s, unit, opts);\n  }\n  /**\r\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\r\n   * @param {function} mapFn\r\n   * @return {Interval}\r\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\r\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\r\n   */\n\n\n  mapEndpoints(mapFn) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}