{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Directive, Input, HostListener, Component, Pipe, Inject, Optional, EventEmitter, ViewChild, Output, ChangeDetectionStrategy, ContentChild, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { BehaviorSubject, Subject, merge } from 'rxjs';\nimport { shareReplay, tap, debounceTime, distinctUntilChanged, filter, takeUntil, map } from 'rxjs/operators';\nimport { trigger, transition, style, animate, sequence } from '@angular/animations';\nimport { DateTime, Info } from 'luxon';\nimport * as i4 from '@angular/forms';\nimport { FormControl, NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nfunction NgxMaterialTimepickerContentComponent_div_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction NgxMaterialTimepickerContentComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵtemplate(1, NgxMaterialTimepickerContentComponent_div_0_ng_container_1_Template, 1, 0, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n\n    const _r3 = i0.ɵɵreference(4);\n\n    i0.ɵɵproperty(\"ngxAppendToInput\", ctx_r0.inputElement);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r3);\n  }\n}\n\nfunction NgxMaterialTimepickerContentComponent_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction NgxMaterialTimepickerContentComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NgxMaterialTimepickerContentComponent_ng_template_1_ng_container_0_Template, 1, 0, \"ng-container\", 4);\n  }\n\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n\n    const _r3 = i0.ɵɵreference(4);\n\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r3);\n  }\n}\n\nfunction NgxMaterialTimepickerContentComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0);\n  }\n}\n\nconst _c0 = [\"*\"];\nconst _c1 = [\"editableTimeTmpl\"];\n\nconst _c2 = function (a0) {\n  return {\n    \"timepicker-dial__item_active\": a0\n  };\n};\n\nfunction NgxMaterialTimepickerDialControlComponent_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"input\", 2);\n    i0.ɵɵlistener(\"ngModelChange\", function NgxMaterialTimepickerDialControlComponent_input_0_Template_input_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.time = $event;\n    })(\"input\", function NgxMaterialTimepickerDialControlComponent_input_0_Template_input_input_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.updateTime();\n    })(\"focus\", function NgxMaterialTimepickerDialControlComponent_input_0_Template_input_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.saveTimeAndChangeTimeUnit($event, ctx_r6.timeUnit);\n    });\n    i0.ɵɵpipe(1, \"timeLocalizer\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c2, ctx_r0.isActive))(\"ngModel\", i0.ɵɵpipeBind2(1, 4, ctx_r0.time, ctx_r0.timeUnit))(\"disabled\", ctx_r0.disabled)(\"timepickerAutofocus\", ctx_r0.isActive);\n  }\n}\n\nfunction NgxMaterialTimepickerDialControlComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"input\", 3, 4);\n    i0.ɵɵlistener(\"focus\", function NgxMaterialTimepickerDialControlComponent_ng_template_1_Template_input_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.saveTimeAndChangeTimeUnit($event, ctx_r8.timeUnit);\n    })(\"keydown\", function NgxMaterialTimepickerDialControlComponent_ng_template_1_Template_input_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.onKeydown($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formControl\", ctx_r2.timeControl)(\"ngClass\", i0.ɵɵpureFunction1(3, _c2, ctx_r2.isActive))(\"timepickerAutofocus\", ctx_r2.isActive);\n  }\n}\n\nfunction NgxMaterialTimepickerPeriodComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵlistener(\"@scaleInOut.done\", function NgxMaterialTimepickerPeriodComponent_div_5_Template_div_animation_scaleInOut_done_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.animationDone();\n    });\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵtext(2, \"Current time would be invalid in this period.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"@scaleInOut\", undefined);\n  }\n}\n\nfunction NgxMaterialTimepickerDialComponent_div_8_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction NgxMaterialTimepickerDialComponent_div_8_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 10);\n    i0.ɵɵtext(1, \" * use arrows (\");\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3, \"\\u21C5\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \") to change the time\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c3 = function (a0) {\n  return {\n    \"timepicker-dial__hint-container--hidden\": a0\n  };\n};\n\nfunction NgxMaterialTimepickerDialComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtemplate(1, NgxMaterialTimepickerDialComponent_div_8_ng_container_1_Template, 1, 0, \"ng-container\", 8);\n    i0.ɵɵtemplate(2, NgxMaterialTimepickerDialComponent_div_8_ng_template_2_Template, 5, 0, \"ng-template\", null, 9, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r2 = i0.ɵɵreference(3);\n\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c3, !ctx_r0.isHintVisible));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.editableHintTmpl ? ctx_r0.editableHintTmpl : _r2);\n  }\n}\n\nconst _c4 = function (a0) {\n  return {\n    \"timepicker-dial__period--hidden\": a0\n  };\n};\n\nconst _c5 = [\"clockFace\"];\nconst _c6 = [\"clockHand\"];\n\nconst _c7 = function (a0) {\n  return {\n    \"transform\": a0\n  };\n};\n\nconst _c8 = function (a0, a1) {\n  return {\n    \"active\": a0,\n    \"disabled\": a1\n  };\n};\n\nfunction NgxMaterialTimepickerFaceComponent_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵelementStart(1, \"span\", 10);\n    i0.ɵɵpipe(2, \"activeHour\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"timeLocalizer\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const time_r7 = ctx.$implicit;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(11, _c7, \"rotateZ(\" + time_r7.angle + \"deg) translateX(-50%)\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(13, _c7, \"rotateZ(-\" + time_r7.angle + \"deg)\"))(\"ngClass\", i0.ɵɵpureFunction2(15, _c8, i0.ɵɵpipeBind3(2, 4, time_r7.time, ctx_r5.selectedTime.time, ctx_r5.isClockFaceDisabled), time_r7.disabled));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(4, 8, time_r7.time, ctx_r5.timeUnit.HOUR), \" \");\n  }\n}\n\nfunction NgxMaterialTimepickerFaceComponent_div_2_div_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵelementStart(1, \"span\", 10);\n    i0.ɵɵpipe(2, \"activeHour\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"timeLocalizer\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const time_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleProp(\"height\", ctx_r8.innerClockFaceSize, \"px\");\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(13, _c7, \"rotateZ(\" + time_r9.angle + \"deg) translateX(-50%)\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(15, _c7, \"rotateZ(-\" + time_r9.angle + \"deg)\"))(\"ngClass\", i0.ɵɵpureFunction2(17, _c8, i0.ɵɵpipeBind3(2, 6, time_r9.time, ctx_r8.selectedTime == null ? null : ctx_r8.selectedTime.time, ctx_r8.isClockFaceDisabled), time_r9.disabled));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(4, 10, time_r9.time, ctx_r8.timeUnit.HOUR), \"\");\n  }\n}\n\nfunction NgxMaterialTimepickerFaceComponent_div_2_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtemplate(1, NgxMaterialTimepickerFaceComponent_div_2_div_3_div_1_Template, 5, 20, \"div\", 12);\n    i0.ɵɵpipe(2, \"slice\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"top\", \"calc(50% - \" + ctx_r6.innerClockFaceSize + \"px)\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind3(2, 4, ctx_r6.faceTime, 12, 24))(\"ngForTrackBy\", ctx_r6.trackByTime);\n  }\n}\n\nfunction NgxMaterialTimepickerFaceComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtemplate(1, NgxMaterialTimepickerFaceComponent_div_2_div_1_Template, 5, 18, \"div\", 7);\n    i0.ɵɵpipe(2, \"slice\");\n    i0.ɵɵtemplate(3, NgxMaterialTimepickerFaceComponent_div_2_div_3_Template, 3, 8, \"div\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind3(2, 3, ctx_r1.faceTime, 0, 12))(\"ngForTrackBy\", ctx_r1.trackByTime);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.faceTime.length > 12);\n  }\n}\n\nfunction NgxMaterialTimepickerFaceComponent_ng_template_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵelementStart(1, \"span\", 10);\n    i0.ɵɵpipe(2, \"activeMinute\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"timeLocalizer\");\n    i0.ɵɵpipe(5, \"minutesFormatter\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const time_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(15, _c7, \"rotateZ(\" + time_r11.angle + \"deg) translateX(-50%)\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(17, _c7, \"rotateZ(-\" + time_r11.angle + \"deg)\"))(\"ngClass\", i0.ɵɵpureFunction2(19, _c8, i0.ɵɵpipeBind4(2, 4, time_r11.time, ctx_r10.selectedTime == null ? null : ctx_r10.selectedTime.time, ctx_r10.minutesGap, ctx_r10.isClockFaceDisabled), time_r11.disabled));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(4, 9, i0.ɵɵpipeBind2(5, 12, time_r11.time, ctx_r10.minutesGap), ctx_r10.timeUnit.MINUTE), \"\");\n  }\n}\n\nfunction NgxMaterialTimepickerFaceComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtemplate(1, NgxMaterialTimepickerFaceComponent_ng_template_5_div_1_Template, 6, 22, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.faceTime)(\"ngForTrackBy\", ctx_r4.trackByTime);\n  }\n}\n\nconst _c9 = function (a0) {\n  return {\n    \"clock-face__clock-hand_minute\": a0\n  };\n};\n\nfunction NgxMaterialTimepickerContainerComponent_div_11_ngx_material_timepicker_24_hours_face_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ngx-material-timepicker-24-hours-face\", 17);\n    i0.ɵɵlistener(\"hourChange\", function NgxMaterialTimepickerContainerComponent_div_11_ngx_material_timepicker_24_hours_face_1_Template_ngx_material_timepicker_24_hours_face_hourChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return ctx_r11.onHourChange($event);\n    })(\"hourSelected\", function NgxMaterialTimepickerContainerComponent_div_11_ngx_material_timepicker_24_hours_face_1_Template_ngx_material_timepicker_24_hours_face_hourSelected_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return ctx_r13.onHourSelected($event);\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"selectedHour\", i0.ɵɵpipeBind1(1, 4, ctx_r8.selectedHour))(\"minTime\", ctx_r8.minTime)(\"maxTime\", ctx_r8.maxTime)(\"format\", ctx_r8.format);\n  }\n}\n\nfunction NgxMaterialTimepickerContainerComponent_div_11_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ngx-material-timepicker-12-hours-face\", 18);\n    i0.ɵɵlistener(\"hourChange\", function NgxMaterialTimepickerContainerComponent_div_11_ng_template_2_Template_ngx_material_timepicker_12_hours_face_hourChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.onHourChange($event);\n    })(\"hourSelected\", function NgxMaterialTimepickerContainerComponent_div_11_ng_template_2_Template_ngx_material_timepicker_12_hours_face_hourSelected_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return ctx_r16.onHourSelected($event);\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"selectedHour\", i0.ɵɵpipeBind1(1, 4, ctx_r10.selectedHour))(\"period\", i0.ɵɵpipeBind1(2, 6, ctx_r10.selectedPeriod))(\"minTime\", ctx_r10.minTime)(\"maxTime\", ctx_r10.maxTime);\n  }\n}\n\nfunction NgxMaterialTimepickerContainerComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, NgxMaterialTimepickerContainerComponent_div_11_ngx_material_timepicker_24_hours_face_1_Template, 2, 6, \"ngx-material-timepicker-24-hours-face\", 15);\n    i0.ɵɵtemplate(2, NgxMaterialTimepickerContainerComponent_div_11_ng_template_2_Template, 3, 8, \"ng-template\", null, 16, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r9 = i0.ɵɵreference(3);\n\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.format === 24)(\"ngIfElse\", _r9);\n  }\n}\n\nfunction NgxMaterialTimepickerContainerComponent_ngx_material_timepicker_minutes_face_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ngx-material-timepicker-minutes-face\", 19);\n    i0.ɵɵlistener(\"minuteChange\", function NgxMaterialTimepickerContainerComponent_ngx_material_timepicker_minutes_face_12_Template_ngx_material_timepicker_minutes_face_minuteChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.onMinuteChange($event);\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵpipe(3, \"async\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_1_0;\n    i0.ɵɵproperty(\"selectedMinute\", i0.ɵɵpipeBind1(1, 7, ctx_r1.selectedMinute))(\"selectedHour\", (tmp_1_0 = i0.ɵɵpipeBind1(2, 9, ctx_r1.selectedHour)) == null ? null : tmp_1_0.time)(\"minTime\", ctx_r1.minTime)(\"maxTime\", ctx_r1.maxTime)(\"format\", ctx_r1.format)(\"period\", i0.ɵɵpipeBind1(3, 11, ctx_r1.selectedPeriod))(\"minutesGap\", ctx_r1.minutesGap);\n  }\n}\n\nfunction NgxMaterialTimepickerContainerComponent_ng_container_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction NgxMaterialTimepickerContainerComponent_ng_container_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction NgxMaterialTimepickerContainerComponent_ng_template_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ngx-material-timepicker-button\");\n    i0.ɵɵtext(1, \"Cancel\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction NgxMaterialTimepickerContainerComponent_ng_template_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ngx-material-timepicker-button\");\n    i0.ɵɵtext(1, \"Ok\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c10 = function (a0) {\n  return {\n    \"timepicker-backdrop-overlay--transparent\": a0\n  };\n};\n\nfunction NgxMaterialTimepickerToggleComponent__svg_svg_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 2);\n    i0.ɵɵelement(1, \"path\", 3);\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c11 = [[[\"\", \"ngxMaterialTimepickerToggleIcon\", \"\"]]];\nconst _c12 = [\"[ngxMaterialTimepickerToggleIcon]\"];\n\nconst _c13 = function (a0) {\n  return {\n    \"ngx-timepicker-control--active\": a0\n  };\n};\n\nconst _c14 = function (a0) {\n  return {\n    \"period-selector__button--active\": a0\n  };\n};\n\nfunction NgxTimepickerPeriodSelectorComponent_ul_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ul\", 6);\n    i0.ɵɵelementStart(1, \"li\");\n    i0.ɵɵelementStart(2, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function NgxTimepickerPeriodSelectorComponent_ul_7_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.select(ctx_r2.period.AM);\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"li\");\n    i0.ɵɵelementStart(5, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function NgxTimepickerPeriodSelectorComponent_ul_7_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.select(ctx_r4.period.PM);\n    });\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@scaleInOut\", undefined)(\"timepickerAutofocus\", true);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(6, _c14, ctx_r0.localizedPeriod === ctx_r0.meridiems[0]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.meridiems[0]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(8, _c14, ctx_r0.localizedPeriod === ctx_r0.meridiems[1]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.meridiems[1]);\n  }\n}\n\nfunction NgxTimepickerPeriodSelectorComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵlistener(\"click\", function NgxTimepickerPeriodSelectorComponent_div_8_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.backdropClick();\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c15 = function (a0) {\n  return {\n    \"period-control__button--disabled\": a0\n  };\n};\n\nfunction NgxTimepickerFieldComponent_ngx_timepicker_period_selector_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ngx-timepicker-period-selector\", 9);\n    i0.ɵɵlistener(\"periodSelected\", function NgxTimepickerFieldComponent_ngx_timepicker_period_selector_7_Template_ngx_timepicker_period_selector_periodSelected_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.changePeriod($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"selectedPeriod\", ctx_r0.period)(\"disabled\", ctx_r0.disabled || ctx_r0.isChangePeriodDisabled);\n  }\n}\n\nfunction NgxTimepickerFieldComponent_ngx_material_timepicker_toggle_8_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c16 = function (a0) {\n  return {\n    \"ngx-timepicker__toggle--left\": a0\n  };\n};\n\nfunction NgxTimepickerFieldComponent_ngx_material_timepicker_toggle_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ngx-material-timepicker-toggle\", 10);\n    i0.ɵɵelementStart(1, \"span\", 11);\n    i0.ɵɵtemplate(2, NgxTimepickerFieldComponent_ngx_material_timepicker_toggle_8_ng_container_2_Template, 1, 0, \"ng-container\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n\n    const _r2 = i0.ɵɵreference(10);\n\n    const _r3 = i0.ɵɵreference(12);\n\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c16, ctx_r1.buttonAlign === \"left\"))(\"for\", _r2)(\"disabled\", ctx_r1.disabled);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.toggleIcon || _r3);\n  }\n}\n\nfunction NgxTimepickerFieldComponent_ng_template_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 13);\n    i0.ɵɵelement(1, \"path\", 14);\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c17 = function (a0) {\n  return {\n    \"ngx-timepicker--disabled\": a0\n  };\n};\n\nvar TimeUnit;\n\n(function (TimeUnit) {\n  TimeUnit[TimeUnit[\"HOUR\"] = 0] = \"HOUR\";\n  TimeUnit[TimeUnit[\"MINUTE\"] = 1] = \"MINUTE\";\n})(TimeUnit || (TimeUnit = {}));\n\nvar TimePeriod;\n\n(function (TimePeriod) {\n  TimePeriod[\"AM\"] = \"AM\";\n  TimePeriod[\"PM\"] = \"PM\";\n})(TimePeriod || (TimePeriod = {}));\n\nvar TimeFormat;\n\n(function (TimeFormat) {\n  TimeFormat[\"TWELVE\"] = \"hh:mm a\";\n  TimeFormat[\"TWELVE_SHORT\"] = \"h:m a\";\n  TimeFormat[\"TWENTY_FOUR\"] = \"HH:mm\";\n  TimeFormat[\"TWENTY_FOUR_SHORT\"] = \"H:m\";\n})(TimeFormat || (TimeFormat = {}));\n\nfunction isSameOrAfter(time, compareWith, unit = 'minutes') {\n  if (unit === 'hours') {\n    return time.hour >= compareWith.hour;\n  }\n\n  if (unit === 'minutes') {\n    return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\n  }\n}\n\nfunction isSameOrBefore(time, compareWith, unit = 'minutes') {\n  if (unit === 'hours') {\n    return time.hour <= compareWith.hour;\n  }\n\n  if (unit === 'minutes') {\n    return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\n  }\n}\n\nfunction isBetween(time, before, after, unit = 'minutes') {\n  if (unit === 'hours') {\n    return isSameOrBefore(time, after, unit) && isSameOrAfter(time, before, unit);\n  }\n\n  if (unit === 'minutes') {\n    return isSameOrBefore(time, after) && isSameOrAfter(time, before);\n  }\n}\n\nfunction isDigit(e) {\n  // Allow: backspace, delete, tab, escape, enter\n  if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) || e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true) || e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true) || e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true) || e.keyCode >= 35 && e.keyCode <= 40) {\n    return true;\n  }\n\n  return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\n} // @dynamic\n\n\nclass TimeAdapter {\n  static parseTime(time, opts) {\n    const {\n      numberingSystem,\n      locale\n    } = TimeAdapter.getLocaleOptionsByTime(time, opts);\n    const isPeriodExist = time.split(' ').length === 2;\n    const timeMask = isPeriodExist ? TimeFormat.TWELVE_SHORT : TimeFormat.TWENTY_FOUR_SHORT;\n    return DateTime.fromFormat(time, timeMask, {\n      numberingSystem,\n      locale\n    });\n  }\n\n  static formatTime(time, opts) {\n    if (!time) {\n      return 'Invalid Time';\n    }\n\n    const {\n      format\n    } = opts;\n    const parsedTime = TimeAdapter.parseTime(time, opts).setLocale(TimeAdapter.DEFAULT_LOCALE);\n\n    if (!parsedTime.isValid) {\n      return null;\n    }\n\n    if (format !== 24) {\n      return parsedTime.toLocaleString(Object.assign(Object.assign({}, DateTime.TIME_SIMPLE), {\n        hour12: format !== 24,\n        numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM\n      })).replace(/\\u200E/g, '').replace(/\\u202F/g, ' ');\n    }\n\n    return parsedTime.toISOTime({\n      includeOffset: false,\n      suppressMilliseconds: true,\n      suppressSeconds: true\n    }).replace(/\\u200E/g, '').replace(/\\u202F/g, ' ');\n  }\n\n  static toLocaleTimeString(time, opts = {}) {\n    const {\n      format = TimeAdapter.DEFAULT_FORMAT,\n      locale = TimeAdapter.DEFAULT_LOCALE\n    } = opts;\n    const hourCycle = format === 24 ? 'h23' : 'h12';\n    const timeFormat = Object.assign(Object.assign({}, DateTime.TIME_SIMPLE), {\n      hourCycle\n    });\n    const timeMask = format === 24 ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;\n    const localOpts = Object.assign({\n      locale: opts.locale,\n      numberingSystem: opts.numberingSystem\n    }, timeFormat);\n    return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(localOpts).replace(/\\u202F/g, ' ');\n  }\n\n  static isTimeAvailable(time, min, max, granularity, minutesGap, format) {\n    if (!time) {\n      return;\n    }\n\n    const convertedTime = this.parseTime(time, {\n      format\n    });\n    const minutes = convertedTime.minute;\n\n    if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\n      throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\n    }\n\n    const isAfter = min && !max && isSameOrAfter(convertedTime, min, granularity);\n    const isBefore = max && !min && isSameOrBefore(convertedTime, max, granularity);\n    const between = min && max && isBetween(convertedTime, min, max, granularity);\n    const isAvailable = !min && !max;\n    return isAfter || isBefore || between || isAvailable;\n  }\n  /***\r\n   *  Format hour according to time format (12 or 24)\r\n   */\n\n\n  static formatHour(currentHour, format, period) {\n    if (format === 24) {\n      return currentHour;\n    }\n\n    const hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\n\n    if (period === TimePeriod.AM && hour === 12) {\n      return 0;\n    } else if (period === TimePeriod.PM && hour === 24) {\n      return 12;\n    }\n\n    return hour;\n  }\n\n  static fromDateTimeToString(time, format) {\n    const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\n    return time.reconfigure({\n      numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM,\n      locale: TimeAdapter.DEFAULT_LOCALE\n    }).toFormat(timeFormat).replace(/\\u202F/g, ' ');\n  }\n\n  static getLocaleOptionsByTime(time, opts) {\n    const localeConfig = {\n      numberingSystem: opts.numberingSystem,\n      locale: opts.locale\n    };\n    const defaultConfig = {\n      numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM,\n      locale: TimeAdapter.DEFAULT_LOCALE\n    };\n    return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;\n  }\n\n}\n\nTimeAdapter.DEFAULT_FORMAT = 12;\nTimeAdapter.DEFAULT_LOCALE = 'en-US';\nTimeAdapter.DEFAULT_NUMBERING_SYSTEM = 'latn';\nconst DEFAULT_HOUR = {\n  time: 12,\n  angle: 360\n};\nconst DEFAULT_MINUTE = {\n  time: 0,\n  angle: 360\n};\n\nclass NgxMaterialTimepickerService {\n  constructor() {\n    this.hourSubject = new BehaviorSubject(DEFAULT_HOUR);\n    this.minuteSubject = new BehaviorSubject(DEFAULT_MINUTE);\n    this.periodSubject = new BehaviorSubject(TimePeriod.AM);\n  }\n\n  set hour(hour) {\n    this.hourSubject.next(hour);\n  }\n\n  get selectedHour() {\n    return this.hourSubject.asObservable();\n  }\n\n  set minute(minute) {\n    this.minuteSubject.next(minute);\n  }\n\n  get selectedMinute() {\n    return this.minuteSubject.asObservable();\n  }\n\n  set period(period) {\n    const isPeriodValid = period === TimePeriod.AM || period === TimePeriod.PM;\n\n    if (isPeriodValid) {\n      this.periodSubject.next(period);\n    }\n  }\n\n  get selectedPeriod() {\n    return this.periodSubject.asObservable();\n  }\n\n  setDefaultTimeIfAvailable(time, min, max, format, minutesGap) {\n    /* Workaround to double error message*/\n    try {\n      if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes', minutesGap)) {\n        this.setDefaultTime(time, format);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  getFullTime(format) {\n    const selectedHour = this.hourSubject.getValue().time;\n    const selectedMinute = this.minuteSubject.getValue().time;\n    const hour = selectedHour != null ? selectedHour : DEFAULT_HOUR.time;\n    const minute = selectedMinute != null ? selectedMinute : DEFAULT_MINUTE.time;\n    const period = format === 12 ? this.periodSubject.getValue() : '';\n    const time = `${hour}:${minute} ${period}`.trim();\n    return TimeAdapter.formatTime(time, {\n      format\n    });\n  }\n\n  setDefaultTime(time, format) {\n    const defaultTime = TimeAdapter.parseTime(time, {\n      format\n    }).toJSDate();\n\n    if (DateTime.fromJSDate(defaultTime).isValid) {\n      const period = time.substr(time.length - 2).toUpperCase();\n      const hour = defaultTime.getHours();\n      this.hour = Object.assign(Object.assign({}, DEFAULT_HOUR), {\n        time: formatHourByPeriod(hour, period)\n      });\n      this.minute = Object.assign(Object.assign({}, DEFAULT_MINUTE), {\n        time: defaultTime.getMinutes()\n      });\n      this.period = period;\n    } else {\n      this.resetTime();\n    }\n  }\n\n  resetTime() {\n    this.hour = Object.assign({}, DEFAULT_HOUR);\n    this.minute = Object.assign({}, DEFAULT_MINUTE);\n    this.period = TimePeriod.AM;\n  }\n\n}\n\nNgxMaterialTimepickerService.ɵfac = function NgxMaterialTimepickerService_Factory(t) {\n  return new (t || NgxMaterialTimepickerService)();\n};\n\nNgxMaterialTimepickerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxMaterialTimepickerService,\n  factory: NgxMaterialTimepickerService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaterialTimepickerService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/***\r\n *  Format hour in 24hours format to meridian (AM or PM) format\r\n */\n\n\nfunction formatHourByPeriod(hour, period) {\n  switch (period) {\n    case TimePeriod.AM:\n      return hour === 0 ? 12 : hour;\n\n    case TimePeriod.PM:\n      return hour === 12 ? 12 : hour - 12;\n\n    default:\n      return hour;\n  }\n}\n\nconst TIME_LOCALE = new InjectionToken('TimeLocale', {\n  providedIn: 'root',\n  factory: () => TimeAdapter.DEFAULT_LOCALE\n});\nconst NUMBERING_SYSTEM = new InjectionToken('NumberingSystem', {\n  providedIn: 'root',\n  factory: () => TimeAdapter.DEFAULT_NUMBERING_SYSTEM\n});\n\nclass NgxMaterialTimepickerEventService {\n  constructor() {\n    this.backdropClickSubject = new Subject();\n    this.keydownEventSubject = new Subject();\n  }\n\n  get backdropClick() {\n    return this.backdropClickSubject.asObservable().pipe(shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n  }\n\n  get keydownEvent() {\n    return this.keydownEventSubject.asObservable().pipe(shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n  }\n\n  dispatchEvent(event) {\n    switch (event.type) {\n      case 'click':\n        this.backdropClickSubject.next(event);\n        break;\n\n      case 'keydown':\n        this.keydownEventSubject.next(event);\n        break;\n\n      default:\n        throw new Error('no such event type');\n    }\n  }\n\n}\n\nNgxMaterialTimepickerEventService.ɵfac = function NgxMaterialTimepickerEventService_Factory(t) {\n  return new (t || NgxMaterialTimepickerEventService)();\n};\n\nNgxMaterialTimepickerEventService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxMaterialTimepickerEventService,\n  factory: NgxMaterialTimepickerEventService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaterialTimepickerEventService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nclass AppendToInputDirective {\n  constructor(elementRef, renderer) {\n    this.renderer = renderer;\n    this.element = elementRef.nativeElement;\n  }\n\n  get inputCords() {\n    return this.inputElement.getBoundingClientRect();\n  }\n\n  get direction() {\n    const height = this.element.offsetHeight;\n    const {\n      bottom,\n      top\n    } = this._inputCords;\n    const isElementFit = (window && window.innerHeight) - bottom < height;\n    const isTop = isElementFit && top > height;\n    const isCenter = isElementFit && top < height;\n\n    if (isTop) {\n      return 'top';\n    } else if (isCenter) {\n      return 'center';\n    }\n\n    return 'bottom';\n  }\n\n  ngAfterViewInit() {\n    this._inputCords = this.inputCords;\n    this._direction = this.direction;\n    this.append();\n  }\n\n  changePosition() {\n    const {\n      bottom,\n      top\n    } = this.inputCords;\n    const y = this.defineElementYByDirection(top, bottom);\n    this.setStyle('top', `${y}px`);\n  }\n\n  append() {\n    const {\n      left,\n      bottom,\n      top\n    } = this._inputCords;\n    const y = this.defineElementYByDirection(top, bottom);\n    this.setStyle('position', 'fixed');\n    this.setStyle('left', `${left}px`);\n    this.setStyle('top', `${y}px`);\n  }\n\n  setStyle(style, value) {\n    this.renderer.setStyle(this.element, style, value);\n  }\n\n  defineElementYByDirection(inputTop, inputBottom) {\n    if (this._direction === 'top') {\n      return inputTop - this.element.offsetHeight;\n    } else if (this._direction === 'center') {\n      return inputTop - this.element.offsetHeight / 2;\n    }\n\n    return inputBottom;\n  }\n\n}\n\nAppendToInputDirective.ɵfac = function AppendToInputDirective_Factory(t) {\n  return new (t || AppendToInputDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\n\nAppendToInputDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: AppendToInputDirective,\n  selectors: [[\"\", \"ngxAppendToInput\", \"\"]],\n  hostBindings: function AppendToInputDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"scroll\", function AppendToInputDirective_scroll_HostBindingHandler() {\n        return ctx.changePosition();\n      }, false, i0.ɵɵresolveWindow);\n    }\n  },\n  inputs: {\n    inputElement: [\"ngxAppendToInput\", \"inputElement\"]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AppendToInputDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxAppendToInput]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    inputElement: [{\n      type: Input,\n      args: ['ngxAppendToInput']\n    }],\n    changePosition: [{\n      type: HostListener,\n      args: ['window:scroll']\n    }]\n  });\n})();\n\nclass NgxMaterialTimepickerContentComponent {}\n\nNgxMaterialTimepickerContentComponent.ɵfac = function NgxMaterialTimepickerContentComponent_Factory(t) {\n  return new (t || NgxMaterialTimepickerContentComponent)();\n};\n\nNgxMaterialTimepickerContentComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMaterialTimepickerContentComponent,\n  selectors: [[\"ngx-material-timepicker-content\"]],\n  inputs: {\n    appendToInput: \"appendToInput\",\n    inputElement: \"inputElement\"\n  },\n  ngContentSelectors: _c0,\n  decls: 5,\n  vars: 2,\n  consts: [[3, \"ngxAppendToInput\", 4, \"ngIf\", \"ngIfElse\"], [\"timepickerModal\", \"\"], [\"timepickerOutlet\", \"\"], [3, \"ngxAppendToInput\"], [4, \"ngTemplateOutlet\"]],\n  template: function NgxMaterialTimepickerContentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵtemplate(0, NgxMaterialTimepickerContentComponent_div_0_Template, 2, 2, \"div\", 0);\n      i0.ɵɵtemplate(1, NgxMaterialTimepickerContentComponent_ng_template_1_Template, 1, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtemplate(3, NgxMaterialTimepickerContentComponent_ng_template_3_Template, 1, 0, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(2);\n\n      i0.ɵɵproperty(\"ngIf\", ctx.appendToInput)(\"ngIfElse\", _r1);\n    }\n  },\n  directives: [i1.NgIf, AppendToInputDirective, i1.NgTemplateOutlet],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaterialTimepickerContentComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-material-timepicker-content',\n      templateUrl: './ngx-material-timepicker-content.component.html'\n    }]\n  }], null, {\n    appendToInput: [{\n      type: Input\n    }],\n    inputElement: [{\n      type: Input\n    }]\n  });\n})(); // @dynamic\n\n\nclass TimepickerTimeUtils {\n  static getHours(format) {\n    return Array(format).fill(1).map((v, i) => {\n      const angleStep = 30;\n      const time = v + i;\n      const angle = angleStep * time;\n      return {\n        time: time === 24 ? 0 : time,\n        angle\n      };\n    });\n  }\n\n  static disableHours(hours, config) {\n    if (config.min || config.max) {\n      return hours.map(value => {\n        const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(value.time, config.format, config.period);\n        const currentTime = DateTime.fromObject({\n          hour\n        }).toFormat(TimeFormat.TWELVE);\n        return Object.assign(Object.assign({}, value), {\n          disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\n        });\n      });\n    }\n\n    return hours;\n  }\n\n  static getMinutes(gap = 1) {\n    const minutesCount = 60;\n    const angleStep = 360 / minutesCount;\n    const minutes = [];\n\n    for (let i = 0; i < minutesCount; i++) {\n      const angle = angleStep * i;\n\n      if (i % gap === 0) {\n        minutes.push({\n          time: i,\n          angle: angle !== 0 ? angle : 360\n        });\n      }\n    }\n\n    return minutes;\n  }\n\n  static disableMinutes(minutes, selectedHour, config) {\n    if (config.min || config.max) {\n      const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\n      return minutes.map(value => {\n        const currentTime = DateTime.fromObject({\n          hour,\n          minute: value.time\n        }).toFormat(TimeFormat.TWELVE);\n        return Object.assign(Object.assign({}, value), {\n          disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\n        });\n      });\n    }\n\n    return minutes;\n  }\n\n}\n\nclass TimeLocalizerPipe {\n  constructor(locale) {\n    this.locale = locale;\n  }\n\n  transform(time, timeUnit, isKeyboardEnabled = false) {\n    if (time == null || time === '') {\n      return '';\n    }\n\n    switch (timeUnit) {\n      case TimeUnit.HOUR:\n        {\n          const format = time === 0 || isKeyboardEnabled ? 'HH' : 'H';\n          return this.formatTime('hour', time, format);\n        }\n\n      case TimeUnit.MINUTE:\n        return this.formatTime('minute', time, 'mm');\n\n      default:\n        throw new Error(`There is no Time Unit with type ${timeUnit}`);\n    }\n  }\n\n  formatTime(timeMeasure, time, format) {\n    try {\n      return DateTime.fromObject({\n        [timeMeasure]: +time\n      }).setLocale(this.locale).toFormat(format);\n    } catch (_a) {\n      throw new Error(`Cannot format provided time - ${time} to locale - ${this.locale}`);\n    }\n  }\n\n}\n\nTimeLocalizerPipe.ɵfac = function TimeLocalizerPipe_Factory(t) {\n  return new (t || TimeLocalizerPipe)(i0.ɵɵdirectiveInject(TIME_LOCALE, 16));\n};\n\nTimeLocalizerPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"timeLocalizer\",\n  type: TimeLocalizerPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TimeLocalizerPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'timeLocalizer'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [TIME_LOCALE]\n      }]\n    }];\n  }, null);\n})();\n\nclass TimeParserPipe {\n  constructor(locale, numberingSystem) {\n    this.locale = locale;\n    this.numberingSystem = numberingSystem;\n  }\n\n  transform(time, timeUnit = TimeUnit.HOUR) {\n    if (time == null || time === '') {\n      return '';\n    }\n\n    if (!isNaN(+time)) {\n      return time;\n    }\n\n    if (timeUnit === TimeUnit.MINUTE) {\n      return this.parseTime(time, 'm', 'minute');\n    }\n\n    return this.parseTime(time, 'H', 'hour');\n  }\n\n  parseTime(time, format, timeMeasure) {\n    const parsedTime = DateTime.fromFormat(String(time), format, {\n      numberingSystem: this.numberingSystem,\n      locale: this.locale\n    })[timeMeasure];\n\n    if (!isNaN(parsedTime)) {\n      return parsedTime;\n    }\n\n    throw new Error(`Cannot parse time - ${time}`);\n  }\n\n}\n\nTimeParserPipe.ɵfac = function TimeParserPipe_Factory(t) {\n  return new (t || TimeParserPipe)(i0.ɵɵdirectiveInject(TIME_LOCALE, 16), i0.ɵɵdirectiveInject(NUMBERING_SYSTEM, 16));\n};\n\nTimeParserPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"timeParser\",\n  type: TimeParserPipe,\n  pure: true\n});\nTimeParserPipe.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TimeParserPipe,\n  factory: TimeParserPipe.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TimeParserPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'timeParser'\n    }]\n  }, {\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [TIME_LOCALE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [NUMBERING_SYSTEM]\n      }]\n    }];\n  }, null);\n})();\n\nclass AutofocusDirective {\n  constructor(element, document) {\n    this.element = element;\n    this.document = document;\n    this.activeElement = this.document.activeElement;\n  }\n\n  ngOnChanges() {\n    if (this.isFocusActive) {\n      // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n      setTimeout(() => this.element.nativeElement.focus({\n        preventScroll: true\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n    setTimeout(() => this.activeElement.focus({\n      preventScroll: true\n    }));\n  }\n\n}\n\nAutofocusDirective.ɵfac = function AutofocusDirective_Factory(t) {\n  return new (t || AutofocusDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DOCUMENT, 8));\n};\n\nAutofocusDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: AutofocusDirective,\n  selectors: [[\"\", \"timepickerAutofocus\", \"\"]],\n  inputs: {\n    isFocusActive: [\"timepickerAutofocus\", \"isFocusActive\"]\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AutofocusDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[timepickerAutofocus]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    isFocusActive: [{\n      type: Input,\n      args: ['timepickerAutofocus']\n    }]\n  });\n})();\n/* tslint:disable:triple-equals */\n\n\nclass NgxMaterialTimepickerDialControlComponent {\n  constructor(timeParserPipe, timeLocalizerPipe) {\n    this.timeParserPipe = timeParserPipe;\n    this.timeLocalizerPipe = timeLocalizerPipe;\n    this.timeUnitChanged = new EventEmitter();\n    this.timeChanged = new EventEmitter();\n    this.focused = new EventEmitter();\n    this.unfocused = new EventEmitter();\n  }\n\n  get selectedTime() {\n    if (!!this.time) {\n      return this.timeList.find(t => t.time === +this.time);\n    }\n  }\n\n  ngOnInit() {\n    if (this.isEditable) {\n      this.timeControl = new FormControl({\n        value: this.formatTimeForUI(this.time),\n        disabled: this.disabled\n      });\n      this.timeControl.valueChanges.pipe(tap(value => {\n        if (value.length > 2) {\n          this.updateInputValue(value.slice(-1));\n        }\n      }), debounceTime(500), distinctUntilChanged(), filter(value => !isTimeDisabledToChange(this.time, value, this.timeList)), tap(value => this.time = this.timeParserPipe.transform(value, this.timeUnit).toString())).subscribe(() => this.updateTime());\n    }\n  }\n\n  saveTimeAndChangeTimeUnit(event, unit) {\n    event.preventDefault();\n    this.previousTime = this.time;\n    this.timeUnitChanged.next(unit);\n    this.focused.next();\n  }\n\n  updateTime() {\n    const time = this.selectedTime;\n\n    if (time) {\n      this.timeChanged.next(time);\n      this.previousTime = time.time;\n\n      if (this.isEditable) {\n        this.updateInputValue(this.formatTimeForUI(time.time));\n      }\n    }\n  }\n\n  onKeydown(e) {\n    if (!isDigit(e)) {\n      e.preventDefault();\n    } else {\n      this.changeTimeByArrow(e.keyCode);\n    }\n  }\n\n  changeTimeByArrow(keyCode) {\n    const ARROW_UP = 38;\n    const ARROW_DOWN = 40;\n    let time;\n\n    if (keyCode === ARROW_UP) {\n      time = String(+this.time + (this.minutesGap || 1));\n    } else if (keyCode === ARROW_DOWN) {\n      time = String(+this.time - (this.minutesGap || 1));\n    }\n\n    if (!isTimeUnavailable(time, this.timeList)) {\n      this.time = time;\n      this.updateTime();\n    }\n  }\n\n  formatTimeForUI(value) {\n    const parsedTime = this.timeParserPipe.transform(value, this.timeUnit).toString();\n    return this.timeLocalizerPipe.transform(parsedTime, this.timeUnit, true);\n  }\n\n  updateInputValue(value) {\n    this.editableTimeTmpl.nativeElement.value = value;\n  }\n\n}\n\nNgxMaterialTimepickerDialControlComponent.ɵfac = function NgxMaterialTimepickerDialControlComponent_Factory(t) {\n  return new (t || NgxMaterialTimepickerDialControlComponent)(i0.ɵɵdirectiveInject(TimeParserPipe), i0.ɵɵdirectiveInject(TimeLocalizerPipe));\n};\n\nNgxMaterialTimepickerDialControlComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMaterialTimepickerDialControlComponent,\n  selectors: [[\"ngx-material-timepicker-dial-control\"]],\n  viewQuery: function NgxMaterialTimepickerDialControlComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c1, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.editableTimeTmpl = _t.first);\n    }\n  },\n  inputs: {\n    timeList: \"timeList\",\n    timeUnit: \"timeUnit\",\n    time: \"time\",\n    isActive: \"isActive\",\n    isEditable: \"isEditable\",\n    minutesGap: \"minutesGap\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    timeUnitChanged: \"timeUnitChanged\",\n    timeChanged: \"timeChanged\",\n    focused: \"focused\",\n    unfocused: \"unfocused\"\n  },\n  features: [i0.ɵɵProvidersFeature([TimeParserPipe, TimeLocalizerPipe])],\n  decls: 3,\n  vars: 2,\n  consts: [[\"class\", \"timepicker-dial__control timepicker-dial__item\", \"readonly\", \"\", 3, \"ngClass\", \"ngModel\", \"disabled\", \"timepickerAutofocus\", \"ngModelChange\", \"input\", \"focus\", 4, \"ngIf\", \"ngIfElse\"], [\"editableTemplate\", \"\"], [\"readonly\", \"\", 1, \"timepicker-dial__control\", \"timepicker-dial__item\", 3, \"ngClass\", \"ngModel\", \"disabled\", \"timepickerAutofocus\", \"ngModelChange\", \"input\", \"focus\"], [1, \"timepicker-dial__control\", \"timepicker-dial__item\", \"timepicker-dial__control_editable\", 3, \"formControl\", \"ngClass\", \"timepickerAutofocus\", \"focus\", \"keydown\"], [\"editableTimeTmpl\", \"\"]],\n  template: function NgxMaterialTimepickerDialControlComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NgxMaterialTimepickerDialControlComponent_input_0_Template, 2, 9, \"input\", 0);\n      i0.ɵɵtemplate(1, NgxMaterialTimepickerDialControlComponent_ng_template_1_Template, 2, 5, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(2);\n\n      i0.ɵɵproperty(\"ngIf\", !ctx.isEditable)(\"ngIfElse\", _r1);\n    }\n  },\n  directives: [i1.NgIf, i4.DefaultValueAccessor, i1.NgClass, i4.NgControlStatus, i4.NgModel, AutofocusDirective, i4.FormControlDirective],\n  pipes: [TimeLocalizerPipe],\n  styles: [\".timepicker-dial__item[_ngcontent-%COMP%]{cursor:pointer;color:#ffffff80;font-family:\\\"Roboto\\\",sans-serif}@supports (font-family: var(--primary-font-family)){.timepicker-dial__item[_ngcontent-%COMP%]{font-family:var(--primary-font-family);color:var(--dial-inactive-color)}}.timepicker-dial__item_active[_ngcontent-%COMP%]{color:#fff}@supports (color: var(--dial-active-color)){.timepicker-dial__item_active[_ngcontent-%COMP%]{color:var(--dial-active-color)}}.timepicker-dial__control[_ngcontent-%COMP%]{border:none;background-color:transparent;font-size:50px;width:60px;padding:0;border-radius:3px;text-align:right}.timepicker-dial__control_editable[_ngcontent-%COMP%]:focus{color:#00bfff;background-color:#fff;outline:deepskyblue}@supports (color: var(--dial-editable-active-color)){.timepicker-dial__control_editable[_ngcontent-%COMP%]:focus{color:var(--dial-editable-active-color)}}@supports (background-color: var(--dial-editable-background-color)){.timepicker-dial__control_editable[_ngcontent-%COMP%]:focus{background-color:var(--dial-editable-background-color)}}@supports (outline: var(--dial-editable-active-color)){.timepicker-dial__control_editable[_ngcontent-%COMP%]:focus{outline:var(--dial-editable-active-color)}}.timepicker-dial__control[_ngcontent-%COMP%]:disabled{cursor:default}.timepicker-dial__control[_ngcontent-%COMP%]:focus-visible{outline:none}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaterialTimepickerDialControlComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-material-timepicker-dial-control',\n      templateUrl: 'ngx-material-timepicker-dial-control.component.html',\n      styleUrls: ['ngx-material-timepicker-dial-control.component.scss'],\n      providers: [TimeParserPipe, TimeLocalizerPipe]\n    }]\n  }], function () {\n    return [{\n      type: TimeParserPipe\n    }, {\n      type: TimeLocalizerPipe\n    }];\n  }, {\n    timeList: [{\n      type: Input\n    }],\n    timeUnit: [{\n      type: Input\n    }],\n    time: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    isEditable: [{\n      type: Input\n    }],\n    minutesGap: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    editableTimeTmpl: [{\n      type: ViewChild,\n      args: ['editableTimeTmpl']\n    }],\n    timeUnitChanged: [{\n      type: Output\n    }],\n    timeChanged: [{\n      type: Output\n    }],\n    focused: [{\n      type: Output\n    }],\n    unfocused: [{\n      type: Output\n    }]\n  });\n})();\n\nfunction isTimeDisabledToChange(currentTime, nextTime, timeList) {\n  const isNumber = /\\d/.test(nextTime);\n\n  if (isNumber) {\n    return isTimeUnavailable(nextTime, timeList);\n  }\n}\n\nfunction isTimeUnavailable(time, timeList) {\n  const selectedTime = timeList.find(value => value.time === +time);\n  return !selectedTime || selectedTime && selectedTime.disabled;\n}\n\nclass NgxMaterialTimepickerPeriodComponent {\n  constructor() {\n    this.timePeriod = TimePeriod;\n    this.isPeriodAvailable = true;\n    this.periodChanged = new EventEmitter();\n  }\n\n  changePeriod(period) {\n    this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\n\n    if (this.isPeriodAvailable) {\n      this.periodChanged.next(period);\n    }\n  }\n\n  animationDone() {\n    this.isPeriodAvailable = true;\n  }\n\n  isSwitchPeriodAvailable(period) {\n    const time = this.getDisabledTimeByPeriod(period);\n    return !time.every(t => t.disabled);\n  }\n\n  getDisabledTimeByPeriod(period) {\n    switch (this.activeTimeUnit) {\n      case TimeUnit.HOUR:\n        return TimepickerTimeUtils.disableHours(this.hours, {\n          min: this.minTime,\n          max: this.maxTime,\n          format: this.format,\n          period\n        });\n\n      case TimeUnit.MINUTE:\n        return TimepickerTimeUtils.disableMinutes(this.minutes, +this.selectedHour, {\n          min: this.minTime,\n          max: this.maxTime,\n          format: this.format,\n          period\n        });\n\n      default:\n        throw new Error('no such TimeUnit');\n    }\n  }\n\n}\n\nNgxMaterialTimepickerPeriodComponent.ɵfac = function NgxMaterialTimepickerPeriodComponent_Factory(t) {\n  return new (t || NgxMaterialTimepickerPeriodComponent)();\n};\n\nNgxMaterialTimepickerPeriodComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMaterialTimepickerPeriodComponent,\n  selectors: [[\"ngx-material-timepicker-period\"]],\n  inputs: {\n    selectedPeriod: \"selectedPeriod\",\n    format: \"format\",\n    activeTimeUnit: \"activeTimeUnit\",\n    hours: \"hours\",\n    minutes: \"minutes\",\n    minTime: \"minTime\",\n    maxTime: \"maxTime\",\n    selectedHour: \"selectedHour\",\n    meridiems: \"meridiems\"\n  },\n  outputs: {\n    periodChanged: \"periodChanged\"\n  },\n  decls: 6,\n  vars: 9,\n  consts: [[1, \"timepicker-period\"], [\"type\", \"button\", 1, \"timepicker-dial__item\", \"timepicker-period__btn\", 3, \"ngClass\", \"click\"], [\"class\", \"timepicker-period__warning\", 4, \"ngIf\"], [1, \"timepicker-period__warning\"]],\n  template: function NgxMaterialTimepickerPeriodComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function NgxMaterialTimepickerPeriodComponent_Template_button_click_1_listener() {\n        return ctx.changePeriod(ctx.timePeriod.AM);\n      });\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function NgxMaterialTimepickerPeriodComponent_Template_button_click_3_listener() {\n        return ctx.changePeriod(ctx.timePeriod.PM);\n      });\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, NgxMaterialTimepickerPeriodComponent_div_5_Template, 3, 1, \"div\", 2);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c2, ctx.selectedPeriod === ctx.timePeriod.AM));\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.meridiems[0]);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c2, ctx.selectedPeriod === ctx.timePeriod.PM));\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.meridiems[1]);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isPeriodAvailable);\n    }\n  },\n  directives: [i1.NgClass, i1.NgIf],\n  styles: [\".timepicker-dial__item[_ngcontent-%COMP%]{cursor:pointer;color:#ffffff80;font-family:\\\"Roboto\\\",sans-serif}@supports (font-family: var(--primary-font-family)){.timepicker-dial__item[_ngcontent-%COMP%]{font-family:var(--primary-font-family);color:var(--dial-inactive-color)}}.timepicker-dial__item_active[_ngcontent-%COMP%]{color:#fff}@supports (color: var(--dial-active-color)){.timepicker-dial__item_active[_ngcontent-%COMP%]{color:var(--dial-active-color)}}.timepicker-period[_ngcontent-%COMP%]{display:flex;flex-direction:column;position:relative}.timepicker-period__btn[_ngcontent-%COMP%]{padding:1px 3px;border:0;background-color:transparent;font-size:18px;font-weight:500;-webkit-user-select:none;-moz-user-select:none;user-select:none;outline:none;border-radius:3px;transition:background-color .5s;font-family:\\\"Roboto\\\",sans-serif}@supports (font-family: var(--primary-font-family)){.timepicker-period__btn[_ngcontent-%COMP%]{font-family:var(--primary-font-family)}}.timepicker-period__btn[_ngcontent-%COMP%]:focus{background-color:#00000012}.timepicker-period__warning[_ngcontent-%COMP%]{padding:5px 10px;border-radius:3px;background-color:#0000008c;color:#fff;position:absolute;width:200px;left:-20px;top:40px}.timepicker-period__warning[_ngcontent-%COMP%] > p[_ngcontent-%COMP%]{margin:0;font-size:12px;font-family:\\\"Roboto\\\",sans-serif}@supports (font-family: var(--primary-font-family)){.timepicker-period__warning[_ngcontent-%COMP%] > p[_ngcontent-%COMP%]{font-family:var(--primary-font-family)}}\"],\n  data: {\n    animation: [trigger('scaleInOut', [transition(':enter', [style({\n      transform: 'scale(0)'\n    }), animate('.2s', style({\n      transform: 'scale(1)'\n    })), sequence([animate('3s', style({\n      opacity: 1\n    })), animate('.3s', style({\n      opacity: 0\n    }))])])])]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaterialTimepickerPeriodComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-material-timepicker-period',\n      templateUrl: 'ngx-material-timepicker-period.component.html',\n      styleUrls: ['ngx-material-timepicker-period.component.scss'],\n      animations: [trigger('scaleInOut', [transition(':enter', [style({\n        transform: 'scale(0)'\n      }), animate('.2s', style({\n        transform: 'scale(1)'\n      })), sequence([animate('3s', style({\n        opacity: 1\n      })), animate('.3s', style({\n        opacity: 0\n      }))])])])]\n    }]\n  }], null, {\n    selectedPeriod: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    activeTimeUnit: [{\n      type: Input\n    }],\n    hours: [{\n      type: Input\n    }],\n    minutes: [{\n      type: Input\n    }],\n    minTime: [{\n      type: Input\n    }],\n    maxTime: [{\n      type: Input\n    }],\n    selectedHour: [{\n      type: Input\n    }],\n    meridiems: [{\n      type: Input\n    }],\n    periodChanged: [{\n      type: Output\n    }]\n  });\n})();\n\nclass NgxMaterialTimepickerDialComponent {\n  constructor(locale) {\n    this.locale = locale;\n    this.timeUnit = TimeUnit;\n    this.meridiems = Info.meridiems({\n      locale: this.locale\n    });\n    this.periodChanged = new EventEmitter();\n    this.timeUnitChanged = new EventEmitter();\n    this.hourChanged = new EventEmitter();\n    this.minuteChanged = new EventEmitter();\n  }\n\n  ngOnChanges(changes) {\n    if (changes['period'] && changes['period'].currentValue || changes['format'] && changes['format'].currentValue) {\n      const hours = TimepickerTimeUtils.getHours(this.format);\n      this.hours = TimepickerTimeUtils.disableHours(hours, {\n        min: this.minTime,\n        max: this.maxTime,\n        format: this.format,\n        period: this.period\n      });\n    }\n\n    if (changes['period'] && changes['period'].currentValue || changes['hour'] && changes['hour'].currentValue) {\n      const minutes = TimepickerTimeUtils.getMinutes(this.minutesGap);\n      this.minutes = TimepickerTimeUtils.disableMinutes(minutes, +this.hour, {\n        min: this.minTime,\n        max: this.maxTime,\n        format: this.format,\n        period: this.period\n      });\n    }\n  }\n\n  changeTimeUnit(unit) {\n    this.timeUnitChanged.next(unit);\n  }\n\n  changePeriod(period) {\n    this.periodChanged.next(period);\n  }\n\n  changeHour(hour) {\n    this.hourChanged.next(hour);\n\n    if (this.isEditable) {\n      this.changeTimeUnit(TimeUnit.MINUTE);\n    }\n  }\n\n  changeMinute(minute) {\n    this.minuteChanged.next(minute);\n  }\n\n  showHint() {\n    this.isHintVisible = true;\n  }\n\n  hideHint() {\n    this.isHintVisible = false;\n  }\n\n}\n\nNgxMaterialTimepickerDialComponent.ɵfac = function NgxMaterialTimepickerDialComponent_Factory(t) {\n  return new (t || NgxMaterialTimepickerDialComponent)(i0.ɵɵdirectiveInject(TIME_LOCALE));\n};\n\nNgxMaterialTimepickerDialComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMaterialTimepickerDialComponent,\n  selectors: [[\"ngx-material-timepicker-dial\"]],\n  inputs: {\n    editableHintTmpl: \"editableHintTmpl\",\n    hour: \"hour\",\n    minute: \"minute\",\n    format: \"format\",\n    period: \"period\",\n    activeTimeUnit: \"activeTimeUnit\",\n    minTime: \"minTime\",\n    maxTime: \"maxTime\",\n    isEditable: \"isEditable\",\n    minutesGap: \"minutesGap\",\n    hoursOnly: \"hoursOnly\"\n  },\n  outputs: {\n    periodChanged: \"periodChanged\",\n    timeUnitChanged: \"timeUnitChanged\",\n    hourChanged: \"hourChanged\",\n    minuteChanged: \"minuteChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 9,\n  vars: 25,\n  consts: [[1, \"timepicker-dial\"], [1, \"timepicker-dial__container\"], [1, \"timepicker-dial__time\"], [3, \"timeList\", \"time\", \"timeUnit\", \"isActive\", \"isEditable\", \"timeUnitChanged\", \"timeChanged\", \"focused\", \"unfocused\"], [3, \"timeList\", \"time\", \"timeUnit\", \"isActive\", \"isEditable\", \"minutesGap\", \"disabled\", \"timeUnitChanged\", \"timeChanged\", \"focused\", \"unfocused\"], [1, \"timepicker-dial__period\", 3, \"ngClass\", \"selectedPeriod\", \"activeTimeUnit\", \"maxTime\", \"minTime\", \"format\", \"hours\", \"minutes\", \"selectedHour\", \"meridiems\", \"periodChanged\"], [3, \"ngClass\", 4, \"ngIf\"], [3, \"ngClass\"], [4, \"ngTemplateOutlet\"], [\"editableHintDefault\", \"\"], [1, \"timepicker-dial__hint\"]],\n  template: function NgxMaterialTimepickerDialComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵelementStart(3, \"ngx-material-timepicker-dial-control\", 3);\n      i0.ɵɵlistener(\"timeUnitChanged\", function NgxMaterialTimepickerDialComponent_Template_ngx_material_timepicker_dial_control_timeUnitChanged_3_listener($event) {\n        return ctx.changeTimeUnit($event);\n      })(\"timeChanged\", function NgxMaterialTimepickerDialComponent_Template_ngx_material_timepicker_dial_control_timeChanged_3_listener($event) {\n        return ctx.changeHour($event);\n      })(\"focused\", function NgxMaterialTimepickerDialComponent_Template_ngx_material_timepicker_dial_control_focused_3_listener() {\n        return ctx.showHint();\n      })(\"unfocused\", function NgxMaterialTimepickerDialComponent_Template_ngx_material_timepicker_dial_control_unfocused_3_listener() {\n        return ctx.hideHint();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"span\");\n      i0.ɵɵtext(5, \":\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"ngx-material-timepicker-dial-control\", 4);\n      i0.ɵɵlistener(\"timeUnitChanged\", function NgxMaterialTimepickerDialComponent_Template_ngx_material_timepicker_dial_control_timeUnitChanged_6_listener($event) {\n        return ctx.changeTimeUnit($event);\n      })(\"timeChanged\", function NgxMaterialTimepickerDialComponent_Template_ngx_material_timepicker_dial_control_timeChanged_6_listener($event) {\n        return ctx.changeMinute($event);\n      })(\"focused\", function NgxMaterialTimepickerDialComponent_Template_ngx_material_timepicker_dial_control_focused_6_listener() {\n        return ctx.showHint();\n      })(\"unfocused\", function NgxMaterialTimepickerDialComponent_Template_ngx_material_timepicker_dial_control_unfocused_6_listener() {\n        return ctx.hideHint();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"ngx-material-timepicker-period\", 5);\n      i0.ɵɵlistener(\"periodChanged\", function NgxMaterialTimepickerDialComponent_Template_ngx_material_timepicker_period_periodChanged_7_listener($event) {\n        return ctx.changePeriod($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, NgxMaterialTimepickerDialComponent_div_8_Template, 4, 4, \"div\", 6);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"timeList\", ctx.hours)(\"time\", ctx.hour)(\"timeUnit\", ctx.timeUnit.HOUR)(\"isActive\", ctx.activeTimeUnit === ctx.timeUnit.HOUR)(\"isEditable\", ctx.isEditable);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"timeList\", ctx.minutes)(\"time\", ctx.minute)(\"timeUnit\", ctx.timeUnit.MINUTE)(\"isActive\", ctx.activeTimeUnit === ctx.timeUnit.MINUTE)(\"isEditable\", ctx.isEditable)(\"minutesGap\", ctx.minutesGap)(\"disabled\", ctx.hoursOnly);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(23, _c4, ctx.format === 24))(\"selectedPeriod\", ctx.period)(\"activeTimeUnit\", ctx.activeTimeUnit)(\"maxTime\", ctx.maxTime)(\"minTime\", ctx.minTime)(\"format\", ctx.format)(\"hours\", ctx.hours)(\"minutes\", ctx.minutes)(\"selectedHour\", ctx.hour)(\"meridiems\", ctx.meridiems);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isEditable || ctx.editableHintTmpl);\n    }\n  },\n  directives: [NgxMaterialTimepickerDialControlComponent, NgxMaterialTimepickerPeriodComponent, i1.NgClass, i1.NgIf, i1.NgTemplateOutlet],\n  styles: [\".timepicker-dial[_ngcontent-%COMP%]{text-align:right}.timepicker-dial__container[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:flex-end;-webkit-tap-highlight-color:rgba(0,0,0,0)}.timepicker-dial__time[_ngcontent-%COMP%]{display:flex;align-items:baseline;line-height:normal;font-size:50px;color:#ffffff80;font-family:\\\"Roboto\\\",sans-serif}@supports (font-family: var(--primary-font-family)){.timepicker-dial__time[_ngcontent-%COMP%]{font-family:var(--primary-font-family);color:var(--dial-inactive-color)}}.timepicker-dial__period[_ngcontent-%COMP%]{display:block;margin-left:10px}.timepicker-dial__period--hidden[_ngcontent-%COMP%]{visibility:hidden}.timepicker-dial__hint-container--hidden[_ngcontent-%COMP%]{visibility:hidden}.timepicker-dial__hint[_ngcontent-%COMP%]{display:inline-block;font-size:10px;color:#fff}@supports (color: var(--dial-active-color)){.timepicker-dial__hint[_ngcontent-%COMP%]{color:var(--dial-active-color)}}.timepicker-dial__hint[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{font-size:14px}@media (max-device-width: 1023px) and (orientation: landscape){.timepicker-dial__container[_ngcontent-%COMP%]{flex-direction:column}.timepicker-dial__period[_ngcontent-%COMP%]{margin-left:0}}\"],\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaterialTimepickerDialComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-material-timepicker-dial',\n      templateUrl: 'ngx-material-timepicker-dial.component.html',\n      styleUrls: ['ngx-material-timepicker-dial.component.scss'],\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [TIME_LOCALE]\n      }]\n    }];\n  }, {\n    editableHintTmpl: [{\n      type: Input\n    }],\n    hour: [{\n      type: Input\n    }],\n    minute: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    period: [{\n      type: Input\n    }],\n    activeTimeUnit: [{\n      type: Input\n    }],\n    minTime: [{\n      type: Input\n    }],\n    maxTime: [{\n      type: Input\n    }],\n    isEditable: [{\n      type: Input\n    }],\n    minutesGap: [{\n      type: Input\n    }],\n    hoursOnly: [{\n      type: Input\n    }],\n    periodChanged: [{\n      type: Output\n    }],\n    timeUnitChanged: [{\n      type: Output\n    }],\n    hourChanged: [{\n      type: Output\n    }],\n    minuteChanged: [{\n      type: Output\n    }]\n  });\n})();\n\nclass NgxMaterialTimepickerHoursFace {\n  constructor(format) {\n    this.hourChange = new EventEmitter();\n    this.hourSelected = new EventEmitter();\n    this.hoursList = [];\n    this.hoursList = TimepickerTimeUtils.getHours(format);\n  }\n\n  onTimeSelected(time) {\n    this.hourSelected.next(time);\n  }\n\n}\n\nNgxMaterialTimepickerHoursFace.ɵfac = function NgxMaterialTimepickerHoursFace_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\n\nNgxMaterialTimepickerHoursFace.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxMaterialTimepickerHoursFace,\n  inputs: {\n    selectedHour: \"selectedHour\",\n    minTime: \"minTime\",\n    maxTime: \"maxTime\",\n    format: \"format\"\n  },\n  outputs: {\n    hourChange: \"hourChange\",\n    hourSelected: \"hourSelected\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaterialTimepickerHoursFace, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: undefined\n    }];\n  }, {\n    selectedHour: [{\n      type: Input\n    }],\n    minTime: [{\n      type: Input\n    }],\n    maxTime: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    hourChange: [{\n      type: Output\n    }],\n    hourSelected: [{\n      type: Output\n    }]\n  });\n})();\n\nclass ActiveHourPipe {\n  transform(hour, currentHour, isClockFaceDisabled) {\n    if (hour == null || isClockFaceDisabled) {\n      return false;\n    }\n\n    return hour === currentHour;\n  }\n\n}\n\nActiveHourPipe.ɵfac = function ActiveHourPipe_Factory(t) {\n  return new (t || ActiveHourPipe)();\n};\n\nActiveHourPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"activeHour\",\n  type: ActiveHourPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ActiveHourPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'activeHour'\n    }]\n  }], null, null);\n})();\n\nclass ActiveMinutePipe {\n  transform(minute, currentMinute, gap, isClockFaceDisabled) {\n    if (minute == null || isClockFaceDisabled) {\n      return false;\n    }\n\n    const defaultGap = 5;\n    return currentMinute === minute && minute % (gap || defaultGap) === 0;\n  }\n\n}\n\nActiveMinutePipe.ɵfac = function ActiveMinutePipe_Factory(t) {\n  return new (t || ActiveMinutePipe)();\n};\n\nActiveMinutePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"activeMinute\",\n  type: ActiveMinutePipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ActiveMinutePipe, [{\n    type: Pipe,\n    args: [{\n      name: 'activeMinute'\n    }]\n  }], null, null);\n})();\n\nclass MinutesFormatterPipe {\n  transform(minute, gap = 5) {\n    if (!minute) {\n      return minute;\n    }\n\n    return minute % gap === 0 ? minute : '';\n  }\n\n}\n\nMinutesFormatterPipe.ɵfac = function MinutesFormatterPipe_Factory(t) {\n  return new (t || MinutesFormatterPipe)();\n};\n\nMinutesFormatterPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"minutesFormatter\",\n  type: MinutesFormatterPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MinutesFormatterPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'minutesFormatter'\n    }]\n  }], null, null);\n})();\n\nconst CLOCK_HAND_STYLES = {\n  small: {\n    height: '75px',\n    top: 'calc(50% - 75px)'\n  },\n  large: {\n    height: '103px',\n    top: 'calc(50% - 103px)'\n  }\n};\n\nclass NgxMaterialTimepickerFaceComponent {\n  constructor() {\n    this.timeUnit = TimeUnit;\n    this.innerClockFaceSize = 85;\n    this.timeChange = new EventEmitter();\n    this.timeSelected = new EventEmitter();\n  }\n\n  ngAfterViewInit() {\n    this.setClockHandPosition();\n    this.addTouchEvents();\n  }\n\n  ngOnChanges(changes) {\n    const faceTimeChanges = changes['faceTime'];\n    const selectedTimeChanges = changes['selectedTime'];\n\n    if (faceTimeChanges && faceTimeChanges.currentValue && selectedTimeChanges && selectedTimeChanges.currentValue) {\n      /* Set time according to passed an input value */\n      this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\n    }\n\n    if (selectedTimeChanges && selectedTimeChanges.currentValue) {\n      this.setClockHandPosition();\n    }\n\n    if (faceTimeChanges && faceTimeChanges.currentValue) {\n      // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\n      setTimeout(() => this.selectAvailableTime());\n    }\n  }\n\n  trackByTime(_, time) {\n    return time.time;\n  }\n\n  onMousedown(e) {\n    e.preventDefault();\n    this.isStarted = true;\n  }\n\n  selectTime(e) {\n    if (!this.isStarted && e instanceof MouseEvent && e.type !== 'click') {\n      return;\n    }\n\n    const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\n    /* Get x0 and y0 of the circle */\n\n    const centerX = clockFaceCords.left + clockFaceCords.width / 2;\n    const centerY = clockFaceCords.top + clockFaceCords.height / 2;\n    /* Counting the arctangent and convert it to from radian to deg */\n\n    const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\n    /* Get angle according to quadrant */\n\n    const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\n    /* Check if selected time from the inner clock face (24 hours format only) */\n\n    const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\n    /* Round angle according to angle step */\n\n    const angleStep = this.unit === TimeUnit.MINUTE ? 6 * (this.minutesGap || 1) : 30;\n    const roundedAngle = roundAngle(circleAngle, angleStep);\n    const angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);\n    const selectedTime = this.faceTime.find(val => val.angle === angle);\n\n    if (selectedTime && !selectedTime.disabled) {\n      this.timeChange.next(selectedTime);\n      /* To let know whether user ended interaction with clock face */\n\n      if (!this.isStarted) {\n        this.timeSelected.next(selectedTime.time);\n      }\n    }\n  }\n\n  onMouseup(e) {\n    e.preventDefault();\n    this.isStarted = false;\n  }\n\n  ngOnDestroy() {\n    this.removeTouchEvents();\n  }\n\n  addTouchEvents() {\n    this.touchStartHandler = this.onMousedown.bind(this);\n    this.touchEndHandler = this.onMouseup.bind(this);\n    this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\n    this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\n  }\n\n  removeTouchEvents() {\n    this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\n    this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\n  }\n\n  setClockHandPosition() {\n    if (this.format === 24) {\n      if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\n        this.decreaseClockHand();\n      } else {\n        this.increaseClockHand();\n      }\n    }\n\n    this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\n  }\n\n  selectAvailableTime() {\n    const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\n    this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\n\n    if (currentTime && currentTime.disabled && !this.isClockFaceDisabled) {\n      const availableTime = this.faceTime.find(time => !time.disabled);\n      this.timeChange.next(availableTime);\n    }\n  }\n\n  isInnerClockFace(x0, y0, x, y) {\n    /* Detect whether time from the inner clock face or not (24 format only) */\n    return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\n  }\n\n  decreaseClockHand() {\n    this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\n    this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\n  }\n\n  increaseClockHand() {\n    this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\n    this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\n  }\n\n}\n\nNgxMaterialTimepickerFaceComponent.ɵfac = function NgxMaterialTimepickerFaceComponent_Factory(t) {\n  return new (t || NgxMaterialTimepickerFaceComponent)();\n};\n\nNgxMaterialTimepickerFaceComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMaterialTimepickerFaceComponent,\n  selectors: [[\"ngx-material-timepicker-face\"]],\n  viewQuery: function NgxMaterialTimepickerFaceComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c5, 7);\n      i0.ɵɵviewQuery(_c6, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clockFace = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clockHand = _t.first);\n    }\n  },\n  hostBindings: function NgxMaterialTimepickerFaceComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mousedown\", function NgxMaterialTimepickerFaceComponent_mousedown_HostBindingHandler($event) {\n        return ctx.onMousedown($event);\n      })(\"click\", function NgxMaterialTimepickerFaceComponent_click_HostBindingHandler($event) {\n        return ctx.selectTime($event);\n      })(\"touchmove\", function NgxMaterialTimepickerFaceComponent_touchmove_HostBindingHandler($event) {\n        return ctx.selectTime($event.changedTouches[0]);\n      })(\"touchend\", function NgxMaterialTimepickerFaceComponent_touchend_HostBindingHandler($event) {\n        return ctx.selectTime($event.changedTouches[0]);\n      })(\"mousemove\", function NgxMaterialTimepickerFaceComponent_mousemove_HostBindingHandler($event) {\n        return ctx.selectTime($event);\n      })(\"mouseup\", function NgxMaterialTimepickerFaceComponent_mouseup_HostBindingHandler($event) {\n        return ctx.onMouseup($event);\n      });\n    }\n  },\n  inputs: {\n    faceTime: \"faceTime\",\n    selectedTime: \"selectedTime\",\n    unit: \"unit\",\n    format: \"format\",\n    minutesGap: \"minutesGap\"\n  },\n  outputs: {\n    timeChange: \"timeChange\",\n    timeSelected: \"timeSelected\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 7,\n  vars: 6,\n  consts: [[1, \"clock-face\"], [\"clockFace\", \"\"], [\"class\", \"clock-face__container\", 4, \"ngIf\", \"ngIfElse\"], [1, \"clock-face__clock-hand\", 3, \"ngClass\", \"hidden\"], [\"clockHand\", \"\"], [\"minutesFace\", \"\"], [1, \"clock-face__container\"], [\"class\", \"clock-face__number clock-face__number--outer\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"class\", \"clock-face__inner\", 3, \"top\", 4, \"ngIf\"], [1, \"clock-face__number\", \"clock-face__number--outer\", 3, \"ngStyle\"], [3, \"ngStyle\", \"ngClass\"], [1, \"clock-face__inner\"], [\"class\", \"clock-face__number clock-face__number--inner\", 3, \"ngStyle\", \"height\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"clock-face__number\", \"clock-face__number--inner\", 3, \"ngStyle\"]],\n  template: function NgxMaterialTimepickerFaceComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵtemplate(2, NgxMaterialTimepickerFaceComponent_div_2_Template, 4, 7, \"div\", 2);\n      i0.ɵɵelement(3, \"span\", 3, 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, NgxMaterialTimepickerFaceComponent_ng_template_5_Template, 2, 2, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      const _r3 = i0.ɵɵreference(6);\n\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.unit !== ctx.timeUnit.MINUTE)(\"ngIfElse\", _r3);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c9, ctx.unit === ctx.timeUnit.MINUTE))(\"hidden\", ctx.isClockFaceDisabled);\n    }\n  },\n  directives: [i1.NgIf, i1.NgClass, i1.NgForOf, i1.NgStyle],\n  pipes: [i1.SlicePipe, ActiveHourPipe, TimeLocalizerPipe, ActiveMinutePipe, MinutesFormatterPipe],\n  styles: [\".clock-face[_ngcontent-%COMP%]{width:290px;height:290px;border-radius:50%;position:relative;display:flex;justify-content:center;padding:20px;box-sizing:border-box;background-color:#f0f0f0}@supports (background-color: var(--clock-face-background-color)){.clock-face[_ngcontent-%COMP%]{background-color:var(--clock-face-background-color)}}.clock-face__inner[_ngcontent-%COMP%]{position:absolute}.clock-face__container[_ngcontent-%COMP%]{margin-left:-2px}.clock-face__number[_ngcontent-%COMP%]{position:absolute;transform-origin:0 100%;width:50px;text-align:center;z-index:2}.clock-face__number--outer[_ngcontent-%COMP%]{height:calc(290px / 2 - 20px)}.clock-face__number--outer[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{font-size:16px;color:#6c6c6c}@supports (color: var(--clock-face-time-inactive-color)){.clock-face__number--outer[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{color:var(--clock-face-time-inactive-color)}}.clock-face__number--inner[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{font-size:14px;color:#929292}@supports (color: var(--clock-face-inner-time-inactive-color)){.clock-face__number--inner[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{color:var(--clock-face-inner-time-inactive-color)}}.clock-face__number[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{-webkit-user-select:none;-moz-user-select:none;user-select:none;width:30px;height:30px;display:flex;justify-content:center;align-items:center;margin:auto;border-radius:50%;font-weight:500;font-family:\\\"Roboto\\\",sans-serif}@supports (font-family: var(--primary-font-family)){.clock-face__number[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{font-family:var(--primary-font-family)}}.clock-face__number[_ngcontent-%COMP%] > span.active[_ngcontent-%COMP%]{background-color:#00bfff;color:#fff}@supports (background-color: var(--clock-hand-color)){.clock-face__number[_ngcontent-%COMP%] > span.active[_ngcontent-%COMP%]{background-color:var(--clock-hand-color);color:var(--clock-face-time-active-color)}}.clock-face__number[_ngcontent-%COMP%] > span.disabled[_ngcontent-%COMP%]{color:#c5c5c5}@supports (color: var(--clock-face-time-disabled-color)){.clock-face__number[_ngcontent-%COMP%] > span.disabled[_ngcontent-%COMP%]{color:var(--clock-face-time-disabled-color)}}.clock-face__clock-hand[_ngcontent-%COMP%]{height:103px;width:2px;transform-origin:0 100%;position:absolute;top:calc(50% - 103px);z-index:1;background-color:#00bfff}@supports (background-color: var(--clock-hand-color)){.clock-face__clock-hand[_ngcontent-%COMP%]{background-color:var(--clock-hand-color)}}.clock-face__clock-hand[_ngcontent-%COMP%]:after{content:\\\"\\\";width:7px;height:7px;border-radius:50%;background-color:inherit;position:absolute;bottom:-3px;left:-3.5px}.clock-face__clock-hand_minute[_ngcontent-%COMP%]:before{content:\\\"\\\";width:7px;height:7px;background-color:#fff;border-radius:50%;position:absolute;top:-8px;left:calc(50% - 8px);box-sizing:content-box;border-width:4px;border-style:solid;border-color:#00bfff}@supports (border-color: var(--clock-hand-color)){.clock-face__clock-hand_minute[_ngcontent-%COMP%]:before{border-color:var(--clock-hand-color)}}@media (max-device-width: 1023px) and (orientation: landscape){.clock-face[_ngcontent-%COMP%]{width:225px;height:225px;padding:5px}.clock-face__number--outer[_ngcontent-%COMP%]{height:calc(225px / 2 - 5px)}.clock-face__clock-hand_minute[_ngcontent-%COMP%]:before{top:0}}\"],\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaterialTimepickerFaceComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-material-timepicker-face',\n      templateUrl: './ngx-material-timepicker-face.component.html',\n      styleUrls: ['./ngx-material-timepicker-face.component.scss'],\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    faceTime: [{\n      type: Input\n    }],\n    selectedTime: [{\n      type: Input\n    }],\n    unit: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    minutesGap: [{\n      type: Input\n    }],\n    timeChange: [{\n      type: Output\n    }],\n    timeSelected: [{\n      type: Output\n    }],\n    clockFace: [{\n      type: ViewChild,\n      args: ['clockFace', {\n        static: true\n      }]\n    }],\n    clockHand: [{\n      type: ViewChild,\n      args: ['clockHand', {\n        static: true\n      }]\n    }],\n    onMousedown: [{\n      type: HostListener,\n      args: ['mousedown', ['$event']]\n    }],\n    selectTime: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }, {\n      type: HostListener,\n      args: ['touchmove', ['$event.changedTouches[0]']]\n    }, {\n      type: HostListener,\n      args: ['touchend', ['$event.changedTouches[0]']]\n    }, {\n      type: HostListener,\n      args: ['mousemove', ['$event']]\n    }],\n    onMouseup: [{\n      type: HostListener,\n      args: ['mouseup', ['$event']]\n    }]\n  });\n})();\n\nfunction roundAngle(angle, step) {\n  return Math.round(angle / step) * step;\n}\n\nfunction countAngleByCords(x0, y0, x, y, currentAngle) {\n  if (y > y0 && x >= x0) {\n    // II quarter\n    return 180 - currentAngle;\n  } else if (y > y0 && x < x0) {\n    // III quarter\n    return 180 + currentAngle;\n  } else if (y < y0 && x < x0) {\n    // IV quarter\n    return 360 - currentAngle;\n  } else {\n    // I quarter\n    return currentAngle;\n  }\n}\n\nclass NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace {\n  constructor() {\n    super(24);\n  }\n\n  ngAfterContentInit() {\n    this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\n      min: this.minTime,\n      max: this.maxTime,\n      format: this.format\n    });\n  }\n\n}\n\nNgxMaterialTimepicker24HoursFaceComponent.ɵfac = function NgxMaterialTimepicker24HoursFaceComponent_Factory(t) {\n  return new (t || NgxMaterialTimepicker24HoursFaceComponent)();\n};\n\nNgxMaterialTimepicker24HoursFaceComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMaterialTimepicker24HoursFaceComponent,\n  selectors: [[\"ngx-material-timepicker-24-hours-face\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 3,\n  consts: [[3, \"selectedTime\", \"faceTime\", \"format\", \"timeChange\", \"timeSelected\"]],\n  template: function NgxMaterialTimepicker24HoursFaceComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-material-timepicker-face\", 0);\n      i0.ɵɵlistener(\"timeChange\", function NgxMaterialTimepicker24HoursFaceComponent_Template_ngx_material_timepicker_face_timeChange_0_listener($event) {\n        return ctx.hourChange.next($event);\n      })(\"timeSelected\", function NgxMaterialTimepicker24HoursFaceComponent_Template_ngx_material_timepicker_face_timeSelected_0_listener($event) {\n        return ctx.onTimeSelected($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"selectedTime\", ctx.selectedHour)(\"faceTime\", ctx.hoursList)(\"format\", ctx.format);\n    }\n  },\n  directives: [NgxMaterialTimepickerFaceComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaterialTimepicker24HoursFaceComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-material-timepicker-24-hours-face',\n      templateUrl: 'ngx-material-timepicker-24-hours-face.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nclass NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace {\n  constructor() {\n    super(12);\n  }\n\n  ngOnChanges(changes) {\n    if (changes['period'] && changes['period'].currentValue) {\n      this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\n        min: this.minTime,\n        max: this.maxTime,\n        format: this.format,\n        period: this.period\n      });\n    }\n  }\n\n}\n\nNgxMaterialTimepicker12HoursFaceComponent.ɵfac = function NgxMaterialTimepicker12HoursFaceComponent_Factory(t) {\n  return new (t || NgxMaterialTimepicker12HoursFaceComponent)();\n};\n\nNgxMaterialTimepicker12HoursFaceComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMaterialTimepicker12HoursFaceComponent,\n  selectors: [[\"ngx-material-timepicker-12-hours-face\"]],\n  inputs: {\n    period: \"period\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 2,\n  consts: [[3, \"selectedTime\", \"faceTime\", \"timeChange\", \"timeSelected\"]],\n  template: function NgxMaterialTimepicker12HoursFaceComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-material-timepicker-face\", 0);\n      i0.ɵɵlistener(\"timeChange\", function NgxMaterialTimepicker12HoursFaceComponent_Template_ngx_material_timepicker_face_timeChange_0_listener($event) {\n        return ctx.hourChange.next($event);\n      })(\"timeSelected\", function NgxMaterialTimepicker12HoursFaceComponent_Template_ngx_material_timepicker_face_timeSelected_0_listener($event) {\n        return ctx.onTimeSelected($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"selectedTime\", ctx.selectedHour)(\"faceTime\", ctx.hoursList);\n    }\n  },\n  directives: [NgxMaterialTimepickerFaceComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaterialTimepicker12HoursFaceComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-material-timepicker-12-hours-face',\n      templateUrl: 'ngx-material-timepicker-12-hours-face.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    period: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NgxMaterialTimepickerMinutesFaceComponent {\n  constructor() {\n    this.minutesList = [];\n    this.timeUnit = TimeUnit;\n    this.minuteChange = new EventEmitter();\n  }\n\n  ngOnChanges(changes) {\n    if (changes['period'] && changes['period'].currentValue) {\n      const minutes = TimepickerTimeUtils.getMinutes(this.minutesGap);\n      this.minutesList = TimepickerTimeUtils.disableMinutes(minutes, this.selectedHour, {\n        min: this.minTime,\n        max: this.maxTime,\n        format: this.format,\n        period: this.period\n      });\n    }\n  }\n\n}\n\nNgxMaterialTimepickerMinutesFaceComponent.ɵfac = function NgxMaterialTimepickerMinutesFaceComponent_Factory(t) {\n  return new (t || NgxMaterialTimepickerMinutesFaceComponent)();\n};\n\nNgxMaterialTimepickerMinutesFaceComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMaterialTimepickerMinutesFaceComponent,\n  selectors: [[\"ngx-material-timepicker-minutes-face\"]],\n  inputs: {\n    selectedMinute: \"selectedMinute\",\n    selectedHour: \"selectedHour\",\n    period: \"period\",\n    minTime: \"minTime\",\n    maxTime: \"maxTime\",\n    format: \"format\",\n    minutesGap: \"minutesGap\"\n  },\n  outputs: {\n    minuteChange: \"minuteChange\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 4,\n  consts: [[3, \"faceTime\", \"selectedTime\", \"minutesGap\", \"unit\", \"timeChange\"]],\n  template: function NgxMaterialTimepickerMinutesFaceComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-material-timepicker-face\", 0);\n      i0.ɵɵlistener(\"timeChange\", function NgxMaterialTimepickerMinutesFaceComponent_Template_ngx_material_timepicker_face_timeChange_0_listener($event) {\n        return ctx.minuteChange.next($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"faceTime\", ctx.minutesList)(\"selectedTime\", ctx.selectedMinute)(\"minutesGap\", ctx.minutesGap)(\"unit\", ctx.timeUnit.MINUTE);\n    }\n  },\n  directives: [NgxMaterialTimepickerFaceComponent],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaterialTimepickerMinutesFaceComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-material-timepicker-minutes-face',\n      templateUrl: './ngx-material-timepicker-minutes-face.component.html'\n    }]\n  }], null, {\n    selectedMinute: [{\n      type: Input\n    }],\n    selectedHour: [{\n      type: Input\n    }],\n    period: [{\n      type: Input\n    }],\n    minTime: [{\n      type: Input\n    }],\n    maxTime: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    minutesGap: [{\n      type: Input\n    }],\n    minuteChange: [{\n      type: Output\n    }]\n  });\n})();\n\nclass NgxMaterialTimepickerButtonComponent {}\n\nNgxMaterialTimepickerButtonComponent.ɵfac = function NgxMaterialTimepickerButtonComponent_Factory(t) {\n  return new (t || NgxMaterialTimepickerButtonComponent)();\n};\n\nNgxMaterialTimepickerButtonComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMaterialTimepickerButtonComponent,\n  selectors: [[\"ngx-material-timepicker-button\"]],\n  ngContentSelectors: _c0,\n  decls: 3,\n  vars: 0,\n  consts: [[\"type\", \"button\", 1, \"timepicker-button\"]],\n  template: function NgxMaterialTimepickerButtonComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵelementStart(1, \"span\");\n      i0.ɵɵprojection(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".timepicker-button[_ngcontent-%COMP%]{display:inline-block;height:36px;min-width:88px;line-height:36px;border:12px;border-radius:2px;background-color:transparent;text-align:center;transition:all .45s cubic-bezier(.23,1,.32,1);overflow:hidden;-webkit-user-select:none;-moz-user-select:none;user-select:none;position:relative;cursor:pointer;outline:none;color:#00bfff}@supports (color: var(--button-color)){.timepicker-button[_ngcontent-%COMP%]{color:var(--button-color)}}.timepicker-button[_ngcontent-%COMP%]:hover, .timepicker-button[_ngcontent-%COMP%]:focus{background-color:#9993}.timepicker-button[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{font-size:14px;text-transform:uppercase;font-weight:600;padding-left:16px;padding-right:16px;font-family:\\\"Roboto\\\",sans-serif}@supports (font-family: var(--primary-font-family)){.timepicker-button[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{font-family:var(--primary-font-family)}}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaterialTimepickerButtonComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-material-timepicker-button',\n      templateUrl: './ngx-material-timepicker-button.component.html',\n      styleUrls: ['./ngx-material-timepicker-button.component.scss']\n    }]\n  }], null, null);\n})();\n\nclass OverlayDirective {\n  constructor(eventService) {\n    this.eventService = eventService;\n  }\n\n  onClick(e) {\n    if (!this.preventClick) {\n      this.eventService.dispatchEvent(e);\n    }\n\n    e.preventDefault();\n  }\n\n}\n\nOverlayDirective.ɵfac = function OverlayDirective_Factory(t) {\n  return new (t || OverlayDirective)(i0.ɵɵdirectiveInject(NgxMaterialTimepickerEventService));\n};\n\nOverlayDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: OverlayDirective,\n  selectors: [[\"\", \"overlay\", \"\"]],\n  hostBindings: function OverlayDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function OverlayDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n  },\n  inputs: {\n    preventClick: [\"overlay\", \"preventClick\"]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[overlay]'\n    }]\n  }], function () {\n    return [{\n      type: NgxMaterialTimepickerEventService\n    }];\n  }, {\n    preventClick: [{\n      type: Input,\n      args: ['overlay']\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\n\nclass NgxMaterialTimepickerThemeDirective {\n  constructor(elementRef) {\n    this.element = elementRef.nativeElement;\n  }\n\n  ngAfterViewInit() {\n    if (this.theme) {\n      this.setTheme(this.theme);\n    }\n  }\n\n  setTheme(theme) {\n    for (const val in theme) {\n      if (theme.hasOwnProperty(val)) {\n        if (typeof theme[val] === 'string') {\n          for (const prop in theme) {\n            if (theme.hasOwnProperty(prop)) {\n              this.element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\n            }\n          }\n\n          return;\n        }\n\n        this.setTheme(theme[val]);\n      }\n    }\n  }\n\n}\n\nNgxMaterialTimepickerThemeDirective.ɵfac = function NgxMaterialTimepickerThemeDirective_Factory(t) {\n  return new (t || NgxMaterialTimepickerThemeDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nNgxMaterialTimepickerThemeDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxMaterialTimepickerThemeDirective,\n  selectors: [[\"\", \"ngxMaterialTimepickerTheme\", \"\"]],\n  inputs: {\n    theme: [\"ngxMaterialTimepickerTheme\", \"theme\"]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaterialTimepickerThemeDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxMaterialTimepickerTheme]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    theme: [{\n      type: Input,\n      args: ['ngxMaterialTimepickerTheme']\n    }]\n  });\n})();\n\nfunction camelCaseToDash(myStr) {\n  return myStr.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n\nvar AnimationState;\n\n(function (AnimationState) {\n  AnimationState[\"ENTER\"] = \"enter\";\n  AnimationState[\"LEAVE\"] = \"leave\";\n})(AnimationState || (AnimationState = {}));\n\nclass NgxMaterialTimepickerContainerComponent {\n  constructor(timepickerService, eventService, locale) {\n    this.timepickerService = timepickerService;\n    this.eventService = eventService;\n    this.locale = locale;\n    this.timeUnit = TimeUnit;\n    this.activeTimeUnit = TimeUnit.HOUR;\n    this.unsubscribe = new Subject();\n  }\n\n  set defaultTime(time) {\n    this._defaultTime = time;\n    this.setDefaultTime(time);\n  }\n\n  get defaultTime() {\n    return this._defaultTime;\n  }\n\n  onKeydown(e) {\n    this.eventService.dispatchEvent(e);\n    e.stopPropagation();\n  }\n\n  ngOnInit() {\n    this.animationState = !this.disableAnimation && AnimationState.ENTER;\n    this.defineTime();\n    this.selectedHour = this.timepickerService.selectedHour.pipe(shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n    this.selectedMinute = this.timepickerService.selectedMinute.pipe(shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n    this.selectedPeriod = this.timepickerService.selectedPeriod.pipe(shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n    this.timepickerBaseRef.timeUpdated.pipe(takeUntil(this.unsubscribe)).subscribe(this.setDefaultTime.bind(this));\n  }\n\n  onHourChange(hour) {\n    this.timepickerService.hour = hour;\n    this.onTimeChange();\n  }\n\n  onHourSelected(hour) {\n    if (!this.hoursOnly) {\n      this.changeTimeUnit(TimeUnit.MINUTE);\n    }\n\n    this.timepickerBaseRef.hourSelected.next(hour);\n  }\n\n  onMinuteChange(minute) {\n    this.timepickerService.minute = minute;\n    this.onTimeChange();\n  }\n\n  changePeriod(period) {\n    this.timepickerService.period = period;\n    this.onTimeChange();\n  }\n\n  changeTimeUnit(unit) {\n    this.activeTimeUnit = unit;\n  }\n\n  setTime() {\n    this.timepickerBaseRef.timeSet.next(this.timepickerService.getFullTime(this.format));\n    this.close();\n  }\n\n  close() {\n    if (this.disableAnimation) {\n      this.timepickerBaseRef.close();\n      return;\n    }\n\n    this.animationState = AnimationState.LEAVE;\n  }\n\n  animationDone(event) {\n    if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\n      this.timepickerBaseRef.close();\n    }\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe.next();\n    this.unsubscribe.complete();\n  }\n\n  setDefaultTime(time) {\n    this.timepickerService.setDefaultTimeIfAvailable(time, this.minTime, this.maxTime, this.format, this.minutesGap);\n  }\n\n  defineTime() {\n    const minTime = this.minTime;\n\n    if (minTime && !this.time && !this.defaultTime) {\n      const time = TimeAdapter.fromDateTimeToString(minTime, this.format);\n      this.setDefaultTime(time);\n    }\n  }\n\n  onTimeChange() {\n    const time = TimeAdapter.toLocaleTimeString(this.timepickerService.getFullTime(this.format), {\n      locale: this.locale,\n      format: this.format\n    });\n    this.timepickerBaseRef.timeChanged.emit(time);\n  }\n\n}\n\nNgxMaterialTimepickerContainerComponent.ɵfac = function NgxMaterialTimepickerContainerComponent_Factory(t) {\n  return new (t || NgxMaterialTimepickerContainerComponent)(i0.ɵɵdirectiveInject(NgxMaterialTimepickerService), i0.ɵɵdirectiveInject(NgxMaterialTimepickerEventService), i0.ɵɵdirectiveInject(TIME_LOCALE));\n};\n\nNgxMaterialTimepickerContainerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMaterialTimepickerContainerComponent,\n  selectors: [[\"ngx-material-timepicker-container\"]],\n  hostBindings: function NgxMaterialTimepickerContainerComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function NgxMaterialTimepickerContainerComponent_keydown_HostBindingHandler($event) {\n        return ctx.onKeydown($event);\n      });\n    }\n  },\n  inputs: {\n    defaultTime: \"defaultTime\"\n  },\n  features: [i0.ɵɵProvidersFeature([NgxMaterialTimepickerService])],\n  decls: 22,\n  vars: 31,\n  consts: [[1, \"timepicker-backdrop-overlay\", 3, \"overlay\", \"ngClass\"], [1, \"timepicker-overlay\"], [3, \"appendToInput\", \"inputElement\", \"ngxMaterialTimepickerTheme\"], [1, \"timepicker\", 3, \"ngClass\"], [1, \"timepicker__header\"], [3, \"format\", \"hour\", \"minute\", \"period\", \"activeTimeUnit\", \"minTime\", \"maxTime\", \"isEditable\", \"editableHintTmpl\", \"minutesGap\", \"hoursOnly\", \"periodChanged\", \"timeUnitChanged\", \"hourChanged\", \"minuteChanged\"], [1, \"timepicker__main-content\"], [1, \"timepicker__body\", 3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [3, \"selectedMinute\", \"selectedHour\", \"minTime\", \"maxTime\", \"format\", \"period\", \"minutesGap\", \"minuteChange\", 4, \"ngSwitchCase\"], [1, \"timepicker__actions\"], [3, \"click\"], [4, \"ngTemplateOutlet\"], [\"cancelBtnDefault\", \"\"], [\"confirmBtnDefault\", \"\"], [3, \"selectedHour\", \"minTime\", \"maxTime\", \"format\", \"hourChange\", \"hourSelected\", 4, \"ngIf\", \"ngIfElse\"], [\"ampmHours\", \"\"], [3, \"selectedHour\", \"minTime\", \"maxTime\", \"format\", \"hourChange\", \"hourSelected\"], [3, \"selectedHour\", \"period\", \"minTime\", \"maxTime\", \"hourChange\", \"hourSelected\"], [3, \"selectedMinute\", \"selectedHour\", \"minTime\", \"maxTime\", \"format\", \"period\", \"minutesGap\", \"minuteChange\"]],\n  template: function NgxMaterialTimepickerContainerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"ngx-material-timepicker-content\", 2);\n      i0.ɵɵelementStart(3, \"div\", 3);\n      i0.ɵɵlistener(\"@timepicker.done\", function NgxMaterialTimepickerContainerComponent_Template_div_animation_timepicker_done_3_listener($event) {\n        return ctx.animationDone($event);\n      });\n      i0.ɵɵelementStart(4, \"header\", 4);\n      i0.ɵɵelementStart(5, \"ngx-material-timepicker-dial\", 5);\n      i0.ɵɵlistener(\"periodChanged\", function NgxMaterialTimepickerContainerComponent_Template_ngx_material_timepicker_dial_periodChanged_5_listener($event) {\n        return ctx.changePeriod($event);\n      })(\"timeUnitChanged\", function NgxMaterialTimepickerContainerComponent_Template_ngx_material_timepicker_dial_timeUnitChanged_5_listener($event) {\n        return ctx.changeTimeUnit($event);\n      })(\"hourChanged\", function NgxMaterialTimepickerContainerComponent_Template_ngx_material_timepicker_dial_hourChanged_5_listener($event) {\n        return ctx.onHourChange($event);\n      })(\"minuteChanged\", function NgxMaterialTimepickerContainerComponent_Template_ngx_material_timepicker_dial_minuteChanged_5_listener($event) {\n        return ctx.onMinuteChange($event);\n      });\n      i0.ɵɵpipe(6, \"async\");\n      i0.ɵɵpipe(7, \"async\");\n      i0.ɵɵpipe(8, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 6);\n      i0.ɵɵelementStart(10, \"div\", 7);\n      i0.ɵɵtemplate(11, NgxMaterialTimepickerContainerComponent_div_11_Template, 4, 2, \"div\", 8);\n      i0.ɵɵtemplate(12, NgxMaterialTimepickerContainerComponent_ngx_material_timepicker_minutes_face_12_Template, 4, 13, \"ngx-material-timepicker-minutes-face\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 10);\n      i0.ɵɵelementStart(14, \"div\", 11);\n      i0.ɵɵlistener(\"click\", function NgxMaterialTimepickerContainerComponent_Template_div_click_14_listener() {\n        return ctx.close();\n      });\n      i0.ɵɵtemplate(15, NgxMaterialTimepickerContainerComponent_ng_container_15_Template, 1, 0, \"ng-container\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\", 11);\n      i0.ɵɵlistener(\"click\", function NgxMaterialTimepickerContainerComponent_Template_div_click_16_listener() {\n        return ctx.setTime();\n      });\n      i0.ɵɵtemplate(17, NgxMaterialTimepickerContainerComponent_ng_container_17_Template, 1, 0, \"ng-container\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(18, NgxMaterialTimepickerContainerComponent_ng_template_18_Template, 2, 0, \"ng-template\", null, 13, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtemplate(20, NgxMaterialTimepickerContainerComponent_ng_template_20_Template, 2, 0, \"ng-template\", null, 14, i0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      const _r4 = i0.ɵɵreference(19);\n\n      const _r6 = i0.ɵɵreference(21);\n\n      let tmp_8_0;\n      let tmp_9_0;\n      i0.ɵɵproperty(\"overlay\", ctx.preventOverlayClick)(\"ngClass\", i0.ɵɵpureFunction1(29, _c10, ctx.appendToInput));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"appendToInput\", ctx.appendToInput)(\"inputElement\", ctx.inputElement)(\"ngxMaterialTimepickerTheme\", ctx.theme);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"@timepicker\", ctx.animationState)(\"ngClass\", ctx.timepickerClass);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"format\", ctx.format)(\"hour\", (tmp_8_0 = i0.ɵɵpipeBind1(6, 23, ctx.selectedHour)) == null ? null : tmp_8_0.time)(\"minute\", (tmp_9_0 = i0.ɵɵpipeBind1(7, 25, ctx.selectedMinute)) == null ? null : tmp_9_0.time)(\"period\", i0.ɵɵpipeBind1(8, 27, ctx.selectedPeriod))(\"activeTimeUnit\", ctx.activeTimeUnit)(\"minTime\", ctx.minTime)(\"maxTime\", ctx.maxTime)(\"isEditable\", ctx.enableKeyboardInput)(\"editableHintTmpl\", ctx.editableHintTmpl)(\"minutesGap\", ctx.minutesGap)(\"hoursOnly\", ctx.hoursOnly);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngSwitch\", ctx.activeTimeUnit);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitchCase\", ctx.timeUnit.HOUR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitchCase\", ctx.timeUnit.MINUTE);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.cancelBtnTmpl ? ctx.cancelBtnTmpl : _r4);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.confirmBtnTmpl ? ctx.confirmBtnTmpl : _r6);\n    }\n  },\n  directives: [OverlayDirective, i1.NgClass, NgxMaterialTimepickerContentComponent, NgxMaterialTimepickerThemeDirective, NgxMaterialTimepickerDialComponent, i1.NgSwitch, i1.NgSwitchCase, i1.NgTemplateOutlet, i1.NgIf, NgxMaterialTimepicker24HoursFaceComponent, NgxMaterialTimepicker12HoursFaceComponent, NgxMaterialTimepickerMinutesFaceComponent, NgxMaterialTimepickerButtonComponent],\n  pipes: [i1.AsyncPipe],\n  styles: [\"[_nghost-%COMP%]{--body-background-color: #fff;--primary-font-family: \\\"Roboto\\\", sans-serif;--button-color: deepskyblue;--dial-active-color: #fff;--dial-inactive-color: rgba(255, 255, 255, .5);--dial-background-color: deepskyblue;--dial-editable-active-color: deepskyblue;--dial-editable-background-color: #fff;--clock-face-time-active-color: #fff;--clock-face-time-inactive-color: #6c6c6c;--clock-face-inner-time-inactive-color: #929292;--clock-face-time-disabled-color: #c5c5c5;--clock-face-background-color: #f0f0f0;--clock-hand-color: deepskyblue}.timepicker-backdrop-overlay[_ngcontent-%COMP%]{position:fixed;top:0;bottom:0;right:0;left:0;background-color:#0000004d;z-index:999;pointer-events:auto}.timepicker-backdrop-overlay--transparent[_ngcontent-%COMP%]{background-color:transparent}.timepicker-overlay[_ngcontent-%COMP%]{position:fixed;top:0;left:0;width:100%;height:100%;display:flex;justify-content:center;align-items:center;z-index:999;pointer-events:none}.timepicker[_ngcontent-%COMP%]{width:300px;border-radius:2px;box-shadow:#00000040 0 14px 45px,#00000038 0 10px 18px;outline:none;position:static;z-index:999;pointer-events:auto}.timepicker__header[_ngcontent-%COMP%]{padding:15px 30px;background-color:#00bfff}@supports (background-color: var(--dial-background-color)){.timepicker__header[_ngcontent-%COMP%]{background-color:var(--dial-background-color)}}.timepicker__body[_ngcontent-%COMP%]{padding:15px 5px;display:flex;justify-content:center;align-items:center;background-color:#fff}@supports (background-color: var(--body-background-color)){.timepicker__body[_ngcontent-%COMP%]{background-color:var(--body-background-color)}}.timepicker__actions[_ngcontent-%COMP%]{display:flex;justify-content:flex-end;padding:15px;background-color:#fff}@supports (background-color: var(--body-background-color)){.timepicker__actions[_ngcontent-%COMP%]{background-color:var(--body-background-color)}}@media (max-device-width: 1023px) and (orientation: landscape){.timepicker[_ngcontent-%COMP%]{display:flex;width:515px}.timepicker__header[_ngcontent-%COMP%]{display:flex;align-items:center}.timepicker__main-content[_ngcontent-%COMP%]{display:flex;flex-direction:column;width:100%}.timepicker__actions[_ngcontent-%COMP%]{padding:5px;margin-top:-1px}}\"],\n  data: {\n    animation: [trigger('timepicker', [transition(`* => ${AnimationState.ENTER}`, [style({\n      transform: 'translateY(-30%)'\n    }), animate('0.2s ease-out', style({\n      transform: 'translateY(0)'\n    }))]), transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [style({\n      transform: 'translateY(0)',\n      opacity: 1\n    }), animate('0.2s ease-out', style({\n      transform: 'translateY(-30%)',\n      opacity: 0\n    }))])])]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaterialTimepickerContainerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-material-timepicker-container',\n      templateUrl: './ngx-material-timepicker-container.component.html',\n      styleUrls: ['./ngx-material-timepicker-container.component.scss'],\n      animations: [trigger('timepicker', [transition(`* => ${AnimationState.ENTER}`, [style({\n        transform: 'translateY(-30%)'\n      }), animate('0.2s ease-out', style({\n        transform: 'translateY(0)'\n      }))]), transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [style({\n        transform: 'translateY(0)',\n        opacity: 1\n      }), animate('0.2s ease-out', style({\n        transform: 'translateY(-30%)',\n        opacity: 0\n      }))])])],\n      providers: [NgxMaterialTimepickerService]\n    }]\n  }], function () {\n    return [{\n      type: NgxMaterialTimepickerService\n    }, {\n      type: NgxMaterialTimepickerEventService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [TIME_LOCALE]\n      }]\n    }];\n  }, {\n    defaultTime: [{\n      type: Input\n    }],\n    onKeydown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\n\nclass DomService {\n  constructor(cfr, appRef, injector, document) {\n    this.cfr = cfr;\n    this.appRef = appRef;\n    this.injector = injector;\n    this.document = document;\n  }\n\n  appendTimepickerToBody(timepicker, config) {\n    this.componentRef = this.cfr.resolveComponentFactory(timepicker).create(this.injector);\n    Object.keys(config).forEach(key => this.componentRef.instance[key] = config[key]);\n    this.appRef.attachView(this.componentRef.hostView);\n    const domElement = this.componentRef.hostView.rootNodes[0];\n    this.document.body.appendChild(domElement);\n  }\n\n  destroyTimepicker() {\n    this.componentRef.destroy();\n    this.appRef.detachView(this.componentRef.hostView);\n  }\n\n}\n\nDomService.ɵfac = function DomService_Factory(t) {\n  return new (t || DomService)(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(DOCUMENT, 8));\n};\n\nDomService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DomService,\n  factory: DomService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DomService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i0.ApplicationRef\n    }, {\n      type: i0.Injector\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\nconst ESCAPE = 27;\n\nclass NgxMaterialTimepickerComponent {\n  constructor(eventService, domService) {\n    this.eventService = eventService;\n    this.domService = domService;\n    this.timeUpdated = new Subject();\n    this.isEsc = true;\n    this.hoursOnly = false;\n    this.timeSet = new EventEmitter();\n    this.opened = new EventEmitter();\n    this.closed = new EventEmitter();\n    this.hourSelected = new EventEmitter();\n    this.timeChanged = new EventEmitter();\n    this.unsubscribe = new Subject();\n  }\n  /**\r\n   * @deprecated Since version 5.1.1. Will be deleted on version 6.0.0. Use @Input() theme instead\r\n   */\n\n\n  set ngxMaterialTimepickerTheme(theme) {\n    console.warn(`'ngxMaterialTimepickerTheme' is deprecated. Use 'theme' instead`);\n    this._ngxMaterialTimepickerTheme = theme;\n  }\n\n  set format(value) {\n    this._format = value === 24 ? 24 : 12;\n  }\n\n  get format() {\n    return this.timepickerInput ? this.timepickerInput.format : this._format;\n  }\n\n  set minutesGap(gap) {\n    if (gap == null) {\n      return;\n    }\n\n    gap = Math.floor(gap);\n    this._minutesGap = gap <= 59 ? gap : 1;\n  }\n\n  get minutesGap() {\n    return this._minutesGap;\n  }\n\n  get minTime() {\n    return this.timepickerInput ? this.timepickerInput.min : this.min;\n  }\n\n  get maxTime() {\n    return this.timepickerInput ? this.timepickerInput.max : this.max;\n  }\n\n  get disabled() {\n    return this.timepickerInput && this.timepickerInput.disabled;\n  }\n\n  get time() {\n    return this.timepickerInput && this.timepickerInput.value;\n  }\n\n  get inputElement() {\n    return this.timepickerInput && this.timepickerInput.element;\n  }\n  /***\r\n   * Register an input with this timepicker.\r\n   * input - The timepicker input to register with this timepicker\r\n   */\n\n\n  registerInput(input) {\n    if (this.timepickerInput) {\n      throw Error('A Timepicker can only be associated with a single input.');\n    }\n\n    this.timepickerInput = input;\n  }\n\n  open() {\n    this.domService.appendTimepickerToBody(NgxMaterialTimepickerContainerComponent, {\n      timepickerBaseRef: this,\n      time: this.time,\n      defaultTime: this.defaultTime,\n      maxTime: this.maxTime,\n      minTime: this.minTime,\n      format: this.format,\n      minutesGap: this.minutesGap,\n      disableAnimation: this.disableAnimation,\n      cancelBtnTmpl: this.cancelBtnTmpl,\n      confirmBtnTmpl: this.confirmBtnTmpl,\n      editableHintTmpl: this.editableHintTmpl,\n      disabled: this.disabled,\n      enableKeyboardInput: this.enableKeyboardInput,\n      preventOverlayClick: this.preventOverlayClick,\n      appendToInput: this.appendToInput,\n      hoursOnly: this.hoursOnly,\n      theme: this.theme || this._ngxMaterialTimepickerTheme,\n      timepickerClass: this.timepickerClass,\n      inputElement: this.inputElement\n    });\n    this.opened.next();\n    this.subscribeToEvents();\n  }\n\n  close() {\n    this.domService.destroyTimepicker();\n    this.closed.next();\n    this.unsubscribeFromEvents();\n  }\n\n  updateTime(time) {\n    this.timeUpdated.next(time);\n  }\n\n  subscribeToEvents() {\n    merge(this.eventService.backdropClick, this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc))).pipe(takeUntil(this.unsubscribe)).subscribe(() => this.close());\n  }\n\n  unsubscribeFromEvents() {\n    this.unsubscribe.next();\n    this.unsubscribe.complete();\n  }\n\n}\n\nNgxMaterialTimepickerComponent.ɵfac = function NgxMaterialTimepickerComponent_Factory(t) {\n  return new (t || NgxMaterialTimepickerComponent)(i0.ɵɵdirectiveInject(NgxMaterialTimepickerEventService), i0.ɵɵdirectiveInject(DomService));\n};\n\nNgxMaterialTimepickerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMaterialTimepickerComponent,\n  selectors: [[\"ngx-material-timepicker\"]],\n  inputs: {\n    cancelBtnTmpl: \"cancelBtnTmpl\",\n    editableHintTmpl: \"editableHintTmpl\",\n    confirmBtnTmpl: \"confirmBtnTmpl\",\n    isEsc: [\"ESC\", \"isEsc\"],\n    enableKeyboardInput: \"enableKeyboardInput\",\n    preventOverlayClick: \"preventOverlayClick\",\n    disableAnimation: \"disableAnimation\",\n    appendToInput: \"appendToInput\",\n    hoursOnly: \"hoursOnly\",\n    defaultTime: \"defaultTime\",\n    timepickerClass: \"timepickerClass\",\n    theme: \"theme\",\n    min: \"min\",\n    max: \"max\",\n    ngxMaterialTimepickerTheme: \"ngxMaterialTimepickerTheme\",\n    format: \"format\",\n    minutesGap: \"minutesGap\"\n  },\n  outputs: {\n    timeSet: \"timeSet\",\n    opened: \"opened\",\n    closed: \"closed\",\n    hourSelected: \"hourSelected\",\n    timeChanged: \"timeChanged\"\n  },\n  decls: 0,\n  vars: 0,\n  template: function NgxMaterialTimepickerComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaterialTimepickerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-material-timepicker',\n      template: ''\n    }]\n  }], function () {\n    return [{\n      type: NgxMaterialTimepickerEventService\n    }, {\n      type: DomService\n    }];\n  }, {\n    cancelBtnTmpl: [{\n      type: Input\n    }],\n    editableHintTmpl: [{\n      type: Input\n    }],\n    confirmBtnTmpl: [{\n      type: Input\n    }],\n    isEsc: [{\n      type: Input,\n      args: ['ESC']\n    }],\n    enableKeyboardInput: [{\n      type: Input\n    }],\n    preventOverlayClick: [{\n      type: Input\n    }],\n    disableAnimation: [{\n      type: Input\n    }],\n    appendToInput: [{\n      type: Input\n    }],\n    hoursOnly: [{\n      type: Input\n    }],\n    defaultTime: [{\n      type: Input\n    }],\n    timepickerClass: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    ngxMaterialTimepickerTheme: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    minutesGap: [{\n      type: Input\n    }],\n    timeSet: [{\n      type: Output\n    }],\n    opened: [{\n      type: Output\n    }],\n    closed: [{\n      type: Output\n    }],\n    hourSelected: [{\n      type: Output\n    }],\n    timeChanged: [{\n      type: Output\n    }]\n  });\n})();\n/* To override a default toggle icon */\n\n\nclass NgxMaterialTimepickerToggleIconDirective {}\n\nNgxMaterialTimepickerToggleIconDirective.ɵfac = function NgxMaterialTimepickerToggleIconDirective_Factory(t) {\n  return new (t || NgxMaterialTimepickerToggleIconDirective)();\n};\n\nNgxMaterialTimepickerToggleIconDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxMaterialTimepickerToggleIconDirective,\n  selectors: [[\"\", \"ngxMaterialTimepickerToggleIcon\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaterialTimepickerToggleIconDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxMaterialTimepickerToggleIcon]'\n    }]\n  }], null, null);\n})();\n\nclass NgxMaterialTimepickerToggleComponent {\n  get disabled() {\n    return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = value;\n  }\n\n  open(event) {\n    if (this.timepicker) {\n      this.timepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n}\n\nNgxMaterialTimepickerToggleComponent.ɵfac = function NgxMaterialTimepickerToggleComponent_Factory(t) {\n  return new (t || NgxMaterialTimepickerToggleComponent)();\n};\n\nNgxMaterialTimepickerToggleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMaterialTimepickerToggleComponent,\n  selectors: [[\"ngx-material-timepicker-toggle\"]],\n  contentQueries: function NgxMaterialTimepickerToggleComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, NgxMaterialTimepickerToggleIconDirective, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customIcon = _t.first);\n    }\n  },\n  inputs: {\n    timepicker: [\"for\", \"timepicker\"],\n    disabled: \"disabled\"\n  },\n  ngContentSelectors: _c12,\n  decls: 3,\n  vars: 2,\n  consts: [[\"type\", \"button\", 1, \"ngx-material-timepicker-toggle\", 3, \"disabled\", \"click\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\", 4, \"ngIf\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\"], [\"d\", \"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\"]],\n  template: function NgxMaterialTimepickerToggleComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c11);\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function NgxMaterialTimepickerToggleComponent_Template_button_click_0_listener($event) {\n        return ctx.open($event);\n      });\n      i0.ɵɵtemplate(1, NgxMaterialTimepickerToggleComponent__svg_svg_1_Template, 2, 0, \"svg\", 1);\n      i0.ɵɵprojection(2);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"disabled\", ctx.disabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.customIcon);\n    }\n  },\n  directives: [i1.NgIf],\n  styles: [\".ngx-material-timepicker-toggle[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;padding:4px;background-color:transparent;border-radius:50%;text-align:center;border:none;outline:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;transition:background-color .3s;cursor:pointer}.ngx-material-timepicker-toggle[_ngcontent-%COMP%]:focus{background-color:#00000012}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaterialTimepickerToggleComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-material-timepicker-toggle',\n      templateUrl: 'ngx-material-timepicker-toggle.component.html',\n      styleUrls: ['ngx-material-timepicker-toggle.component.scss']\n    }]\n  }], null, {\n    timepicker: [{\n      type: Input,\n      args: ['for']\n    }],\n    disabled: [{\n      type: Input\n    }],\n    customIcon: [{\n      type: ContentChild,\n      args: [NgxMaterialTimepickerToggleIconDirective, {\n        static: true\n      }]\n    }]\n  });\n})();\n\nclass TimepickerDirective {\n  constructor(elementRef, locale) {\n    this.elementRef = elementRef;\n    this.locale = locale;\n    this._format = 12;\n    this._value = '';\n    this.timepickerSubscriptions = [];\n\n    this.onTouched = () => {};\n\n    this.onChange = () => {};\n  }\n\n  set format(value) {\n    this._format = value === 24 ? 24 : 12;\n    const isDynamicallyChanged = value && this.previousFormat && this.previousFormat !== this._format;\n\n    if (isDynamicallyChanged) {\n      this.value = this._value;\n\n      this._timepicker.updateTime(this._value);\n    }\n\n    this.previousFormat = this._format;\n  }\n\n  get format() {\n    return this._format;\n  }\n\n  set min(value) {\n    console.log(value);\n\n    if (typeof value === 'string') {\n      this._min = TimeAdapter.parseTime(value, {\n        locale: this.locale,\n        format: this.format\n      });\n      return;\n    }\n\n    this._min = value;\n  }\n\n  get min() {\n    return this._min;\n  }\n\n  set max(value) {\n    if (typeof value === 'string') {\n      this._max = TimeAdapter.parseTime(value, {\n        locale: this.locale,\n        format: this.format\n      });\n      return;\n    }\n\n    this._max = value;\n  }\n\n  get max() {\n    return this._max;\n  }\n\n  set timepicker(picker) {\n    this.registerTimepicker(picker);\n  }\n\n  set value(value) {\n    if (!value) {\n      this._value = '';\n      this.updateInputValue();\n      return;\n    }\n\n    this.setTimeIfAvailable(value);\n  }\n\n  get value() {\n    if (!this._value) {\n      return '';\n    }\n\n    return TimeAdapter.toLocaleTimeString(this._value, {\n      format: this.format,\n      locale: this.locale\n    });\n  }\n\n  get element() {\n    return this.elementRef && this.elementRef.nativeElement;\n  }\n\n  set defaultTime(time) {\n    this._timepicker.defaultTime = TimeAdapter.formatTime(time, {\n      locale: this.locale,\n      format: this.format\n    });\n  }\n\n  updateValue(value) {\n    this.value = value;\n    this.onChange(value);\n  }\n\n  ngOnChanges(changes) {\n    var _a;\n\n    const value = (_a = changes === null || changes === void 0 ? void 0 : changes.value) === null || _a === void 0 ? void 0 : _a.currentValue;\n\n    if (value) {\n      // Call setTimeIfAvailable after @Input setters\n      this.setTimeIfAvailable(value);\n      this.defaultTime = value;\n    }\n  }\n\n  onClick(event) {\n    if (!this.disableClick) {\n      this._timepicker.open();\n\n      event.stopPropagation();\n    }\n  }\n\n  writeValue(value) {\n    this.value = value;\n\n    if (value) {\n      this.defaultTime = value;\n    }\n  }\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n\n  ngOnDestroy() {\n    this.timepickerSubscriptions.forEach(s => s.unsubscribe());\n  }\n\n  registerTimepicker(picker) {\n    if (picker) {\n      this._timepicker = picker;\n\n      this._timepicker.registerInput(this);\n\n      this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe(time => {\n        this.value = time;\n        this.onChange(this.value);\n        this.onTouched();\n        this.defaultTime = this._value;\n      }));\n    } else {\n      throw new Error('NgxMaterialTimepickerComponent is not defined.' + ' Please make sure you passed the timepicker to ngxTimepicker directive');\n    }\n  }\n\n  updateInputValue() {\n    this.elementRef.nativeElement.value = this.value;\n  }\n\n  setTimeIfAvailable(value) {\n    var _a;\n\n    const time = TimeAdapter.formatTime(value, {\n      locale: this.locale,\n      format: this.format\n    });\n    const isAvailable = TimeAdapter.isTimeAvailable(time, this._min, this._max, 'minutes', (_a = this._timepicker) === null || _a === void 0 ? void 0 : _a.minutesGap, this._format);\n\n    if (isAvailable) {\n      this._value = time;\n      this.updateInputValue();\n    } else {\n      this.value = null;\n      console.warn('Selected time doesn\\'t match min or max value');\n    }\n  }\n\n}\n\nTimepickerDirective.ɵfac = function TimepickerDirective_Factory(t) {\n  return new (t || TimepickerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(TIME_LOCALE));\n};\n\nTimepickerDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TimepickerDirective,\n  selectors: [[\"\", \"ngxTimepicker\", \"\"]],\n  hostVars: 1,\n  hostBindings: function TimepickerDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"change\", function TimepickerDirective_change_HostBindingHandler($event) {\n        return ctx.updateValue($event.target.value);\n      })(\"blur\", function TimepickerDirective_blur_HostBindingHandler() {\n        return ctx.onTouched();\n      })(\"click\", function TimepickerDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n    }\n  },\n  inputs: {\n    format: \"format\",\n    min: \"min\",\n    max: \"max\",\n    timepicker: [\"ngxTimepicker\", \"timepicker\"],\n    value: \"value\",\n    disabled: \"disabled\",\n    disableClick: \"disableClick\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: TimepickerDirective,\n    multi: true\n  }]), i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TimepickerDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxTimepicker]',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: TimepickerDirective,\n        multi: true\n      }],\n      host: {\n        '[disabled]': 'disabled',\n        '(change)': 'updateValue($event.target.value)',\n        '(blur)': 'onTouched()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [TIME_LOCALE]\n      }]\n    }];\n  }, {\n    format: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    timepicker: [{\n      type: Input,\n      args: ['ngxTimepicker']\n    }],\n    value: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    disableClick: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\n\nclass TimeFormatterPipe {\n  transform(time, timeUnit) {\n    if (time == null || time === '') {\n      return time;\n    }\n\n    switch (timeUnit) {\n      case TimeUnit.HOUR:\n        return DateTime.fromObject({\n          hour: +time\n        }).toFormat('HH');\n\n      case TimeUnit.MINUTE:\n        return DateTime.fromObject({\n          minute: +time\n        }).toFormat('mm');\n\n      default:\n        throw new Error('no such time unit');\n    }\n  }\n\n}\n\nTimeFormatterPipe.ɵfac = function TimeFormatterPipe_Factory(t) {\n  return new (t || TimeFormatterPipe)();\n};\n\nTimeFormatterPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"timeFormatter\",\n  type: TimeFormatterPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TimeFormatterPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'timeFormatter'\n    }]\n  }], null, null);\n})();\n\nclass NgxTimepickerTimeControlComponent {\n  constructor(timeParser) {\n    this.timeParser = timeParser;\n    this.timeChanged = new EventEmitter();\n  }\n\n  ngOnChanges(changes) {\n    if (changes.timeList && this.time != null) {\n      if (this.isSelectedTimeDisabled(this.time)) {\n        this.setAvailableTime();\n      }\n    }\n  }\n\n  changeTime(event) {\n    event.stopPropagation();\n    const char = String.fromCharCode(event.keyCode);\n    const time = concatTime(String(this.time), char);\n    this.changeTimeIfValid(time);\n  }\n\n  onKeydown(event) {\n    event.stopPropagation();\n\n    if (!isDigit(event)) {\n      event.preventDefault();\n    }\n\n    switch (event.key) {\n      case 'ArrowUp':\n        this.increase();\n        break;\n\n      case 'ArrowDown':\n        this.decrease();\n        break;\n    }\n\n    if (this.preventTyping && event.key !== 'Tab') {\n      event.preventDefault();\n    }\n  }\n\n  increase() {\n    if (!this.disabled) {\n      let nextTime = +this.time + (this.minutesGap || 1);\n\n      if (nextTime > this.max) {\n        nextTime = this.min;\n      }\n\n      if (this.isSelectedTimeDisabled(nextTime)) {\n        nextTime = this.getAvailableTime(nextTime, this.getNextAvailableTime.bind(this));\n      }\n\n      if (nextTime !== this.time) {\n        this.timeChanged.emit(nextTime);\n      }\n    }\n  }\n\n  decrease() {\n    if (!this.disabled) {\n      let previousTime = +this.time - (this.minutesGap || 1);\n\n      if (previousTime < this.min) {\n        previousTime = this.minutesGap ? this.max - (this.minutesGap - 1) : this.max;\n      }\n\n      if (this.isSelectedTimeDisabled(previousTime)) {\n        previousTime = this.getAvailableTime(previousTime, this.getPrevAvailableTime.bind(this));\n      }\n\n      if (previousTime !== this.time) {\n        this.timeChanged.emit(previousTime);\n      }\n    }\n  }\n\n  onFocus() {\n    this.isFocused = true;\n    this.previousTime = this.time;\n  }\n\n  onBlur() {\n    this.isFocused = false;\n\n    if (this.previousTime !== this.time) {\n      this.changeTimeIfValid(+this.time);\n    }\n  }\n\n  onModelChange(value) {\n    this.time = +this.timeParser.transform(value, this.timeUnit);\n  }\n\n  changeTimeIfValid(value) {\n    if (!isNaN(value)) {\n      this.time = value;\n\n      if (this.time > this.max) {\n        const timeString = String(value);\n        this.time = +timeString[timeString.length - 1];\n      }\n\n      if (this.time < this.min) {\n        this.time = this.min;\n      }\n\n      this.timeChanged.emit(this.time);\n    }\n  }\n\n  isSelectedTimeDisabled(time) {\n    return this.timeList.find(faceTime => faceTime.time === time).disabled;\n  }\n\n  getNextAvailableTime(index) {\n    const timeCollection = this.timeList;\n    const maxValue = timeCollection.length;\n\n    for (let i = index + 1; i < maxValue; i++) {\n      const time = timeCollection[i];\n\n      if (!time.disabled) {\n        return time.time;\n      }\n    }\n  }\n\n  getPrevAvailableTime(index) {\n    for (let i = index; i >= 0; i--) {\n      const time = this.timeList[i];\n\n      if (!time.disabled) {\n        return time.time;\n      }\n    }\n  }\n\n  getAvailableTime(currentTime, fn) {\n    const currentTimeIndex = this.timeList.findIndex(time => time.time === currentTime);\n    const availableTime = fn(currentTimeIndex);\n    return availableTime != null ? availableTime : this.time;\n  }\n\n  setAvailableTime() {\n    const availableTime = this.timeList.find(t => !t.disabled);\n\n    if (availableTime != null) {\n      this.time = availableTime.time;\n      this.timeChanged.emit(this.time);\n    }\n  }\n\n}\n\nNgxTimepickerTimeControlComponent.ɵfac = function NgxTimepickerTimeControlComponent_Factory(t) {\n  return new (t || NgxTimepickerTimeControlComponent)(i0.ɵɵdirectiveInject(TimeParserPipe));\n};\n\nNgxTimepickerTimeControlComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxTimepickerTimeControlComponent,\n  selectors: [[\"ngx-timepicker-time-control\"]],\n  inputs: {\n    time: \"time\",\n    min: \"min\",\n    max: \"max\",\n    placeholder: \"placeholder\",\n    timeUnit: \"timeUnit\",\n    disabled: \"disabled\",\n    timeList: \"timeList\",\n    preventTyping: \"preventTyping\",\n    minutesGap: \"minutesGap\"\n  },\n  outputs: {\n    timeChanged: \"timeChanged\"\n  },\n  features: [i0.ɵɵProvidersFeature([TimeParserPipe]), i0.ɵɵNgOnChangesFeature],\n  decls: 9,\n  vars: 13,\n  consts: [[1, \"ngx-timepicker-control\", 3, \"ngClass\"], [\"maxlength\", \"2\", 1, \"ngx-timepicker-control__input\", 3, \"ngModel\", \"placeholder\", \"disabled\", \"ngModelChange\", \"keydown\", \"keypress\", \"focus\", \"blur\"], [1, \"ngx-timepicker-control__arrows\"], [\"role\", \"button\", 1, \"ngx-timepicker-control__arrow\", 3, \"click\"]],\n  template: function NgxTimepickerTimeControlComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"input\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function NgxTimepickerTimeControlComponent_Template_input_ngModelChange_1_listener($event) {\n        return ctx.onModelChange($event);\n      })(\"keydown\", function NgxTimepickerTimeControlComponent_Template_input_keydown_1_listener($event) {\n        return ctx.onKeydown($event);\n      })(\"keypress\", function NgxTimepickerTimeControlComponent_Template_input_keypress_1_listener($event) {\n        return ctx.changeTime($event);\n      })(\"focus\", function NgxTimepickerTimeControlComponent_Template_input_focus_1_listener() {\n        return ctx.onFocus();\n      })(\"blur\", function NgxTimepickerTimeControlComponent_Template_input_blur_1_listener() {\n        return ctx.onBlur();\n      });\n      i0.ɵɵpipe(2, \"timeLocalizer\");\n      i0.ɵɵpipe(3, \"timeParser\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 2);\n      i0.ɵɵelementStart(5, \"span\", 3);\n      i0.ɵɵlistener(\"click\", function NgxTimepickerTimeControlComponent_Template_span_click_5_listener() {\n        return ctx.increase();\n      });\n      i0.ɵɵtext(6, \" \\u25B2 \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"span\", 3);\n      i0.ɵɵlistener(\"click\", function NgxTimepickerTimeControlComponent_Template_span_click_7_listener() {\n        return ctx.decrease();\n      });\n      i0.ɵɵtext(8, \" \\u25BC \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c13, ctx.isFocused));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngModel\", i0.ɵɵpipeBind3(2, 4, i0.ɵɵpipeBind2(3, 8, ctx.time, ctx.timeUnit), ctx.timeUnit, true))(\"placeholder\", ctx.placeholder)(\"disabled\", ctx.disabled);\n    }\n  },\n  directives: [i1.NgClass, i4.DefaultValueAccessor, i4.MaxLengthValidator, i4.NgControlStatus, i4.NgModel],\n  pipes: [TimeLocalizerPipe, TimeParserPipe],\n  styles: [\".ngx-timepicker-control[_ngcontent-%COMP%]{position:relative;display:flex;width:60px;height:30px;padding:0 5px;box-sizing:border-box}.ngx-timepicker-control--active[_ngcontent-%COMP%]:after{content:\\\"\\\";position:absolute;bottom:-2px;left:0;width:100%;height:1px;background-color:#00bfff}.ngx-timepicker-control__input[_ngcontent-%COMP%]{width:100%;height:100%;padding:0 5px 0 0;border:0;font-size:1rem;color:inherit;outline:none;text-align:center}.ngx-timepicker-control__input[_ngcontent-%COMP%]:disabled{background-color:transparent}.ngx-timepicker-control__arrows[_ngcontent-%COMP%]{position:absolute;right:2px;top:0;display:flex;flex-direction:column}.ngx-timepicker-control__arrow[_ngcontent-%COMP%]{font-size:11px;color:#0006;cursor:pointer;transition:color .2s;-webkit-user-select:none;-moz-user-select:none;user-select:none}.ngx-timepicker-control__arrow[_ngcontent-%COMP%]:hover{color:#000000e6}\"],\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxTimepickerTimeControlComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-timepicker-time-control',\n      templateUrl: './ngx-timepicker-time-control.component.html',\n      styleUrls: ['./ngx-timepicker-time-control.component.scss'],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [TimeParserPipe]\n    }]\n  }], function () {\n    return [{\n      type: TimeParserPipe\n    }];\n  }, {\n    time: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    timeUnit: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    timeList: [{\n      type: Input\n    }],\n    preventTyping: [{\n      type: Input\n    }],\n    minutesGap: [{\n      type: Input\n    }],\n    timeChanged: [{\n      type: Output\n    }]\n  });\n})();\n\nfunction concatTime(currentTime, nextTime) {\n  const isNumber = /\\d/.test(nextTime);\n\n  if (isNumber) {\n    const time = currentTime + nextTime;\n    return +time;\n  }\n}\n\nclass NgxTimepickerPeriodSelectorComponent {\n  constructor(locale) {\n    this.locale = locale;\n    this.periodSelected = new EventEmitter();\n    this.period = TimePeriod;\n    this.meridiems = Info.meridiems({\n      locale: this.locale\n    });\n  }\n\n  set selectedPeriod(period) {\n    if (period) {\n      const periods = [TimePeriod.AM, TimePeriod.PM];\n      this.localizedPeriod = this.meridiems[periods.indexOf(period)];\n    }\n  }\n\n  open() {\n    if (!this.disabled) {\n      this.isOpened = true;\n    }\n  }\n\n  select(period) {\n    this.periodSelected.next(period);\n    this.isOpened = false;\n  }\n\n  backdropClick() {\n    this.isOpened = false;\n  }\n\n}\n\nNgxTimepickerPeriodSelectorComponent.ɵfac = function NgxTimepickerPeriodSelectorComponent_Factory(t) {\n  return new (t || NgxTimepickerPeriodSelectorComponent)(i0.ɵɵdirectiveInject(TIME_LOCALE));\n};\n\nNgxTimepickerPeriodSelectorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxTimepickerPeriodSelectorComponent,\n  selectors: [[\"ngx-timepicker-period-selector\"]],\n  inputs: {\n    isOpened: \"isOpened\",\n    disabled: \"disabled\",\n    selectedPeriod: \"selectedPeriod\"\n  },\n  outputs: {\n    periodSelected: \"periodSelected\"\n  },\n  decls: 9,\n  vars: 6,\n  consts: [[1, \"period\"], [1, \"period-control\"], [\"type\", \"button\", 1, \"period-control__button\", \"period__btn--default\", 3, \"ngClass\", \"click\"], [1, \"period-control__arrow\"], [\"class\", \"period-selector\", 3, \"timepickerAutofocus\", 4, \"ngIf\"], [\"class\", \"overlay\", 3, \"click\", 4, \"ngIf\"], [1, \"period-selector\", 3, \"timepickerAutofocus\"], [\"type\", \"button\", 1, \"period-selector__button\", \"period__btn--default\", 3, \"ngClass\", \"click\"], [1, \"overlay\", 3, \"click\"]],\n  template: function NgxTimepickerPeriodSelectorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function NgxTimepickerPeriodSelectorComponent_Template_button_click_2_listener() {\n        return ctx.open();\n      });\n      i0.ɵɵelementStart(3, \"span\");\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"span\", 3);\n      i0.ɵɵtext(6, \"\\u25BC\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(7, NgxTimepickerPeriodSelectorComponent_ul_7_Template, 7, 10, \"ul\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, NgxTimepickerPeriodSelectorComponent_div_8_Template, 1, 0, \"div\", 5);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c15, ctx.disabled));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.localizedPeriod);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.isOpened);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isOpened);\n    }\n  },\n  directives: [i1.NgClass, i1.NgIf, AutofocusDirective],\n  styles: [\".period[_ngcontent-%COMP%]{position:relative}.period__btn--default[_ngcontent-%COMP%]{padding:0;border:none;background-color:transparent;cursor:pointer;text-align:left;-webkit-user-select:none;-moz-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;outline:none}.period-control[_ngcontent-%COMP%]{position:relative}.period-control__button[_ngcontent-%COMP%]{position:relative;width:60px;font-size:1rem;color:inherit;text-align:center}.period-control__button[_ngcontent-%COMP%]:not(.period-control__button--disabled):focus:after{content:\\\"\\\";position:absolute;bottom:-8px;left:0;width:100%;height:1px;background-color:#00bfff}.period-control__arrow[_ngcontent-%COMP%]{margin-left:10px;font-size:12px;color:#0006}.period-selector[_ngcontent-%COMP%]{position:absolute;top:calc(50% - 50px);right:calc(-50% + -50px);max-width:135px;width:150px;padding:6px 0;margin:0;list-style:none;background-color:#f5f5f5;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;z-index:201}.period-selector__button[_ngcontent-%COMP%]{width:100%;height:48px;padding:0 16px;line-height:48px}.period-selector__button--active[_ngcontent-%COMP%]{color:#00bfff}.period-selector__button[_ngcontent-%COMP%]:focus{background-color:#eee}.overlay[_ngcontent-%COMP%]{position:fixed;width:100%;height:100%;top:0;left:0;background-color:transparent;z-index:200}\"],\n  data: {\n    animation: [trigger('scaleInOut', [transition(':enter', [style({\n      transform: 'scale(0)',\n      opacity: 0\n    }), animate(200, style({\n      transform: 'scale(1)',\n      opacity: 1\n    }))]), transition(':leave', [animate(200, style({\n      transform: 'scale(0)',\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxTimepickerPeriodSelectorComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-timepicker-period-selector',\n      templateUrl: 'ngx-timepicker-period-selector.component.html',\n      styleUrls: ['./ngx-timepicker-period-selector.component.scss'],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('scaleInOut', [transition(':enter', [style({\n        transform: 'scale(0)',\n        opacity: 0\n      }), animate(200, style({\n        transform: 'scale(1)',\n        opacity: 1\n      }))]), transition(':leave', [animate(200, style({\n        transform: 'scale(0)',\n        opacity: 0\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [TIME_LOCALE]\n      }]\n    }];\n  }, {\n    isOpened: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    selectedPeriod: [{\n      type: Input\n    }],\n    periodSelected: [{\n      type: Output\n    }]\n  });\n})();\n\nclass NgxTimepickerFieldComponent {\n  constructor(timepickerService, locale) {\n    this.timepickerService = timepickerService;\n    this.locale = locale;\n    this.minHour = 1;\n    this.maxHour = 12;\n    this.timeUnit = TimeUnit;\n    this.buttonAlign = 'right';\n    this.timeChanged = new EventEmitter();\n    this._format = 12;\n    this.unsubscribe$ = new Subject();\n    this.isFirstTimeChange = true;\n\n    this.onChange = () => {};\n  }\n\n  set format(value) {\n    this._format = value === 24 ? 24 : 12;\n    this.minHour = this._format === 12 ? 1 : 0;\n    this.maxHour = this._format === 12 ? 12 : 23;\n    this.hoursList = TimepickerTimeUtils.getHours(this._format);\n    const isDynamicallyChanged = value && this.previousFormat && this.previousFormat !== this._format;\n\n    if (isDynamicallyChanged) {\n      this.updateTime(this.timepickerTime);\n    }\n\n    this.previousFormat = this._format;\n  }\n\n  get format() {\n    return this._format;\n  }\n\n  set min(value) {\n    if (typeof value === 'string') {\n      this._min = TimeAdapter.parseTime(value, {\n        locale: this.locale,\n        format: this.format\n      });\n      return;\n    }\n\n    this._min = value;\n  }\n\n  get min() {\n    return this._min;\n  }\n\n  set max(value) {\n    if (typeof value === 'string') {\n      this._max = TimeAdapter.parseTime(value, {\n        locale: this.locale,\n        format: this.format\n      });\n      return;\n    }\n\n    this._max = value;\n  }\n\n  get max() {\n    return this._max;\n  }\n\n  set defaultTime(val) {\n    this._defaultTime = val;\n    this.isDefaultTime = !!val;\n  }\n\n  get defaultTime() {\n    return this._defaultTime;\n  }\n\n  set minutesGap(gap) {\n    if (gap == null) {\n      return;\n    }\n\n    gap = Math.floor(gap);\n    this._minutesGap = gap <= 59 ? gap : 1;\n  }\n\n  get minutesGap() {\n    return this._minutesGap;\n  }\n\n  ngOnInit() {\n    this.initTime(this.defaultTime);\n    this.hoursList = TimepickerTimeUtils.getHours(this._format);\n    this.minutesList = TimepickerTimeUtils.getMinutes();\n    this.isTimeRangeSet = !!(this.min || this.max);\n    this.hour$ = this.timepickerService.selectedHour.pipe(tap(clockTime => this.selectedHour = clockTime.time), map(this.changeDefaultTimeValue.bind(this)), tap(() => this.isTimeRangeSet && this.updateAvailableMinutes()));\n    this.minute$ = this.timepickerService.selectedMinute.pipe(map(this.changeDefaultTimeValue.bind(this)), tap(() => this.isFirstTimeChange = false));\n\n    if (this.format === 12) {\n      this.timepickerService.selectedPeriod.pipe(distinctUntilChanged(), tap(period => this.period = period), tap(period => this.isChangePeriodDisabled = this.isPeriodDisabled(period)), takeUntil(this.unsubscribe$)).subscribe(() => this.isTimeRangeSet && this.updateAvailableTime());\n    } else if (this.isTimeRangeSet) {\n      this.updateAvailableTime();\n    }\n  }\n\n  writeValue(val) {\n    if (val) {\n      this.initTime(val);\n    } else {\n      this.resetTime();\n    }\n  }\n\n  registerOnTouched(fn) {}\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n\n  changeHour(hour) {\n    this.timepickerService.hour = this.hoursList.find(h => h.time === hour);\n    this.changeTime();\n  }\n\n  changeMinute(minute) {\n    this.timepickerService.minute = this.minutesList.find(m => m.time === minute);\n    this.changeTime();\n  }\n\n  changePeriod(period) {\n    this.timepickerService.period = period;\n    this.changeTime();\n  }\n\n  onTimeSet(time) {\n    this.updateTime(time);\n    this.emitLocalTimeChange(time);\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n\n  changeTime() {\n    const time = this.timepickerService.getFullTime(this.format);\n    this.timepickerTime = time;\n    this.emitLocalTimeChange(time);\n  }\n\n  resetTime() {\n    this.timepickerService.hour = {\n      angle: 0,\n      time: null\n    };\n    this.timepickerService.minute = {\n      angle: 0,\n      time: null\n    };\n  }\n\n  emitLocalTimeChange(time) {\n    const localTime = TimeAdapter.toLocaleTimeString(time, {\n      format: this.format,\n      locale: this.locale\n    });\n    this.onChange(localTime);\n    this.timeChanged.emit(localTime);\n  }\n\n  changeDefaultTimeValue(clockFaceTime) {\n    if (!this.isDefaultTime && this.isFirstTimeChange) {\n      return Object.assign(Object.assign({}, clockFaceTime), {\n        time: null\n      });\n    }\n\n    return clockFaceTime;\n  }\n\n  updateAvailableHours() {\n    this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\n      min: this.min,\n      max: this.max,\n      format: this.format,\n      period: this.period\n    });\n  }\n\n  updateAvailableMinutes() {\n    this.minutesList = TimepickerTimeUtils.disableMinutes(this.minutesList, this.selectedHour, {\n      min: this.min,\n      max: this.max,\n      format: this.format,\n      period: this.period\n    });\n  }\n\n  updateAvailableTime() {\n    this.updateAvailableHours();\n\n    if (this.selectedHour) {\n      this.updateAvailableMinutes();\n    }\n  }\n\n  updateTime(time) {\n    if (time) {\n      const formattedTime = TimeAdapter.formatTime(time, {\n        locale: this.locale,\n        format: this.format\n      });\n      this.timepickerService.setDefaultTimeIfAvailable(formattedTime, this.min, this.max, this.format);\n      this.timepickerTime = formattedTime;\n    }\n  }\n\n  initTime(time) {\n    const isDefaultTimeAvailable = TimeAdapter.isTimeAvailable(time, this.min, this.max, 'minutes', null, this.format);\n\n    if (!isDefaultTimeAvailable) {\n      if (this.min) {\n        this.updateTime(TimeAdapter.fromDateTimeToString(this.min, this.format));\n        return;\n      }\n\n      if (this.max) {\n        this.updateTime(TimeAdapter.fromDateTimeToString(this.max, this.format));\n        return;\n      }\n    }\n\n    this.updateTime(time);\n  }\n\n  isPeriodDisabled(period) {\n    return TimepickerTimeUtils.disableHours(TimepickerTimeUtils.getHours(12), {\n      min: this.min,\n      max: this.max,\n      format: 12,\n      period: period === TimePeriod.AM ? TimePeriod.PM : TimePeriod.AM\n    }).every(time => time.disabled);\n  }\n\n}\n\nNgxTimepickerFieldComponent.ɵfac = function NgxTimepickerFieldComponent_Factory(t) {\n  return new (t || NgxTimepickerFieldComponent)(i0.ɵɵdirectiveInject(NgxMaterialTimepickerService), i0.ɵɵdirectiveInject(TIME_LOCALE));\n};\n\nNgxTimepickerFieldComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxTimepickerFieldComponent,\n  selectors: [[\"ngx-timepicker-field\"]],\n  inputs: {\n    disabled: \"disabled\",\n    toggleIcon: \"toggleIcon\",\n    buttonAlign: \"buttonAlign\",\n    clockTheme: \"clockTheme\",\n    controlOnly: \"controlOnly\",\n    cancelBtnTmpl: \"cancelBtnTmpl\",\n    confirmBtnTmpl: \"confirmBtnTmpl\",\n    format: \"format\",\n    min: \"min\",\n    max: \"max\",\n    defaultTime: \"defaultTime\",\n    minutesGap: \"minutesGap\"\n  },\n  outputs: {\n    timeChanged: \"timeChanged\"\n  },\n  features: [i0.ɵɵProvidersFeature([NgxMaterialTimepickerService, {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: NgxTimepickerFieldComponent,\n    multi: true\n  }])],\n  decls: 13,\n  vars: 34,\n  consts: [[1, \"ngx-timepicker\", 3, \"ngClass\"], [1, \"ngx-timepicker__control--first\", 3, \"placeholder\", \"time\", \"min\", \"max\", \"timeUnit\", \"disabled\", \"timeList\", \"preventTyping\", \"timeChanged\"], [1, \"ngx-timepicker__time-colon\", \"ngx-timepicker__control--second\"], [1, \"ngx-timepicker__control--third\", 3, \"placeholder\", \"time\", \"min\", \"max\", \"timeUnit\", \"disabled\", \"timeList\", \"preventTyping\", \"minutesGap\", \"timeChanged\"], [\"class\", \"ngx-timepicker__control--forth\", 3, \"selectedPeriod\", \"disabled\", \"periodSelected\", 4, \"ngIf\"], [\"class\", \"ngx-timepicker__toggle\", 3, \"ngClass\", \"for\", \"disabled\", 4, \"ngIf\"], [3, \"min\", \"max\", \"theme\", \"defaultTime\", \"format\", \"cancelBtnTmpl\", \"confirmBtnTmpl\", \"minutesGap\", \"timeSet\"], [\"timepicker\", \"\"], [\"defaultIcon\", \"\"], [1, \"ngx-timepicker__control--forth\", 3, \"selectedPeriod\", \"disabled\", \"periodSelected\"], [1, \"ngx-timepicker__toggle\", 3, \"ngClass\", \"for\", \"disabled\"], [\"ngxMaterialTimepickerToggleIcon\", \"\"], [4, \"ngTemplateOutlet\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\"], [\"d\", \"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\"]],\n  template: function NgxTimepickerFieldComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"ngx-timepicker-time-control\", 1);\n      i0.ɵɵlistener(\"timeChanged\", function NgxTimepickerFieldComponent_Template_ngx_timepicker_time_control_timeChanged_1_listener($event) {\n        return ctx.changeHour($event);\n      });\n      i0.ɵɵpipe(2, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"span\", 2);\n      i0.ɵɵtext(4, \":\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"ngx-timepicker-time-control\", 3);\n      i0.ɵɵlistener(\"timeChanged\", function NgxTimepickerFieldComponent_Template_ngx_timepicker_time_control_timeChanged_5_listener($event) {\n        return ctx.changeMinute($event);\n      });\n      i0.ɵɵpipe(6, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(7, NgxTimepickerFieldComponent_ngx_timepicker_period_selector_7_Template, 1, 2, \"ngx-timepicker-period-selector\", 4);\n      i0.ɵɵtemplate(8, NgxTimepickerFieldComponent_ngx_material_timepicker_toggle_8_Template, 3, 6, \"ngx-material-timepicker-toggle\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"ngx-material-timepicker\", 6, 7);\n      i0.ɵɵlistener(\"timeSet\", function NgxTimepickerFieldComponent_Template_ngx_material_timepicker_timeSet_9_listener($event) {\n        return ctx.onTimeSet($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, NgxTimepickerFieldComponent_ng_template_11_Template, 2, 0, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      let tmp_2_0;\n      let tmp_10_0;\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(32, _c17, ctx.disabled));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"placeholder\", \"HH\")(\"time\", (tmp_2_0 = i0.ɵɵpipeBind1(2, 28, ctx.hour$)) == null ? null : tmp_2_0.time)(\"min\", ctx.minHour)(\"max\", ctx.maxHour)(\"timeUnit\", ctx.timeUnit.HOUR)(\"disabled\", ctx.disabled)(\"timeList\", ctx.hoursList)(\"preventTyping\", ctx.isTimeRangeSet);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"placeholder\", \"MM\")(\"time\", (tmp_10_0 = i0.ɵɵpipeBind1(6, 30, ctx.minute$)) == null ? null : tmp_10_0.time)(\"min\", 0)(\"max\", 59)(\"timeUnit\", ctx.timeUnit.MINUTE)(\"disabled\", ctx.disabled)(\"timeList\", ctx.minutesList)(\"preventTyping\", ctx.isTimeRangeSet)(\"minutesGap\", ctx.minutesGap);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.format !== 24);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.controlOnly);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"min\", ctx.min)(\"max\", ctx.max)(\"theme\", ctx.clockTheme)(\"defaultTime\", ctx.timepickerTime)(\"format\", ctx.format)(\"cancelBtnTmpl\", ctx.cancelBtnTmpl)(\"confirmBtnTmpl\", ctx.confirmBtnTmpl)(\"minutesGap\", ctx.minutesGap);\n    }\n  },\n  directives: [i1.NgClass, NgxTimepickerTimeControlComponent, i1.NgIf, NgxMaterialTimepickerComponent, NgxTimepickerPeriodSelectorComponent, NgxMaterialTimepickerToggleComponent, NgxMaterialTimepickerToggleIconDirective, i1.NgTemplateOutlet],\n  pipes: [i1.AsyncPipe],\n  styles: [\".ngx-timepicker[_ngcontent-%COMP%]{display:flex;align-items:center;height:100%;border-bottom:1px solid rgba(0,0,0,.12)}.ngx-timepicker--disabled[_ngcontent-%COMP%]{background:rgba(0,0,0,.07);pointer-events:none}.ngx-timepicker__time-colon[_ngcontent-%COMP%]{margin-left:10px}.ngx-timepicker__control--first[_ngcontent-%COMP%]{order:1}.ngx-timepicker__control--second[_ngcontent-%COMP%]{order:2}.ngx-timepicker__control--third[_ngcontent-%COMP%]{order:3}.ngx-timepicker__control--forth[_ngcontent-%COMP%]{order:4}.ngx-timepicker__toggle[_ngcontent-%COMP%]{order:4}.ngx-timepicker__toggle--left[_ngcontent-%COMP%]{order:0}\"],\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxTimepickerFieldComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-timepicker-field',\n      templateUrl: './ngx-timepicker-field.component.html',\n      styleUrls: ['./ngx-timepicker-field.component.scss'],\n      providers: [NgxMaterialTimepickerService, {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: NgxTimepickerFieldComponent,\n        multi: true\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: NgxMaterialTimepickerService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [TIME_LOCALE]\n      }]\n    }];\n  }, {\n    disabled: [{\n      type: Input\n    }],\n    toggleIcon: [{\n      type: Input\n    }],\n    buttonAlign: [{\n      type: Input\n    }],\n    clockTheme: [{\n      type: Input\n    }],\n    controlOnly: [{\n      type: Input\n    }],\n    cancelBtnTmpl: [{\n      type: Input\n    }],\n    confirmBtnTmpl: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    defaultTime: [{\n      type: Input\n    }],\n    minutesGap: [{\n      type: Input\n    }],\n    timeChanged: [{\n      type: Output\n    }]\n  });\n})();\n\nclass NgxMaterialTimepickerModule {\n  // tslint:disable-next-line:max-line-length\n  static setOpts(locale, numberingSystem = TimeAdapter.DEFAULT_NUMBERING_SYSTEM) {\n    return {\n      ngModule: NgxMaterialTimepickerModule,\n      providers: [{\n        provide: TIME_LOCALE,\n        useValue: locale\n      }, {\n        provide: NUMBERING_SYSTEM,\n        useValue: numberingSystem\n      }]\n    };\n  }\n\n}\n\nNgxMaterialTimepickerModule.ɵfac = function NgxMaterialTimepickerModule_Factory(t) {\n  return new (t || NgxMaterialTimepickerModule)();\n};\n\nNgxMaterialTimepickerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxMaterialTimepickerModule\n});\nNgxMaterialTimepickerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, FormsModule, ReactiveFormsModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaterialTimepickerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule, ReactiveFormsModule],\n      exports: [NgxMaterialTimepickerComponent, NgxMaterialTimepickerToggleComponent, NgxTimepickerFieldComponent, TimepickerDirective, NgxMaterialTimepickerToggleIconDirective, NgxMaterialTimepickerThemeDirective],\n      declarations: [NgxMaterialTimepickerComponent, NgxMaterialTimepicker24HoursFaceComponent, NgxMaterialTimepicker12HoursFaceComponent, NgxMaterialTimepickerMinutesFaceComponent, NgxMaterialTimepickerFaceComponent, NgxMaterialTimepickerToggleComponent, NgxMaterialTimepickerButtonComponent, NgxMaterialTimepickerDialComponent, NgxMaterialTimepickerDialControlComponent, NgxMaterialTimepickerPeriodComponent, TimeFormatterPipe, TimepickerDirective, OverlayDirective, NgxMaterialTimepickerToggleIconDirective, AutofocusDirective, MinutesFormatterPipe, NgxMaterialTimepickerThemeDirective, NgxTimepickerFieldComponent, NgxTimepickerTimeControlComponent, NgxTimepickerPeriodSelectorComponent, TimeLocalizerPipe, TimeParserPipe, ActiveHourPipe, ActiveMinutePipe, NgxMaterialTimepickerContainerComponent, NgxMaterialTimepickerContentComponent, AppendToInputDirective]\n    }]\n  }], null, null);\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NUMBERING_SYSTEM, NgxMaterialTimepickerComponent, NgxMaterialTimepickerModule, NgxMaterialTimepickerThemeDirective, NgxMaterialTimepickerToggleComponent, NgxMaterialTimepickerToggleIconDirective, NgxTimepickerFieldComponent, TIME_LOCALE, TimepickerDirective };","map":{"version":3,"sources":["E:/LS_Projects/HVS_Projects/HVSWebsite/LS_ERP/LS.HRM/ClientApp/node_modules/ngx-material-timepicker/fesm2015/ngx-material-timepicker.js"],"names":["i0","Injectable","InjectionToken","Directive","Input","HostListener","Component","Pipe","Inject","Optional","EventEmitter","ViewChild","Output","ChangeDetectionStrategy","ContentChild","NgModule","i1","DOCUMENT","CommonModule","BehaviorSubject","Subject","merge","shareReplay","tap","debounceTime","distinctUntilChanged","filter","takeUntil","map","trigger","transition","style","animate","sequence","DateTime","Info","i4","FormControl","NG_VALUE_ACCESSOR","FormsModule","ReactiveFormsModule","TimeUnit","TimePeriod","TimeFormat","isSameOrAfter","time","compareWith","unit","hour","hasSame","valueOf","isSameOrBefore","isBetween","before","after","isDigit","e","some","n","keyCode","ctrlKey","metaKey","TimeAdapter","parseTime","opts","numberingSystem","locale","getLocaleOptionsByTime","isPeriodExist","split","length","timeMask","TWELVE_SHORT","TWENTY_FOUR_SHORT","fromFormat","formatTime","format","parsedTime","setLocale","DEFAULT_LOCALE","isValid","toLocaleString","Object","assign","TIME_SIMPLE","hour12","DEFAULT_NUMBERING_SYSTEM","replace","toISOTime","includeOffset","suppressMilliseconds","suppressSeconds","toLocaleTimeString","DEFAULT_FORMAT","hourCycle","timeFormat","localOpts","isTimeAvailable","min","max","granularity","minutesGap","convertedTime","minutes","minute","Error","isAfter","isBefore","between","isAvailable","formatHour","currentHour","period","AM","PM","fromDateTimeToString","TWENTY_FOUR","TWELVE","reconfigure","toFormat","localeConfig","defaultConfig","isNaN","parseInt","DEFAULT_HOUR","angle","DEFAULT_MINUTE","NgxMaterialTimepickerService","constructor","hourSubject","minuteSubject","periodSubject","next","selectedHour","asObservable","selectedMinute","isPeriodValid","selectedPeriod","setDefaultTimeIfAvailable","setDefaultTime","console","error","getFullTime","getValue","trim","defaultTime","toJSDate","fromJSDate","substr","toUpperCase","getHours","formatHourByPeriod","getMinutes","resetTime","ɵfac","ɵprov","type","args","providedIn","TIME_LOCALE","factory","NUMBERING_SYSTEM","NgxMaterialTimepickerEventService","backdropClickSubject","keydownEventSubject","backdropClick","pipe","bufferSize","refCount","keydownEvent","dispatchEvent","event","AppendToInputDirective","elementRef","renderer","element","nativeElement","inputCords","inputElement","getBoundingClientRect","direction","height","offsetHeight","bottom","top","_inputCords","isElementFit","window","innerHeight","isTop","isCenter","ngAfterViewInit","_direction","append","changePosition","y","defineElementYByDirection","setStyle","left","value","inputTop","inputBottom","ElementRef","Renderer2","ɵdir","selector","NgxMaterialTimepickerContentComponent","ɵcmp","NgIf","NgTemplateOutlet","templateUrl","appendToInput","TimepickerTimeUtils","Array","fill","v","i","angleStep","disableHours","hours","config","currentTime","fromObject","disabled","gap","minutesCount","push","disableMinutes","TimeLocalizerPipe","transform","timeUnit","isKeyboardEnabled","HOUR","MINUTE","timeMeasure","_a","ɵpipe","name","undefined","decorators","TimeParserPipe","String","AutofocusDirective","document","activeElement","ngOnChanges","isFocusActive","setTimeout","focus","preventScroll","ngOnDestroy","NgxMaterialTimepickerDialControlComponent","timeParserPipe","timeLocalizerPipe","timeUnitChanged","timeChanged","focused","unfocused","selectedTime","timeList","find","t","ngOnInit","isEditable","timeControl","formatTimeForUI","valueChanges","updateInputValue","slice","isTimeDisabledToChange","toString","subscribe","updateTime","saveTimeAndChangeTimeUnit","preventDefault","previousTime","onKeydown","changeTimeByArrow","ARROW_UP","ARROW_DOWN","isTimeUnavailable","editableTimeTmpl","DefaultValueAccessor","NgClass","NgControlStatus","NgModel","FormControlDirective","styleUrls","providers","isActive","nextTime","isNumber","test","NgxMaterialTimepickerPeriodComponent","timePeriod","isPeriodAvailable","periodChanged","changePeriod","isSwitchPeriodAvailable","animationDone","getDisabledTimeByPeriod","every","activeTimeUnit","minTime","maxTime","opacity","animations","meridiems","NgxMaterialTimepickerDialComponent","hourChanged","minuteChanged","changes","currentValue","changeTimeUnit","changeHour","changeMinute","showHint","isHintVisible","hideHint","changeDetection","OnPush","editableHintTmpl","hoursOnly","NgxMaterialTimepickerHoursFace","hourChange","hourSelected","hoursList","onTimeSelected","ActiveHourPipe","isClockFaceDisabled","ActiveMinutePipe","currentMinute","defaultGap","MinutesFormatterPipe","CLOCK_HAND_STYLES","small","large","NgxMaterialTimepickerFaceComponent","innerClockFaceSize","timeChange","timeSelected","setClockHandPosition","addTouchEvents","faceTimeChanges","selectedTimeChanges","faceTime","selectAvailableTime","trackByTime","_","onMousedown","isStarted","selectTime","MouseEvent","clockFaceCords","clockFace","centerX","width","centerY","arctangent","Math","atan","abs","clientX","clientY","PI","circleAngle","countAngleByCords","isInnerClockChosen","isInnerClockFace","roundedAngle","roundAngle","val","onMouseup","removeTouchEvents","touchStartHandler","bind","touchEndHandler","addEventListener","removeEventListener","decreaseClockHand","increaseClockHand","clockHand","availableTime","x0","y0","x","sqrt","pow","NgForOf","NgStyle","SlicePipe","static","step","round","currentAngle","NgxMaterialTimepicker24HoursFaceComponent","ngAfterContentInit","NgxMaterialTimepicker12HoursFaceComponent","NgxMaterialTimepickerMinutesFaceComponent","minutesList","minuteChange","NgxMaterialTimepickerButtonComponent","OverlayDirective","eventService","onClick","preventClick","NgxMaterialTimepickerThemeDirective","theme","setTheme","hasOwnProperty","prop","setProperty","camelCaseToDash","myStr","toLowerCase","AnimationState","NgxMaterialTimepickerContainerComponent","timepickerService","unsubscribe","_defaultTime","stopPropagation","animationState","disableAnimation","ENTER","defineTime","timepickerBaseRef","timeUpdated","onHourChange","onTimeChange","onHourSelected","onMinuteChange","setTime","timeSet","close","LEAVE","phaseName","toState","complete","emit","NgSwitch","NgSwitchCase","AsyncPipe","DomService","cfr","appRef","injector","appendTimepickerToBody","timepicker","componentRef","resolveComponentFactory","create","keys","forEach","key","instance","attachView","hostView","domElement","rootNodes","body","appendChild","destroyTimepicker","destroy","detachView","ComponentFactoryResolver","ApplicationRef","Injector","ESCAPE","NgxMaterialTimepickerComponent","domService","isEsc","opened","closed","ngxMaterialTimepickerTheme","warn","_ngxMaterialTimepickerTheme","_format","timepickerInput","floor","_minutesGap","registerInput","input","open","cancelBtnTmpl","confirmBtnTmpl","enableKeyboardInput","preventOverlayClick","timepickerClass","subscribeToEvents","unsubscribeFromEvents","template","NgxMaterialTimepickerToggleIconDirective","NgxMaterialTimepickerToggleComponent","_disabled","customIcon","TimepickerDirective","_value","timepickerSubscriptions","onTouched","onChange","isDynamicallyChanged","previousFormat","_timepicker","log","_min","_max","picker","registerTimepicker","setTimeIfAvailable","updateValue","disableClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","s","provide","useExisting","multi","host","TimeFormatterPipe","NgxTimepickerTimeControlComponent","timeParser","isSelectedTimeDisabled","setAvailableTime","changeTime","char","fromCharCode","concatTime","changeTimeIfValid","increase","decrease","preventTyping","getAvailableTime","getNextAvailableTime","getPrevAvailableTime","onFocus","isFocused","onBlur","onModelChange","timeString","index","timeCollection","maxValue","currentTimeIndex","findIndex","MaxLengthValidator","placeholder","NgxTimepickerPeriodSelectorComponent","periodSelected","periods","localizedPeriod","indexOf","isOpened","select","NgxTimepickerFieldComponent","minHour","maxHour","buttonAlign","unsubscribe$","isFirstTimeChange","timepickerTime","isDefaultTime","initTime","isTimeRangeSet","hour$","clockTime","changeDefaultTimeValue","updateAvailableMinutes","minute$","isChangePeriodDisabled","isPeriodDisabled","updateAvailableTime","h","m","onTimeSet","emitLocalTimeChange","localTime","clockFaceTime","updateAvailableHours","formattedTime","isDefaultTimeAvailable","toggleIcon","clockTheme","controlOnly","NgxMaterialTimepickerModule","setOpts","ngModule","useValue","ɵmod","ɵinj","imports","exports","declarations"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\r\nimport { Injectable, InjectionToken, Directive, Input, HostListener, Component, Pipe, Inject, Optional, EventEmitter, ViewChild, Output, ChangeDetectionStrategy, ContentChild, NgModule } from '@angular/core';\r\nimport * as i1 from '@angular/common';\r\nimport { DOCUMENT, CommonModule } from '@angular/common';\r\nimport { BehaviorSubject, Subject, merge } from 'rxjs';\r\nimport { shareReplay, tap, debounceTime, distinctUntilChanged, filter, takeUntil, map } from 'rxjs/operators';\r\nimport { trigger, transition, style, animate, sequence } from '@angular/animations';\r\nimport { DateTime, Info } from 'luxon';\r\nimport * as i4 from '@angular/forms';\r\nimport { FormControl, NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nvar TimeUnit;\r\n(function (TimeUnit) {\r\n    TimeUnit[TimeUnit[\"HOUR\"] = 0] = \"HOUR\";\r\n    TimeUnit[TimeUnit[\"MINUTE\"] = 1] = \"MINUTE\";\r\n})(TimeUnit || (TimeUnit = {}));\r\n\r\nvar TimePeriod;\r\n(function (TimePeriod) {\r\n    TimePeriod[\"AM\"] = \"AM\";\r\n    TimePeriod[\"PM\"] = \"PM\";\r\n})(TimePeriod || (TimePeriod = {}));\r\n\r\nvar TimeFormat;\r\n(function (TimeFormat) {\r\n    TimeFormat[\"TWELVE\"] = \"hh:mm a\";\r\n    TimeFormat[\"TWELVE_SHORT\"] = \"h:m a\";\r\n    TimeFormat[\"TWENTY_FOUR\"] = \"HH:mm\";\r\n    TimeFormat[\"TWENTY_FOUR_SHORT\"] = \"H:m\";\r\n})(TimeFormat || (TimeFormat = {}));\r\n\r\nfunction isSameOrAfter(time, compareWith, unit = 'minutes') {\r\n    if (unit === 'hours') {\r\n        return time.hour >= compareWith.hour;\r\n    }\r\n    if (unit === 'minutes') {\r\n        return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\r\n    }\r\n}\r\nfunction isSameOrBefore(time, compareWith, unit = 'minutes') {\r\n    if (unit === 'hours') {\r\n        return time.hour <= compareWith.hour;\r\n    }\r\n    if (unit === 'minutes') {\r\n        return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\r\n    }\r\n}\r\nfunction isBetween(time, before, after, unit = 'minutes') {\r\n    if (unit === 'hours') {\r\n        return isSameOrBefore(time, after, unit) && isSameOrAfter(time, before, unit);\r\n    }\r\n    if (unit === 'minutes') {\r\n        return isSameOrBefore(time, after) && isSameOrAfter(time, before);\r\n    }\r\n}\r\nfunction isDigit(e) {\r\n    // Allow: backspace, delete, tab, escape, enter\r\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\r\n        // Allow: Ctrl/cmd+A\r\n        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: Ctrl/cmd+C\r\n        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: Ctrl/cmd+X\r\n        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: home, end, left, right, up, down\r\n        (e.keyCode >= 35 && e.keyCode <= 40)) {\r\n        return true;\r\n    }\r\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\r\n}\r\n\r\n// @dynamic\r\nclass TimeAdapter {\r\n    static parseTime(time, opts) {\r\n        const { numberingSystem, locale } = TimeAdapter.getLocaleOptionsByTime(time, opts);\r\n        const isPeriodExist = time.split(' ').length === 2;\r\n        const timeMask = isPeriodExist ? TimeFormat.TWELVE_SHORT : TimeFormat.TWENTY_FOUR_SHORT;\r\n        return DateTime.fromFormat(time, timeMask, { numberingSystem, locale });\r\n    }\r\n    static formatTime(time, opts) {\r\n        if (!time) {\r\n            return 'Invalid Time';\r\n        }\r\n        const { format } = opts;\r\n        const parsedTime = TimeAdapter.parseTime(time, opts).setLocale(TimeAdapter.DEFAULT_LOCALE);\r\n        if (!parsedTime.isValid) {\r\n            return null;\r\n        }\r\n        if (format !== 24) {\r\n            return parsedTime.toLocaleString(Object.assign(Object.assign({}, DateTime.TIME_SIMPLE), { hour12: format !== 24, numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM })).replace(/\\u200E/g, '').replace(/\\u202F/g, ' ');\r\n        }\r\n        return parsedTime.toISOTime({\r\n            includeOffset: false,\r\n            suppressMilliseconds: true,\r\n            suppressSeconds: true\r\n        }).replace(/\\u200E/g, '').replace(/\\u202F/g, ' ');\r\n    }\r\n    static toLocaleTimeString(time, opts = {}) {\r\n        const { format = TimeAdapter.DEFAULT_FORMAT, locale = TimeAdapter.DEFAULT_LOCALE } = opts;\r\n        const hourCycle = format === 24 ? 'h23' : 'h12';\r\n        const timeFormat = Object.assign(Object.assign({}, DateTime.TIME_SIMPLE), { hourCycle });\r\n        const timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;\r\n        const localOpts = Object.assign({ locale: opts.locale, numberingSystem: opts.numberingSystem }, timeFormat);\r\n        return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(localOpts).replace(/\\u202F/g, ' ');\r\n    }\r\n    static isTimeAvailable(time, min, max, granularity, minutesGap, format) {\r\n        if (!time) {\r\n            return;\r\n        }\r\n        const convertedTime = this.parseTime(time, { format });\r\n        const minutes = convertedTime.minute;\r\n        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\r\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\r\n        }\r\n        const isAfter = (min && !max)\r\n            && isSameOrAfter(convertedTime, min, granularity);\r\n        const isBefore = (max && !min)\r\n            && isSameOrBefore(convertedTime, max, granularity);\r\n        const between = (min && max)\r\n            && isBetween(convertedTime, min, max, granularity);\r\n        const isAvailable = !min && !max;\r\n        return isAfter || isBefore || between || isAvailable;\r\n    }\r\n    /***\r\n     *  Format hour according to time format (12 or 24)\r\n     */\r\n    static formatHour(currentHour, format, period) {\r\n        if (format === 24) {\r\n            return currentHour;\r\n        }\r\n        const hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\r\n        if (period === TimePeriod.AM && hour === 12) {\r\n            return 0;\r\n        }\r\n        else if (period === TimePeriod.PM && hour === 24) {\r\n            return 12;\r\n        }\r\n        return hour;\r\n    }\r\n    static fromDateTimeToString(time, format) {\r\n        const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\r\n        return time.reconfigure({\r\n            numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM,\r\n            locale: TimeAdapter.DEFAULT_LOCALE\r\n        }).toFormat(timeFormat).replace(/\\u202F/g, ' ');\r\n    }\r\n    static getLocaleOptionsByTime(time, opts) {\r\n        const localeConfig = { numberingSystem: opts.numberingSystem, locale: opts.locale };\r\n        const defaultConfig = { numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM, locale: TimeAdapter.DEFAULT_LOCALE };\r\n        return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;\r\n    }\r\n}\r\nTimeAdapter.DEFAULT_FORMAT = 12;\r\nTimeAdapter.DEFAULT_LOCALE = 'en-US';\r\nTimeAdapter.DEFAULT_NUMBERING_SYSTEM = 'latn';\r\n\r\nconst DEFAULT_HOUR = {\r\n    time: 12,\r\n    angle: 360\r\n};\r\nconst DEFAULT_MINUTE = {\r\n    time: 0,\r\n    angle: 360\r\n};\r\nclass NgxMaterialTimepickerService {\r\n    constructor() {\r\n        this.hourSubject = new BehaviorSubject(DEFAULT_HOUR);\r\n        this.minuteSubject = new BehaviorSubject(DEFAULT_MINUTE);\r\n        this.periodSubject = new BehaviorSubject(TimePeriod.AM);\r\n    }\r\n    set hour(hour) {\r\n        this.hourSubject.next(hour);\r\n    }\r\n    get selectedHour() {\r\n        return this.hourSubject.asObservable();\r\n    }\r\n    set minute(minute) {\r\n        this.minuteSubject.next(minute);\r\n    }\r\n    get selectedMinute() {\r\n        return this.minuteSubject.asObservable();\r\n    }\r\n    set period(period) {\r\n        const isPeriodValid = (period === TimePeriod.AM) || (period === TimePeriod.PM);\r\n        if (isPeriodValid) {\r\n            this.periodSubject.next(period);\r\n        }\r\n    }\r\n    get selectedPeriod() {\r\n        return this.periodSubject.asObservable();\r\n    }\r\n    setDefaultTimeIfAvailable(time, min, max, format, minutesGap) {\r\n        /* Workaround to double error message*/\r\n        try {\r\n            if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes', minutesGap)) {\r\n                this.setDefaultTime(time, format);\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n    getFullTime(format) {\r\n        const selectedHour = this.hourSubject.getValue().time;\r\n        const selectedMinute = this.minuteSubject.getValue().time;\r\n        const hour = selectedHour != null ? selectedHour : DEFAULT_HOUR.time;\r\n        const minute = selectedMinute != null ? selectedMinute : DEFAULT_MINUTE.time;\r\n        const period = format === 12 ? this.periodSubject.getValue() : '';\r\n        const time = `${hour}:${minute} ${period}`.trim();\r\n        return TimeAdapter.formatTime(time, { format });\r\n    }\r\n    setDefaultTime(time, format) {\r\n        const defaultTime = TimeAdapter.parseTime(time, { format }).toJSDate();\r\n        if (DateTime.fromJSDate(defaultTime).isValid) {\r\n            const period = time.substr(time.length - 2).toUpperCase();\r\n            const hour = defaultTime.getHours();\r\n            this.hour = Object.assign(Object.assign({}, DEFAULT_HOUR), { time: formatHourByPeriod(hour, period) });\r\n            this.minute = Object.assign(Object.assign({}, DEFAULT_MINUTE), { time: defaultTime.getMinutes() });\r\n            this.period = period;\r\n        }\r\n        else {\r\n            this.resetTime();\r\n        }\r\n    }\r\n    resetTime() {\r\n        this.hour = Object.assign({}, DEFAULT_HOUR);\r\n        this.minute = Object.assign({}, DEFAULT_MINUTE);\r\n        this.period = TimePeriod.AM;\r\n    }\r\n}\r\nNgxMaterialTimepickerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nNgxMaterialTimepickerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }] });\r\n/***\r\n *  Format hour in 24hours format to meridian (AM or PM) format\r\n */\r\nfunction formatHourByPeriod(hour, period) {\r\n    switch (period) {\r\n        case TimePeriod.AM:\r\n            return hour === 0 ? 12 : hour;\r\n        case TimePeriod.PM:\r\n            return hour === 12 ? 12 : hour - 12;\r\n        default:\r\n            return hour;\r\n    }\r\n}\r\n\r\nconst TIME_LOCALE = new InjectionToken('TimeLocale', {\r\n    providedIn: 'root',\r\n    factory: () => TimeAdapter.DEFAULT_LOCALE\r\n});\r\nconst NUMBERING_SYSTEM = new InjectionToken('NumberingSystem', {\r\n    providedIn: 'root',\r\n    factory: () => TimeAdapter.DEFAULT_NUMBERING_SYSTEM\r\n});\r\n\r\nclass NgxMaterialTimepickerEventService {\r\n    constructor() {\r\n        this.backdropClickSubject = new Subject();\r\n        this.keydownEventSubject = new Subject();\r\n    }\r\n    get backdropClick() {\r\n        return this.backdropClickSubject.asObservable().pipe(shareReplay({ bufferSize: 1, refCount: true }));\r\n    }\r\n    get keydownEvent() {\r\n        return this.keydownEventSubject.asObservable().pipe(shareReplay({ bufferSize: 1, refCount: true }));\r\n    }\r\n    dispatchEvent(event) {\r\n        switch (event.type) {\r\n            case 'click':\r\n                this.backdropClickSubject.next(event);\r\n                break;\r\n            case 'keydown':\r\n                this.keydownEventSubject.next(event);\r\n                break;\r\n            default:\r\n                throw new Error('no such event type');\r\n        }\r\n    }\r\n}\r\nNgxMaterialTimepickerEventService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerEventService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nNgxMaterialTimepickerEventService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerEventService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerEventService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }] });\r\n\r\nclass AppendToInputDirective {\r\n    constructor(elementRef, renderer) {\r\n        this.renderer = renderer;\r\n        this.element = elementRef.nativeElement;\r\n    }\r\n    get inputCords() {\r\n        return this.inputElement.getBoundingClientRect();\r\n    }\r\n    get direction() {\r\n        const height = this.element.offsetHeight;\r\n        const { bottom, top } = this._inputCords;\r\n        const isElementFit = (window && window.innerHeight) - bottom < height;\r\n        const isTop = isElementFit && top > height;\r\n        const isCenter = isElementFit && top < height;\r\n        if (isTop) {\r\n            return 'top';\r\n        }\r\n        else if (isCenter) {\r\n            return 'center';\r\n        }\r\n        return 'bottom';\r\n    }\r\n    ngAfterViewInit() {\r\n        this._inputCords = this.inputCords;\r\n        this._direction = this.direction;\r\n        this.append();\r\n    }\r\n    changePosition() {\r\n        const { bottom, top } = this.inputCords;\r\n        const y = this.defineElementYByDirection(top, bottom);\r\n        this.setStyle('top', `${y}px`);\r\n    }\r\n    append() {\r\n        const { left, bottom, top } = this._inputCords;\r\n        const y = this.defineElementYByDirection(top, bottom);\r\n        this.setStyle('position', 'fixed');\r\n        this.setStyle('left', `${left}px`);\r\n        this.setStyle('top', `${y}px`);\r\n    }\r\n    setStyle(style, value) {\r\n        this.renderer.setStyle(this.element, style, value);\r\n    }\r\n    defineElementYByDirection(inputTop, inputBottom) {\r\n        if (this._direction === 'top') {\r\n            return inputTop - this.element.offsetHeight;\r\n        }\r\n        else if (this._direction === 'center') {\r\n            return inputTop - (this.element.offsetHeight / 2);\r\n        }\r\n        return inputBottom;\r\n    }\r\n}\r\nAppendToInputDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: AppendToInputDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });\r\nAppendToInputDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.17\", type: AppendToInputDirective, selector: \"[ngxAppendToInput]\", inputs: { inputElement: [\"ngxAppendToInput\", \"inputElement\"] }, host: { listeners: { \"window:scroll\": \"changePosition()\" } }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: AppendToInputDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[ngxAppendToInput]'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { inputElement: [{\r\n                type: Input,\r\n                args: ['ngxAppendToInput']\r\n            }], changePosition: [{\r\n                type: HostListener,\r\n                args: ['window:scroll']\r\n            }] } });\r\n\r\nclass NgxMaterialTimepickerContentComponent {\r\n}\r\nNgxMaterialTimepickerContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMaterialTimepickerContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: NgxMaterialTimepickerContentComponent, selector: \"ngx-material-timepicker-content\", inputs: { appendToInput: \"appendToInput\", inputElement: \"inputElement\" }, ngImport: i0, template: \"<div [ngxAppendToInput]=\\\"inputElement\\\" *ngIf=\\\"appendToInput;else timepickerModal\\\">\\n    <!--suppress HtmlUnknownAttribute -->\\n    <ng-container *ngTemplateOutlet=\\\"timepickerOutlet\\\"></ng-container>\\n</div>\\n\\n<ng-template #timepickerModal>\\n    <!--suppress HtmlUnknownAttribute -->\\n    <ng-container *ngTemplateOutlet=\\\"timepickerOutlet\\\"></ng-container>\\n</ng-template>\\n\\n<ng-template #timepickerOutlet>\\n    <ng-content></ng-content>\\n</ng-template>\\n\", directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: AppendToInputDirective, selector: \"[ngxAppendToInput]\", inputs: [\"ngxAppendToInput\"] }, { type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerContentComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-material-timepicker-content',\r\n                    templateUrl: './ngx-material-timepicker-content.component.html',\r\n                }]\r\n        }], propDecorators: { appendToInput: [{\r\n                type: Input\r\n            }], inputElement: [{\r\n                type: Input\r\n            }] } });\r\n\r\n// @dynamic\r\nclass TimepickerTimeUtils {\r\n    static getHours(format) {\r\n        return Array(format).fill(1).map((v, i) => {\r\n            const angleStep = 30;\r\n            const time = v + i;\r\n            const angle = angleStep * time;\r\n            return { time: time === 24 ? 0 : time, angle };\r\n        });\r\n    }\r\n    static disableHours(hours, config) {\r\n        if (config.min || config.max) {\r\n            return hours.map(value => {\r\n                const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(value.time, config.format, config.period);\r\n                const currentTime = DateTime.fromObject({ hour }).toFormat(TimeFormat.TWELVE);\r\n                return Object.assign(Object.assign({}, value), { disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours') });\r\n            });\r\n        }\r\n        return hours;\r\n    }\r\n    static getMinutes(gap = 1) {\r\n        const minutesCount = 60;\r\n        const angleStep = 360 / minutesCount;\r\n        const minutes = [];\r\n        for (let i = 0; i < minutesCount; i++) {\r\n            const angle = angleStep * i;\r\n            if (i % gap === 0) {\r\n                minutes.push({ time: i, angle: angle !== 0 ? angle : 360 });\r\n            }\r\n        }\r\n        return minutes;\r\n    }\r\n    static disableMinutes(minutes, selectedHour, config) {\r\n        if (config.min || config.max) {\r\n            const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\r\n            return minutes.map(value => {\r\n                const currentTime = DateTime.fromObject({ hour, minute: value.time }).toFormat(TimeFormat.TWELVE);\r\n                return Object.assign(Object.assign({}, value), { disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes') });\r\n            });\r\n        }\r\n        return minutes;\r\n    }\r\n}\r\n\r\nclass TimeLocalizerPipe {\r\n    constructor(locale) {\r\n        this.locale = locale;\r\n    }\r\n    transform(time, timeUnit, isKeyboardEnabled = false) {\r\n        if (time == null || time === '') {\r\n            return '';\r\n        }\r\n        switch (timeUnit) {\r\n            case TimeUnit.HOUR: {\r\n                const format = (time === 0 || isKeyboardEnabled) ? 'HH' : 'H';\r\n                return this.formatTime('hour', time, format);\r\n            }\r\n            case TimeUnit.MINUTE:\r\n                return this.formatTime('minute', time, 'mm');\r\n            default:\r\n                throw new Error(`There is no Time Unit with type ${timeUnit}`);\r\n        }\r\n    }\r\n    formatTime(timeMeasure, time, format) {\r\n        try {\r\n            return DateTime.fromObject({ [timeMeasure]: +time }).setLocale(this.locale).toFormat(format);\r\n        }\r\n        catch (_a) {\r\n            throw new Error(`Cannot format provided time - ${time} to locale - ${this.locale}`);\r\n        }\r\n    }\r\n}\r\nTimeLocalizerPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TimeLocalizerPipe, deps: [{ token: TIME_LOCALE }], target: i0.ɵɵFactoryTarget.Pipe });\r\nTimeLocalizerPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TimeLocalizerPipe, name: \"timeLocalizer\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TimeLocalizerPipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'timeLocalizer'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [TIME_LOCALE]\r\n                }] }]; } });\r\n\r\nclass TimeParserPipe {\r\n    constructor(locale, numberingSystem) {\r\n        this.locale = locale;\r\n        this.numberingSystem = numberingSystem;\r\n    }\r\n    transform(time, timeUnit = TimeUnit.HOUR) {\r\n        if (time == null || time === '') {\r\n            return '';\r\n        }\r\n        if (!isNaN(+time)) {\r\n            return time;\r\n        }\r\n        if (timeUnit === TimeUnit.MINUTE) {\r\n            return this.parseTime(time, 'm', 'minute');\r\n        }\r\n        return this.parseTime(time, 'H', 'hour');\r\n    }\r\n    parseTime(time, format, timeMeasure) {\r\n        const parsedTime = DateTime.fromFormat(String(time), format, {\r\n            numberingSystem: this.numberingSystem,\r\n            locale: this.locale\r\n        })[timeMeasure];\r\n        if (!isNaN(parsedTime)) {\r\n            return parsedTime;\r\n        }\r\n        throw new Error(`Cannot parse time - ${time}`);\r\n    }\r\n}\r\nTimeParserPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TimeParserPipe, deps: [{ token: TIME_LOCALE }, { token: NUMBERING_SYSTEM }], target: i0.ɵɵFactoryTarget.Pipe });\r\nTimeParserPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TimeParserPipe, name: \"timeParser\" });\r\nTimeParserPipe.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TimeParserPipe });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TimeParserPipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'timeParser'\r\n                }]\r\n        }, {\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [TIME_LOCALE]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [NUMBERING_SYSTEM]\r\n                }] }]; } });\r\n\r\nclass AutofocusDirective {\r\n    constructor(element, document) {\r\n        this.element = element;\r\n        this.document = document;\r\n        this.activeElement = this.document.activeElement;\r\n    }\r\n    ngOnChanges() {\r\n        if (this.isFocusActive) {\r\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n            setTimeout(() => this.element.nativeElement.focus({ preventScroll: true }));\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n        setTimeout(() => this.activeElement.focus({ preventScroll: true }));\r\n    }\r\n}\r\nAutofocusDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: AutofocusDirective, deps: [{ token: i0.ElementRef }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\r\nAutofocusDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.17\", type: AutofocusDirective, selector: \"[timepickerAutofocus]\", inputs: { isFocusActive: [\"timepickerAutofocus\", \"isFocusActive\"] }, usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: AutofocusDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[timepickerAutofocus]'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }]; }, propDecorators: { isFocusActive: [{\r\n                type: Input,\r\n                args: ['timepickerAutofocus']\r\n            }] } });\r\n\r\n/* tslint:disable:triple-equals */\r\nclass NgxMaterialTimepickerDialControlComponent {\r\n    constructor(timeParserPipe, timeLocalizerPipe) {\r\n        this.timeParserPipe = timeParserPipe;\r\n        this.timeLocalizerPipe = timeLocalizerPipe;\r\n        this.timeUnitChanged = new EventEmitter();\r\n        this.timeChanged = new EventEmitter();\r\n        this.focused = new EventEmitter();\r\n        this.unfocused = new EventEmitter();\r\n    }\r\n    get selectedTime() {\r\n        if (!!this.time) {\r\n            return this.timeList.find(t => t.time === +this.time);\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        if (this.isEditable) {\r\n            this.timeControl = new FormControl({ value: this.formatTimeForUI(this.time), disabled: this.disabled });\r\n            this.timeControl.valueChanges.pipe(tap((value) => {\r\n                if (value.length > 2) {\r\n                    this.updateInputValue(value.slice(-1));\r\n                }\r\n            }), debounceTime(500), distinctUntilChanged(), filter((value) => !isTimeDisabledToChange(this.time, value, this.timeList)), tap((value) => this.time = this.timeParserPipe.transform(value, this.timeUnit).toString())).subscribe(() => this.updateTime());\r\n        }\r\n    }\r\n    saveTimeAndChangeTimeUnit(event, unit) {\r\n        event.preventDefault();\r\n        this.previousTime = this.time;\r\n        this.timeUnitChanged.next(unit);\r\n        this.focused.next();\r\n    }\r\n    updateTime() {\r\n        const time = this.selectedTime;\r\n        if (time) {\r\n            this.timeChanged.next(time);\r\n            this.previousTime = time.time;\r\n            if (this.isEditable) {\r\n                this.updateInputValue(this.formatTimeForUI(time.time));\r\n            }\r\n        }\r\n    }\r\n    onKeydown(e) {\r\n        if (!isDigit(e)) {\r\n            e.preventDefault();\r\n        }\r\n        else {\r\n            this.changeTimeByArrow(e.keyCode);\r\n        }\r\n    }\r\n    changeTimeByArrow(keyCode) {\r\n        const ARROW_UP = 38;\r\n        const ARROW_DOWN = 40;\r\n        let time;\r\n        if (keyCode === ARROW_UP) {\r\n            time = String(+this.time + (this.minutesGap || 1));\r\n        }\r\n        else if (keyCode === ARROW_DOWN) {\r\n            time = String(+this.time - (this.minutesGap || 1));\r\n        }\r\n        if (!isTimeUnavailable(time, this.timeList)) {\r\n            this.time = time;\r\n            this.updateTime();\r\n        }\r\n    }\r\n    formatTimeForUI(value) {\r\n        const parsedTime = this.timeParserPipe.transform(value, this.timeUnit).toString();\r\n        return this.timeLocalizerPipe.transform(parsedTime, this.timeUnit, true);\r\n    }\r\n    updateInputValue(value) {\r\n        this.editableTimeTmpl.nativeElement.value = value;\r\n    }\r\n}\r\nNgxMaterialTimepickerDialControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerDialControlComponent, deps: [{ token: TimeParserPipe }, { token: TimeLocalizerPipe }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMaterialTimepickerDialControlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: NgxMaterialTimepickerDialControlComponent, selector: \"ngx-material-timepicker-dial-control\", inputs: { timeList: \"timeList\", timeUnit: \"timeUnit\", time: \"time\", isActive: \"isActive\", isEditable: \"isEditable\", minutesGap: \"minutesGap\", disabled: \"disabled\" }, outputs: { timeUnitChanged: \"timeUnitChanged\", timeChanged: \"timeChanged\", focused: \"focused\", unfocused: \"unfocused\" }, providers: [TimeParserPipe, TimeLocalizerPipe], viewQueries: [{ propertyName: \"editableTimeTmpl\", first: true, predicate: [\"editableTimeTmpl\"], descendants: true }], ngImport: i0, template: \"<!--suppress HtmlFormInputWithoutLabel, HtmlUnknownAttribute -->\\n<input class=\\\"timepicker-dial__control timepicker-dial__item\\\"\\n       [ngClass]=\\\"{'timepicker-dial__item_active': isActive}\\\"\\n       [ngModel]=\\\"time | timeLocalizer: timeUnit\\\"\\n       (ngModelChange)=\\\"time = $event\\\"\\n       [disabled]=\\\"disabled\\\"\\n       (input)=\\\"updateTime()\\\" (focus)=\\\"saveTimeAndChangeTimeUnit($event, timeUnit)\\\"\\n       readonly [timepickerAutofocus]=\\\"isActive\\\"\\n       *ngIf=\\\"!isEditable;else editableTemplate\\\">\\n\\n<ng-template #editableTemplate>\\n    <!--suppress HtmlFormInputWithoutLabel, HtmlUnknownAttribute -->\\n    <input class=\\\"timepicker-dial__control timepicker-dial__item timepicker-dial__control_editable\\\"\\n           #editableTimeTmpl\\n           [formControl]=\\\"timeControl\\\"\\n           [ngClass]=\\\"{'timepicker-dial__item_active': isActive}\\\"\\n           [timepickerAutofocus]=\\\"isActive\\\"\\n           (focus)=\\\"saveTimeAndChangeTimeUnit($event, timeUnit)\\\"\\n           (keydown)=\\\"onKeydown($event)\\\">\\n</ng-template>\\n\", styles: [\".timepicker-dial__item{cursor:pointer;color:#ffffff80;font-family:\\\"Roboto\\\",sans-serif}@supports (font-family: var(--primary-font-family)){.timepicker-dial__item{font-family:var(--primary-font-family);color:var(--dial-inactive-color)}}.timepicker-dial__item_active{color:#fff}@supports (color: var(--dial-active-color)){.timepicker-dial__item_active{color:var(--dial-active-color)}}.timepicker-dial__control{border:none;background-color:transparent;font-size:50px;width:60px;padding:0;border-radius:3px;text-align:right}.timepicker-dial__control_editable:focus{color:#00bfff;background-color:#fff;outline:deepskyblue}@supports (color: var(--dial-editable-active-color)){.timepicker-dial__control_editable:focus{color:var(--dial-editable-active-color)}}@supports (background-color: var(--dial-editable-background-color)){.timepicker-dial__control_editable:focus{background-color:var(--dial-editable-background-color)}}@supports (outline: var(--dial-editable-active-color)){.timepicker-dial__control_editable:focus{outline:var(--dial-editable-active-color)}}.timepicker-dial__control:disabled{cursor:default}.timepicker-dial__control:focus-visible{outline:none}\\n\"], directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i4.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: AutofocusDirective, selector: \"[timepickerAutofocus]\", inputs: [\"timepickerAutofocus\"] }, { type: i4.FormControlDirective, selector: \"[formControl]\", inputs: [\"disabled\", \"formControl\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }], pipes: { \"timeLocalizer\": TimeLocalizerPipe } });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerDialControlComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-material-timepicker-dial-control',\r\n                    templateUrl: 'ngx-material-timepicker-dial-control.component.html',\r\n                    styleUrls: ['ngx-material-timepicker-dial-control.component.scss'],\r\n                    providers: [TimeParserPipe, TimeLocalizerPipe],\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: TimeParserPipe }, { type: TimeLocalizerPipe }]; }, propDecorators: { timeList: [{\r\n                type: Input\r\n            }], timeUnit: [{\r\n                type: Input\r\n            }], time: [{\r\n                type: Input\r\n            }], isActive: [{\r\n                type: Input\r\n            }], isEditable: [{\r\n                type: Input\r\n            }], minutesGap: [{\r\n                type: Input\r\n            }], disabled: [{\r\n                type: Input\r\n            }], editableTimeTmpl: [{\r\n                type: ViewChild,\r\n                args: ['editableTimeTmpl']\r\n            }], timeUnitChanged: [{\r\n                type: Output\r\n            }], timeChanged: [{\r\n                type: Output\r\n            }], focused: [{\r\n                type: Output\r\n            }], unfocused: [{\r\n                type: Output\r\n            }] } });\r\nfunction isTimeDisabledToChange(currentTime, nextTime, timeList) {\r\n    const isNumber = /\\d/.test(nextTime);\r\n    if (isNumber) {\r\n        return isTimeUnavailable(nextTime, timeList);\r\n    }\r\n}\r\nfunction isTimeUnavailable(time, timeList) {\r\n    const selectedTime = timeList.find(value => value.time === +time);\r\n    return !selectedTime || (selectedTime && selectedTime.disabled);\r\n}\r\n\r\nclass NgxMaterialTimepickerPeriodComponent {\r\n    constructor() {\r\n        this.timePeriod = TimePeriod;\r\n        this.isPeriodAvailable = true;\r\n        this.periodChanged = new EventEmitter();\r\n    }\r\n    changePeriod(period) {\r\n        this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\r\n        if (this.isPeriodAvailable) {\r\n            this.periodChanged.next(period);\r\n        }\r\n    }\r\n    animationDone() {\r\n        this.isPeriodAvailable = true;\r\n    }\r\n    isSwitchPeriodAvailable(period) {\r\n        const time = this.getDisabledTimeByPeriod(period);\r\n        return !time.every(t => t.disabled);\r\n    }\r\n    getDisabledTimeByPeriod(period) {\r\n        switch (this.activeTimeUnit) {\r\n            case TimeUnit.HOUR:\r\n                return TimepickerTimeUtils.disableHours(this.hours, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            case TimeUnit.MINUTE:\r\n                return TimepickerTimeUtils.disableMinutes(this.minutes, +this.selectedHour, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            default:\r\n                throw new Error('no such TimeUnit');\r\n        }\r\n    }\r\n}\r\nNgxMaterialTimepickerPeriodComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerPeriodComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMaterialTimepickerPeriodComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: NgxMaterialTimepickerPeriodComponent, selector: \"ngx-material-timepicker-period\", inputs: { selectedPeriod: \"selectedPeriod\", format: \"format\", activeTimeUnit: \"activeTimeUnit\", hours: \"hours\", minutes: \"minutes\", minTime: \"minTime\", maxTime: \"maxTime\", selectedHour: \"selectedHour\", meridiems: \"meridiems\" }, outputs: { periodChanged: \"periodChanged\" }, ngImport: i0, template: \"<div class=\\\"timepicker-period\\\">\\n\\t\\t\\t<button class=\\\"timepicker-dial__item timepicker-period__btn\\\"\\n                  [ngClass]=\\\"{'timepicker-dial__item_active': selectedPeriod === timePeriod.AM}\\\"\\n                  (click)=\\\"changePeriod(timePeriod.AM)\\\"\\n                  type=\\\"button\\\">{{meridiems[0]}}</button>\\n    <button class=\\\"timepicker-dial__item timepicker-period__btn\\\"\\n          [ngClass]=\\\"{'timepicker-dial__item_active': selectedPeriod === timePeriod.PM}\\\"\\n          (click)=\\\"changePeriod(timePeriod.PM)\\\"\\n          type=\\\"button\\\">{{meridiems[1]}}</button>\\n    <div class=\\\"timepicker-period__warning\\\" [@scaleInOut] (@scaleInOut.done)=\\\"animationDone()\\\" *ngIf=\\\"!isPeriodAvailable\\\">\\n        <p>Current time would be invalid in this period.</p>\\n    </div>\\n</div>\\n\", styles: [\".timepicker-dial__item{cursor:pointer;color:#ffffff80;font-family:\\\"Roboto\\\",sans-serif}@supports (font-family: var(--primary-font-family)){.timepicker-dial__item{font-family:var(--primary-font-family);color:var(--dial-inactive-color)}}.timepicker-dial__item_active{color:#fff}@supports (color: var(--dial-active-color)){.timepicker-dial__item_active{color:var(--dial-active-color)}}.timepicker-period{display:flex;flex-direction:column;position:relative}.timepicker-period__btn{padding:1px 3px;border:0;background-color:transparent;font-size:18px;font-weight:500;-webkit-user-select:none;-moz-user-select:none;user-select:none;outline:none;border-radius:3px;transition:background-color .5s;font-family:\\\"Roboto\\\",sans-serif}@supports (font-family: var(--primary-font-family)){.timepicker-period__btn{font-family:var(--primary-font-family)}}.timepicker-period__btn:focus{background-color:#00000012}.timepicker-period__warning{padding:5px 10px;border-radius:3px;background-color:#0000008c;color:#fff;position:absolute;width:200px;left:-20px;top:40px}.timepicker-period__warning>p{margin:0;font-size:12px;font-family:\\\"Roboto\\\",sans-serif}@supports (font-family: var(--primary-font-family)){.timepicker-period__warning>p{font-family:var(--primary-font-family)}}\\n\"], directives: [{ type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\r\n        trigger('scaleInOut', [\r\n            transition(':enter', [\r\n                style({ transform: 'scale(0)' }),\r\n                animate('.2s', style({ transform: 'scale(1)' })),\r\n                sequence([\r\n                    animate('3s', style({ opacity: 1 })),\r\n                    animate('.3s', style({ opacity: 0 }))\r\n                ])\r\n            ])\r\n        ])\r\n    ] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerPeriodComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-material-timepicker-period',\r\n                    templateUrl: 'ngx-material-timepicker-period.component.html',\r\n                    styleUrls: ['ngx-material-timepicker-period.component.scss'],\r\n                    animations: [\r\n                        trigger('scaleInOut', [\r\n                            transition(':enter', [\r\n                                style({ transform: 'scale(0)' }),\r\n                                animate('.2s', style({ transform: 'scale(1)' })),\r\n                                sequence([\r\n                                    animate('3s', style({ opacity: 1 })),\r\n                                    animate('.3s', style({ opacity: 0 }))\r\n                                ])\r\n                            ])\r\n                        ])\r\n                    ]\r\n                }]\r\n        }], propDecorators: { selectedPeriod: [{\r\n                type: Input\r\n            }], format: [{\r\n                type: Input\r\n            }], activeTimeUnit: [{\r\n                type: Input\r\n            }], hours: [{\r\n                type: Input\r\n            }], minutes: [{\r\n                type: Input\r\n            }], minTime: [{\r\n                type: Input\r\n            }], maxTime: [{\r\n                type: Input\r\n            }], selectedHour: [{\r\n                type: Input\r\n            }], meridiems: [{\r\n                type: Input\r\n            }], periodChanged: [{\r\n                type: Output\r\n            }] } });\r\n\r\nclass NgxMaterialTimepickerDialComponent {\r\n    constructor(locale) {\r\n        this.locale = locale;\r\n        this.timeUnit = TimeUnit;\r\n        this.meridiems = Info.meridiems({ locale: this.locale });\r\n        this.periodChanged = new EventEmitter();\r\n        this.timeUnitChanged = new EventEmitter();\r\n        this.hourChanged = new EventEmitter();\r\n        this.minuteChanged = new EventEmitter();\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes['period'] && changes['period'].currentValue\r\n            || changes['format'] && changes['format'].currentValue) {\r\n            const hours = TimepickerTimeUtils.getHours(this.format);\r\n            this.hours = TimepickerTimeUtils.disableHours(hours, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period,\r\n            });\r\n        }\r\n        if (changes['period'] && changes['period'].currentValue\r\n            || changes['hour'] && changes['hour'].currentValue) {\r\n            const minutes = TimepickerTimeUtils.getMinutes(this.minutesGap);\r\n            this.minutes = TimepickerTimeUtils.disableMinutes(minutes, +this.hour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period,\r\n            });\r\n        }\r\n    }\r\n    changeTimeUnit(unit) {\r\n        this.timeUnitChanged.next(unit);\r\n    }\r\n    changePeriod(period) {\r\n        this.periodChanged.next(period);\r\n    }\r\n    changeHour(hour) {\r\n        this.hourChanged.next(hour);\r\n        if (this.isEditable) {\r\n            this.changeTimeUnit(TimeUnit.MINUTE);\r\n        }\r\n    }\r\n    changeMinute(minute) {\r\n        this.minuteChanged.next(minute);\r\n    }\r\n    showHint() {\r\n        this.isHintVisible = true;\r\n    }\r\n    hideHint() {\r\n        this.isHintVisible = false;\r\n    }\r\n}\r\nNgxMaterialTimepickerDialComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerDialComponent, deps: [{ token: TIME_LOCALE }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMaterialTimepickerDialComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: NgxMaterialTimepickerDialComponent, selector: \"ngx-material-timepicker-dial\", inputs: { editableHintTmpl: \"editableHintTmpl\", hour: \"hour\", minute: \"minute\", format: \"format\", period: \"period\", activeTimeUnit: \"activeTimeUnit\", minTime: \"minTime\", maxTime: \"maxTime\", isEditable: \"isEditable\", minutesGap: \"minutesGap\", hoursOnly: \"hoursOnly\" }, outputs: { periodChanged: \"periodChanged\", timeUnitChanged: \"timeUnitChanged\", hourChanged: \"hourChanged\", minuteChanged: \"minuteChanged\" }, usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"timepicker-dial\\\">\\n    <div class=\\\"timepicker-dial__container\\\">\\n        <div class=\\\"timepicker-dial__time\\\">\\n            <ngx-material-timepicker-dial-control [timeList]=\\\"hours\\\" [time]=\\\"hour\\\" [timeUnit]=\\\"timeUnit.HOUR\\\"\\n                                                  [isActive]=\\\"activeTimeUnit === timeUnit.HOUR\\\"\\n                                                  [isEditable]=\\\"isEditable\\\"\\n                                                  (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\n                                                  (timeChanged)=\\\"changeHour($event)\\\"\\n                                                  (focused)=\\\"showHint()\\\"\\n                                                  (unfocused)=\\\"hideHint()\\\">\\n\\n            </ngx-material-timepicker-dial-control>\\n            <span>:</span>\\n            <ngx-material-timepicker-dial-control [timeList]=\\\"minutes\\\" [time]=\\\"minute\\\" [timeUnit]=\\\"timeUnit.MINUTE\\\"\\n                                                  [isActive]=\\\"activeTimeUnit === timeUnit.MINUTE\\\"\\n                                                  [isEditable]=\\\"isEditable\\\"\\n                                                  [minutesGap]=\\\"minutesGap\\\"\\n                                                  [disabled]=\\\"hoursOnly\\\"\\n                                                  (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\n                                                  (timeChanged)=\\\"changeMinute($event)\\\"\\n                                                  (focused)=\\\"showHint()\\\"\\n                                                  (unfocused)=\\\"hideHint()\\\">\\n\\n            </ngx-material-timepicker-dial-control>\\n        </div>\\n        <ngx-material-timepicker-period class=\\\"timepicker-dial__period\\\"\\n                                        [ngClass]=\\\"{'timepicker-dial__period--hidden': format === 24}\\\"\\n                                        [selectedPeriod]=\\\"period\\\" [activeTimeUnit]=\\\"activeTimeUnit\\\"\\n                                        [maxTime]=\\\"maxTime\\\" [minTime]=\\\"minTime\\\" [format]=\\\"format\\\"\\n                                        [hours]=\\\"hours\\\" [minutes]=\\\"minutes\\\" [selectedHour]=\\\"hour\\\"\\n                                        [meridiems]=\\\"meridiems\\\"\\n                                        (periodChanged)=\\\"changePeriod($event)\\\"></ngx-material-timepicker-period>\\n    </div>\\n    <div *ngIf=\\\"isEditable || editableHintTmpl\\\" [ngClass]=\\\"{'timepicker-dial__hint-container--hidden': !isHintVisible}\\\">\\n        <!--suppress HtmlUnknownAttribute -->\\n        <ng-container *ngTemplateOutlet=\\\"editableHintTmpl ? editableHintTmpl : editableHintDefault\\\"></ng-container>\\n        <ng-template #editableHintDefault>\\n            <small class=\\\"timepicker-dial__hint\\\"> * use arrows (<span>&#8645;</span>) to change the time</small>\\n        </ng-template>\\n    </div>\\n</div>\\n\", styles: [\".timepicker-dial{text-align:right}.timepicker-dial__container{display:flex;align-items:center;justify-content:flex-end;-webkit-tap-highlight-color:rgba(0,0,0,0)}.timepicker-dial__time{display:flex;align-items:baseline;line-height:normal;font-size:50px;color:#ffffff80;font-family:\\\"Roboto\\\",sans-serif}@supports (font-family: var(--primary-font-family)){.timepicker-dial__time{font-family:var(--primary-font-family);color:var(--dial-inactive-color)}}.timepicker-dial__period{display:block;margin-left:10px}.timepicker-dial__period--hidden{visibility:hidden}.timepicker-dial__hint-container--hidden{visibility:hidden}.timepicker-dial__hint{display:inline-block;font-size:10px;color:#fff}@supports (color: var(--dial-active-color)){.timepicker-dial__hint{color:var(--dial-active-color)}}.timepicker-dial__hint span{font-size:14px}@media (max-device-width: 1023px) and (orientation: landscape){.timepicker-dial__container{flex-direction:column}.timepicker-dial__period{margin-left:0}}\\n\"], components: [{ type: NgxMaterialTimepickerDialControlComponent, selector: \"ngx-material-timepicker-dial-control\", inputs: [\"timeList\", \"timeUnit\", \"time\", \"isActive\", \"isEditable\", \"minutesGap\", \"disabled\"], outputs: [\"timeUnitChanged\", \"timeChanged\", \"focused\", \"unfocused\"] }, { type: NgxMaterialTimepickerPeriodComponent, selector: \"ngx-material-timepicker-period\", inputs: [\"selectedPeriod\", \"format\", \"activeTimeUnit\", \"hours\", \"minutes\", \"minTime\", \"maxTime\", \"selectedHour\", \"meridiems\"], outputs: [\"periodChanged\"] }], directives: [{ type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerDialComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-material-timepicker-dial',\r\n                    templateUrl: 'ngx-material-timepicker-dial.component.html',\r\n                    styleUrls: ['ngx-material-timepicker-dial.component.scss'],\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [TIME_LOCALE]\r\n                }] }]; }, propDecorators: { editableHintTmpl: [{\r\n                type: Input\r\n            }], hour: [{\r\n                type: Input\r\n            }], minute: [{\r\n                type: Input\r\n            }], format: [{\r\n                type: Input\r\n            }], period: [{\r\n                type: Input\r\n            }], activeTimeUnit: [{\r\n                type: Input\r\n            }], minTime: [{\r\n                type: Input\r\n            }], maxTime: [{\r\n                type: Input\r\n            }], isEditable: [{\r\n                type: Input\r\n            }], minutesGap: [{\r\n                type: Input\r\n            }], hoursOnly: [{\r\n                type: Input\r\n            }], periodChanged: [{\r\n                type: Output\r\n            }], timeUnitChanged: [{\r\n                type: Output\r\n            }], hourChanged: [{\r\n                type: Output\r\n            }], minuteChanged: [{\r\n                type: Output\r\n            }] } });\r\n\r\nclass NgxMaterialTimepickerHoursFace {\r\n    constructor(format) {\r\n        this.hourChange = new EventEmitter();\r\n        this.hourSelected = new EventEmitter();\r\n        this.hoursList = [];\r\n        this.hoursList = TimepickerTimeUtils.getHours(format);\r\n    }\r\n    onTimeSelected(time) {\r\n        this.hourSelected.next(time);\r\n    }\r\n}\r\nNgxMaterialTimepickerHoursFace.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerHoursFace, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\r\nNgxMaterialTimepickerHoursFace.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.17\", type: NgxMaterialTimepickerHoursFace, inputs: { selectedHour: \"selectedHour\", minTime: \"minTime\", maxTime: \"maxTime\", format: \"format\" }, outputs: { hourChange: \"hourChange\", hourSelected: \"hourSelected\" }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerHoursFace, decorators: [{\r\n            type: Directive\r\n        }], ctorParameters: function () { return [{ type: undefined }]; }, propDecorators: { selectedHour: [{\r\n                type: Input\r\n            }], minTime: [{\r\n                type: Input\r\n            }], maxTime: [{\r\n                type: Input\r\n            }], format: [{\r\n                type: Input\r\n            }], hourChange: [{\r\n                type: Output\r\n            }], hourSelected: [{\r\n                type: Output\r\n            }] } });\r\n\r\nclass ActiveHourPipe {\r\n    transform(hour, currentHour, isClockFaceDisabled) {\r\n        if (hour == null || isClockFaceDisabled) {\r\n            return false;\r\n        }\r\n        return hour === currentHour;\r\n    }\r\n}\r\nActiveHourPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ActiveHourPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\r\nActiveHourPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ActiveHourPipe, name: \"activeHour\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ActiveHourPipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'activeHour'\r\n                }]\r\n        }] });\r\n\r\nclass ActiveMinutePipe {\r\n    transform(minute, currentMinute, gap, isClockFaceDisabled) {\r\n        if (minute == null || isClockFaceDisabled) {\r\n            return false;\r\n        }\r\n        const defaultGap = 5;\r\n        return ((currentMinute === minute) && (minute % (gap || defaultGap) === 0));\r\n    }\r\n}\r\nActiveMinutePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ActiveMinutePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\r\nActiveMinutePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ActiveMinutePipe, name: \"activeMinute\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: ActiveMinutePipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'activeMinute'\r\n                }]\r\n        }] });\r\n\r\nclass MinutesFormatterPipe {\r\n    transform(minute, gap = 5) {\r\n        if (!minute) {\r\n            return minute;\r\n        }\r\n        return minute % gap === 0 ? minute : '';\r\n    }\r\n}\r\nMinutesFormatterPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: MinutesFormatterPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\r\nMinutesFormatterPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: MinutesFormatterPipe, name: \"minutesFormatter\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: MinutesFormatterPipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'minutesFormatter'\r\n                }]\r\n        }] });\r\n\r\nconst CLOCK_HAND_STYLES = {\r\n    small: {\r\n        height: '75px',\r\n        top: 'calc(50% - 75px)'\r\n    },\r\n    large: {\r\n        height: '103px',\r\n        top: 'calc(50% - 103px)'\r\n    }\r\n};\r\nclass NgxMaterialTimepickerFaceComponent {\r\n    constructor() {\r\n        this.timeUnit = TimeUnit;\r\n        this.innerClockFaceSize = 85;\r\n        this.timeChange = new EventEmitter();\r\n        this.timeSelected = new EventEmitter();\r\n    }\r\n    ngAfterViewInit() {\r\n        this.setClockHandPosition();\r\n        this.addTouchEvents();\r\n    }\r\n    ngOnChanges(changes) {\r\n        const faceTimeChanges = changes['faceTime'];\r\n        const selectedTimeChanges = changes['selectedTime'];\r\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\r\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\r\n            /* Set time according to passed an input value */\r\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\r\n        }\r\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\r\n            this.setClockHandPosition();\r\n        }\r\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\r\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\r\n            setTimeout(() => this.selectAvailableTime());\r\n        }\r\n    }\r\n    trackByTime(_, time) {\r\n        return time.time;\r\n    }\r\n    onMousedown(e) {\r\n        e.preventDefault();\r\n        this.isStarted = true;\r\n    }\r\n    selectTime(e) {\r\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\r\n            return;\r\n        }\r\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\r\n        /* Get x0 and y0 of the circle */\r\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\r\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\r\n        /* Counting the arctangent and convert it to from radian to deg */\r\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\r\n        /* Get angle according to quadrant */\r\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\r\n        /* Check if selected time from the inner clock face (24 hours format only) */\r\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\r\n        /* Round angle according to angle step */\r\n        const angleStep = this.unit === TimeUnit.MINUTE ? (6 * (this.minutesGap || 1)) : 30;\r\n        const roundedAngle = roundAngle(circleAngle, angleStep);\r\n        const angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);\r\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\r\n        if (selectedTime && !selectedTime.disabled) {\r\n            this.timeChange.next(selectedTime);\r\n            /* To let know whether user ended interaction with clock face */\r\n            if (!this.isStarted) {\r\n                this.timeSelected.next(selectedTime.time);\r\n            }\r\n        }\r\n    }\r\n    onMouseup(e) {\r\n        e.preventDefault();\r\n        this.isStarted = false;\r\n    }\r\n    ngOnDestroy() {\r\n        this.removeTouchEvents();\r\n    }\r\n    addTouchEvents() {\r\n        this.touchStartHandler = this.onMousedown.bind(this);\r\n        this.touchEndHandler = this.onMouseup.bind(this);\r\n        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\r\n        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\r\n    }\r\n    removeTouchEvents() {\r\n        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\r\n        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\r\n    }\r\n    setClockHandPosition() {\r\n        if (this.format === 24) {\r\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\r\n                this.decreaseClockHand();\r\n            }\r\n            else {\r\n                this.increaseClockHand();\r\n            }\r\n        }\r\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\r\n    }\r\n    selectAvailableTime() {\r\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\r\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\r\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\r\n            const availableTime = this.faceTime.find(time => !time.disabled);\r\n            this.timeChange.next(availableTime);\r\n        }\r\n    }\r\n    isInnerClockFace(x0, y0, x, y) {\r\n        /* Detect whether time from the inner clock face or not (24 format only) */\r\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\r\n    }\r\n    decreaseClockHand() {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\r\n    }\r\n    increaseClockHand() {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\r\n    }\r\n}\r\nNgxMaterialTimepickerFaceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerFaceComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMaterialTimepickerFaceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: NgxMaterialTimepickerFaceComponent, selector: \"ngx-material-timepicker-face\", inputs: { faceTime: \"faceTime\", selectedTime: \"selectedTime\", unit: \"unit\", format: \"format\", minutesGap: \"minutesGap\" }, outputs: { timeChange: \"timeChange\", timeSelected: \"timeSelected\" }, host: { listeners: { \"mousedown\": \"onMousedown($event)\", \"click\": \"selectTime($event)\", \"touchmove\": \"selectTime($event.changedTouches[0])\", \"touchend\": \"selectTime($event.changedTouches[0])\", \"mousemove\": \"selectTime($event)\", \"mouseup\": \"onMouseup($event)\" } }, viewQueries: [{ propertyName: \"clockFace\", first: true, predicate: [\"clockFace\"], descendants: true, static: true }, { propertyName: \"clockHand\", first: true, predicate: [\"clockHand\"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"clock-face\\\" #clockFace>\\n    <div *ngIf=\\\"unit !== timeUnit.MINUTE;else minutesFace\\\" class=\\\"clock-face__container\\\">\\n        <div class=\\\"clock-face__number clock-face__number--outer\\\"\\n             [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg) translateX(-50%)'}\\\"\\n             *ngFor=\\\"let time of faceTime | slice: 0 : 12; trackBy: trackByTime\\\">\\n\\t\\t\\t<span [ngStyle]=\\\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\\\"\\n                  [ngClass]=\\\"{'active': time.time | activeHour: selectedTime.time : isClockFaceDisabled,\\n                   'disabled': time.disabled}\\\">\\n                {{time.time | timeLocalizer: timeUnit.HOUR}}\\n            </span>\\n        </div>\\n        <div class=\\\"clock-face__inner\\\" *ngIf=\\\"faceTime.length > 12\\\"\\n             [style.top]=\\\"'calc(50% - ' + innerClockFaceSize + 'px)'\\\">\\n            <div class=\\\"clock-face__number clock-face__number--inner\\\"\\n                 [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg) translateX(-50%)'}\\\"\\n                 [style.height.px]=\\\"innerClockFaceSize\\\"\\n                 *ngFor=\\\"let time of faceTime | slice: 12 : 24; trackBy: trackByTime\\\">\\n\\t\\t\\t<span [ngStyle]=\\\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\\\"\\n                  [ngClass]=\\\"{'active': time.time | activeHour: selectedTime?.time : isClockFaceDisabled,\\n                   'disabled': time.disabled}\\\">\\n                {{time.time | timeLocalizer: timeUnit.HOUR}}</span>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <span class=\\\"clock-face__clock-hand\\\" [ngClass]=\\\"{'clock-face__clock-hand_minute': unit === timeUnit.MINUTE}\\\"\\n          #clockHand [hidden]=\\\"isClockFaceDisabled\\\"></span>\\n</div>\\n<ng-template #minutesFace>\\n    <div class=\\\"clock-face__container\\\">\\n        <div class=\\\"clock-face__number clock-face__number--outer\\\"\\n             [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg) translateX(-50%)'}\\\"\\n             *ngFor=\\\"let time of faceTime; trackBy: trackByTime\\\">\\n\\t<span [ngStyle]=\\\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\\\"\\n          [ngClass]=\\\"{'active': time.time | activeMinute: selectedTime?.time:minutesGap:isClockFaceDisabled,\\n           'disabled': time.disabled}\\\">\\n\\t{{time.time | minutesFormatter: minutesGap | timeLocalizer: timeUnit.MINUTE}}</span>\\n        </div>\\n    </div>\\n</ng-template>\\n\", styles: [\".clock-face{width:290px;height:290px;border-radius:50%;position:relative;display:flex;justify-content:center;padding:20px;box-sizing:border-box;background-color:#f0f0f0}@supports (background-color: var(--clock-face-background-color)){.clock-face{background-color:var(--clock-face-background-color)}}.clock-face__inner{position:absolute}.clock-face__container{margin-left:-2px}.clock-face__number{position:absolute;transform-origin:0 100%;width:50px;text-align:center;z-index:2}.clock-face__number--outer{height:calc(290px / 2 - 20px)}.clock-face__number--outer>span{font-size:16px;color:#6c6c6c}@supports (color: var(--clock-face-time-inactive-color)){.clock-face__number--outer>span{color:var(--clock-face-time-inactive-color)}}.clock-face__number--inner>span{font-size:14px;color:#929292}@supports (color: var(--clock-face-inner-time-inactive-color)){.clock-face__number--inner>span{color:var(--clock-face-inner-time-inactive-color)}}.clock-face__number>span{-webkit-user-select:none;-moz-user-select:none;user-select:none;width:30px;height:30px;display:flex;justify-content:center;align-items:center;margin:auto;border-radius:50%;font-weight:500;font-family:\\\"Roboto\\\",sans-serif}@supports (font-family: var(--primary-font-family)){.clock-face__number>span{font-family:var(--primary-font-family)}}.clock-face__number>span.active{background-color:#00bfff;color:#fff}@supports (background-color: var(--clock-hand-color)){.clock-face__number>span.active{background-color:var(--clock-hand-color);color:var(--clock-face-time-active-color)}}.clock-face__number>span.disabled{color:#c5c5c5}@supports (color: var(--clock-face-time-disabled-color)){.clock-face__number>span.disabled{color:var(--clock-face-time-disabled-color)}}.clock-face__clock-hand{height:103px;width:2px;transform-origin:0 100%;position:absolute;top:calc(50% - 103px);z-index:1;background-color:#00bfff}@supports (background-color: var(--clock-hand-color)){.clock-face__clock-hand{background-color:var(--clock-hand-color)}}.clock-face__clock-hand:after{content:\\\"\\\";width:7px;height:7px;border-radius:50%;background-color:inherit;position:absolute;bottom:-3px;left:-3.5px}.clock-face__clock-hand_minute:before{content:\\\"\\\";width:7px;height:7px;background-color:#fff;border-radius:50%;position:absolute;top:-8px;left:calc(50% - 8px);box-sizing:content-box;border-width:4px;border-style:solid;border-color:#00bfff}@supports (border-color: var(--clock-hand-color)){.clock-face__clock-hand_minute:before{border-color:var(--clock-hand-color)}}@media (max-device-width: 1023px) and (orientation: landscape){.clock-face{width:225px;height:225px;padding:5px}.clock-face__number--outer{height:calc(225px / 2 - 5px)}.clock-face__clock-hand_minute:before{top:0}}\\n\"], directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], pipes: { \"slice\": i1.SlicePipe, \"activeHour\": ActiveHourPipe, \"timeLocalizer\": TimeLocalizerPipe, \"activeMinute\": ActiveMinutePipe, \"minutesFormatter\": MinutesFormatterPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerFaceComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-material-timepicker-face',\r\n                    templateUrl: './ngx-material-timepicker-face.component.html',\r\n                    styleUrls: ['./ngx-material-timepicker-face.component.scss'],\r\n                    changeDetection: ChangeDetectionStrategy.OnPush\r\n                }]\r\n        }], propDecorators: { faceTime: [{\r\n                type: Input\r\n            }], selectedTime: [{\r\n                type: Input\r\n            }], unit: [{\r\n                type: Input\r\n            }], format: [{\r\n                type: Input\r\n            }], minutesGap: [{\r\n                type: Input\r\n            }], timeChange: [{\r\n                type: Output\r\n            }], timeSelected: [{\r\n                type: Output\r\n            }], clockFace: [{\r\n                type: ViewChild,\r\n                args: ['clockFace', { static: true }]\r\n            }], clockHand: [{\r\n                type: ViewChild,\r\n                args: ['clockHand', { static: true }]\r\n            }], onMousedown: [{\r\n                type: HostListener,\r\n                args: ['mousedown', ['$event']]\r\n            }], selectTime: [{\r\n                type: HostListener,\r\n                args: ['click', ['$event']]\r\n            }, {\r\n                type: HostListener,\r\n                args: ['touchmove', ['$event.changedTouches[0]']]\r\n            }, {\r\n                type: HostListener,\r\n                args: ['touchend', ['$event.changedTouches[0]']]\r\n            }, {\r\n                type: HostListener,\r\n                args: ['mousemove', ['$event']]\r\n            }], onMouseup: [{\r\n                type: HostListener,\r\n                args: ['mouseup', ['$event']]\r\n            }] } });\r\nfunction roundAngle(angle, step) {\r\n    return Math.round(angle / step) * step;\r\n}\r\nfunction countAngleByCords(x0, y0, x, y, currentAngle) {\r\n    if (y > y0 && x >= x0) { // II quarter\r\n        return 180 - currentAngle;\r\n    }\r\n    else if (y > y0 && x < x0) { // III quarter\r\n        return 180 + currentAngle;\r\n    }\r\n    else if (y < y0 && x < x0) { // IV quarter\r\n        return 360 - currentAngle;\r\n    }\r\n    else { // I quarter\r\n        return currentAngle;\r\n    }\r\n}\r\n\r\nclass NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace {\r\n    constructor() {\r\n        super(24);\r\n    }\r\n    ngAfterContentInit() {\r\n        this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\r\n            min: this.minTime,\r\n            max: this.maxTime,\r\n            format: this.format\r\n        });\r\n    }\r\n}\r\nNgxMaterialTimepicker24HoursFaceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepicker24HoursFaceComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMaterialTimepicker24HoursFaceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: NgxMaterialTimepicker24HoursFaceComponent, selector: \"ngx-material-timepicker-24-hours-face\", usesInheritance: true, ngImport: i0, template: \"<ngx-material-timepicker-face [selectedTime]=\\\"selectedHour\\\" [faceTime]=\\\"hoursList\\\" [format]=\\\"format\\\"\\n                              (timeChange)=\\\"hourChange.next($event)\\\"\\n                              (timeSelected)=\\\"onTimeSelected($event)\\\"></ngx-material-timepicker-face>\\n\", components: [{ type: NgxMaterialTimepickerFaceComponent, selector: \"ngx-material-timepicker-face\", inputs: [\"faceTime\", \"selectedTime\", \"unit\", \"format\", \"minutesGap\"], outputs: [\"timeChange\", \"timeSelected\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepicker24HoursFaceComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-material-timepicker-24-hours-face',\r\n                    templateUrl: 'ngx-material-timepicker-24-hours-face.component.html',\r\n                    changeDetection: ChangeDetectionStrategy.OnPush\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\r\n\r\nclass NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace {\r\n    constructor() {\r\n        super(12);\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\nNgxMaterialTimepicker12HoursFaceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepicker12HoursFaceComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMaterialTimepicker12HoursFaceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: NgxMaterialTimepicker12HoursFaceComponent, selector: \"ngx-material-timepicker-12-hours-face\", inputs: { period: \"period\" }, usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<ngx-material-timepicker-face [selectedTime]=\\\"selectedHour\\\" [faceTime]=\\\"hoursList\\\"\\n                              (timeChange)=\\\"hourChange.next($event)\\\" (timeSelected)=\\\"onTimeSelected($event)\\\"></ngx-material-timepicker-face>\\n\", components: [{ type: NgxMaterialTimepickerFaceComponent, selector: \"ngx-material-timepicker-face\", inputs: [\"faceTime\", \"selectedTime\", \"unit\", \"format\", \"minutesGap\"], outputs: [\"timeChange\", \"timeSelected\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepicker12HoursFaceComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-material-timepicker-12-hours-face',\r\n                    templateUrl: 'ngx-material-timepicker-12-hours-face.component.html',\r\n                    changeDetection: ChangeDetectionStrategy.OnPush\r\n                }]\r\n        }], ctorParameters: function () { return []; }, propDecorators: { period: [{\r\n                type: Input\r\n            }] } });\r\n\r\nclass NgxMaterialTimepickerMinutesFaceComponent {\r\n    constructor() {\r\n        this.minutesList = [];\r\n        this.timeUnit = TimeUnit;\r\n        this.minuteChange = new EventEmitter();\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            const minutes = TimepickerTimeUtils.getMinutes(this.minutesGap);\r\n            this.minutesList = TimepickerTimeUtils.disableMinutes(minutes, this.selectedHour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\nNgxMaterialTimepickerMinutesFaceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerMinutesFaceComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMaterialTimepickerMinutesFaceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: NgxMaterialTimepickerMinutesFaceComponent, selector: \"ngx-material-timepicker-minutes-face\", inputs: { selectedMinute: \"selectedMinute\", selectedHour: \"selectedHour\", period: \"period\", minTime: \"minTime\", maxTime: \"maxTime\", format: \"format\", minutesGap: \"minutesGap\" }, outputs: { minuteChange: \"minuteChange\" }, usesOnChanges: true, ngImport: i0, template: \"<ngx-material-timepicker-face [faceTime]=\\\"minutesList\\\" [selectedTime]=\\\"selectedMinute\\\"\\n                              [minutesGap]=\\\"minutesGap\\\"\\n                              (timeChange)=\\\"minuteChange.next($event)\\\" [unit]=\\\"timeUnit.MINUTE\\\"></ngx-material-timepicker-face>\\n\", components: [{ type: NgxMaterialTimepickerFaceComponent, selector: \"ngx-material-timepicker-face\", inputs: [\"faceTime\", \"selectedTime\", \"unit\", \"format\", \"minutesGap\"], outputs: [\"timeChange\", \"timeSelected\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerMinutesFaceComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-material-timepicker-minutes-face',\r\n                    templateUrl: './ngx-material-timepicker-minutes-face.component.html'\r\n                }]\r\n        }], propDecorators: { selectedMinute: [{\r\n                type: Input\r\n            }], selectedHour: [{\r\n                type: Input\r\n            }], period: [{\r\n                type: Input\r\n            }], minTime: [{\r\n                type: Input\r\n            }], maxTime: [{\r\n                type: Input\r\n            }], format: [{\r\n                type: Input\r\n            }], minutesGap: [{\r\n                type: Input\r\n            }], minuteChange: [{\r\n                type: Output\r\n            }] } });\r\n\r\nclass NgxMaterialTimepickerButtonComponent {\r\n}\r\nNgxMaterialTimepickerButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMaterialTimepickerButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: NgxMaterialTimepickerButtonComponent, selector: \"ngx-material-timepicker-button\", ngImport: i0, template: \"<button class=\\\"timepicker-button\\\" type=\\\"button\\\">\\n  <span><ng-content></ng-content></span>\\n</button>\\n\", styles: [\".timepicker-button{display:inline-block;height:36px;min-width:88px;line-height:36px;border:12px;border-radius:2px;background-color:transparent;text-align:center;transition:all .45s cubic-bezier(.23,1,.32,1);overflow:hidden;-webkit-user-select:none;-moz-user-select:none;user-select:none;position:relative;cursor:pointer;outline:none;color:#00bfff}@supports (color: var(--button-color)){.timepicker-button{color:var(--button-color)}}.timepicker-button:hover,.timepicker-button:focus{background-color:#9993}.timepicker-button>span{font-size:14px;text-transform:uppercase;font-weight:600;padding-left:16px;padding-right:16px;font-family:\\\"Roboto\\\",sans-serif}@supports (font-family: var(--primary-font-family)){.timepicker-button>span{font-family:var(--primary-font-family)}}\\n\"] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerButtonComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-material-timepicker-button',\r\n                    templateUrl: './ngx-material-timepicker-button.component.html',\r\n                    styleUrls: ['./ngx-material-timepicker-button.component.scss']\r\n                }]\r\n        }] });\r\n\r\nclass OverlayDirective {\r\n    constructor(eventService) {\r\n        this.eventService = eventService;\r\n    }\r\n    onClick(e) {\r\n        if (!this.preventClick) {\r\n            this.eventService.dispatchEvent(e);\r\n        }\r\n        e.preventDefault();\r\n    }\r\n}\r\nOverlayDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: OverlayDirective, deps: [{ token: NgxMaterialTimepickerEventService }], target: i0.ɵɵFactoryTarget.Directive });\r\nOverlayDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.17\", type: OverlayDirective, selector: \"[overlay]\", inputs: { preventClick: [\"overlay\", \"preventClick\"] }, host: { listeners: { \"click\": \"onClick($event)\" } }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: OverlayDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[overlay]'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: NgxMaterialTimepickerEventService }]; }, propDecorators: { preventClick: [{\r\n                type: Input,\r\n                args: ['overlay']\r\n            }], onClick: [{\r\n                type: HostListener,\r\n                args: ['click', ['$event']]\r\n            }] } });\r\n\r\nclass NgxMaterialTimepickerThemeDirective {\r\n    constructor(elementRef) {\r\n        this.element = elementRef.nativeElement;\r\n    }\r\n    ngAfterViewInit() {\r\n        if (this.theme) {\r\n            this.setTheme(this.theme);\r\n        }\r\n    }\r\n    setTheme(theme) {\r\n        for (const val in theme) {\r\n            if (theme.hasOwnProperty(val)) {\r\n                if (typeof theme[val] === 'string') {\r\n                    for (const prop in theme) {\r\n                        if (theme.hasOwnProperty(prop)) {\r\n                            this.element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n                this.setTheme(theme[val]);\r\n            }\r\n        }\r\n    }\r\n}\r\nNgxMaterialTimepickerThemeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerThemeDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nNgxMaterialTimepickerThemeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.17\", type: NgxMaterialTimepickerThemeDirective, selector: \"[ngxMaterialTimepickerTheme]\", inputs: { theme: [\"ngxMaterialTimepickerTheme\", \"theme\"] }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerThemeDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{ selector: '[ngxMaterialTimepickerTheme]' }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { theme: [{\r\n                type: Input,\r\n                args: ['ngxMaterialTimepickerTheme']\r\n            }] } });\r\nfunction camelCaseToDash(myStr) {\r\n    return myStr.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n\r\nvar AnimationState;\r\n(function (AnimationState) {\r\n    AnimationState[\"ENTER\"] = \"enter\";\r\n    AnimationState[\"LEAVE\"] = \"leave\";\r\n})(AnimationState || (AnimationState = {}));\r\nclass NgxMaterialTimepickerContainerComponent {\r\n    constructor(timepickerService, eventService, locale) {\r\n        this.timepickerService = timepickerService;\r\n        this.eventService = eventService;\r\n        this.locale = locale;\r\n        this.timeUnit = TimeUnit;\r\n        this.activeTimeUnit = TimeUnit.HOUR;\r\n        this.unsubscribe = new Subject();\r\n    }\r\n    set defaultTime(time) {\r\n        this._defaultTime = time;\r\n        this.setDefaultTime(time);\r\n    }\r\n    get defaultTime() {\r\n        return this._defaultTime;\r\n    }\r\n    onKeydown(e) {\r\n        this.eventService.dispatchEvent(e);\r\n        e.stopPropagation();\r\n    }\r\n    ngOnInit() {\r\n        this.animationState = !this.disableAnimation && AnimationState.ENTER;\r\n        this.defineTime();\r\n        this.selectedHour = this.timepickerService.selectedHour\r\n            .pipe(shareReplay({ bufferSize: 1, refCount: true }));\r\n        this.selectedMinute = this.timepickerService.selectedMinute\r\n            .pipe(shareReplay({ bufferSize: 1, refCount: true }));\r\n        this.selectedPeriod = this.timepickerService.selectedPeriod\r\n            .pipe(shareReplay({ bufferSize: 1, refCount: true }));\r\n        this.timepickerBaseRef.timeUpdated.pipe(takeUntil(this.unsubscribe))\r\n            .subscribe(this.setDefaultTime.bind(this));\r\n    }\r\n    onHourChange(hour) {\r\n        this.timepickerService.hour = hour;\r\n        this.onTimeChange();\r\n    }\r\n    onHourSelected(hour) {\r\n        if (!this.hoursOnly) {\r\n            this.changeTimeUnit(TimeUnit.MINUTE);\r\n        }\r\n        this.timepickerBaseRef.hourSelected.next(hour);\r\n    }\r\n    onMinuteChange(minute) {\r\n        this.timepickerService.minute = minute;\r\n        this.onTimeChange();\r\n    }\r\n    changePeriod(period) {\r\n        this.timepickerService.period = period;\r\n        this.onTimeChange();\r\n    }\r\n    changeTimeUnit(unit) {\r\n        this.activeTimeUnit = unit;\r\n    }\r\n    setTime() {\r\n        this.timepickerBaseRef.timeSet.next(this.timepickerService.getFullTime(this.format));\r\n        this.close();\r\n    }\r\n    close() {\r\n        if (this.disableAnimation) {\r\n            this.timepickerBaseRef.close();\r\n            return;\r\n        }\r\n        this.animationState = AnimationState.LEAVE;\r\n    }\r\n    animationDone(event) {\r\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\r\n            this.timepickerBaseRef.close();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this.unsubscribe.next();\r\n        this.unsubscribe.complete();\r\n    }\r\n    setDefaultTime(time) {\r\n        this.timepickerService.setDefaultTimeIfAvailable(time, this.minTime, this.maxTime, this.format, this.minutesGap);\r\n    }\r\n    defineTime() {\r\n        const minTime = this.minTime;\r\n        if (minTime && (!this.time && !this.defaultTime)) {\r\n            const time = TimeAdapter.fromDateTimeToString(minTime, this.format);\r\n            this.setDefaultTime(time);\r\n        }\r\n    }\r\n    onTimeChange() {\r\n        const time = TimeAdapter.toLocaleTimeString(this.timepickerService.getFullTime(this.format), {\r\n            locale: this.locale,\r\n            format: this.format\r\n        });\r\n        this.timepickerBaseRef.timeChanged.emit(time);\r\n    }\r\n}\r\nNgxMaterialTimepickerContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerContainerComponent, deps: [{ token: NgxMaterialTimepickerService }, { token: NgxMaterialTimepickerEventService }, { token: TIME_LOCALE }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMaterialTimepickerContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: NgxMaterialTimepickerContainerComponent, selector: \"ngx-material-timepicker-container\", inputs: { defaultTime: \"defaultTime\" }, host: { listeners: { \"keydown\": \"onKeydown($event)\" } }, providers: [NgxMaterialTimepickerService], ngImport: i0, template: \"<div class=\\\"timepicker-backdrop-overlay\\\" [overlay]=\\\"preventOverlayClick\\\"\\n     [ngClass]=\\\"{'timepicker-backdrop-overlay--transparent': appendToInput}\\\"></div>\\n<div class=\\\"timepicker-overlay\\\">\\n    <ngx-material-timepicker-content [appendToInput]=\\\"appendToInput\\\"\\n                                     [inputElement]=\\\"inputElement\\\"\\n                                     [ngxMaterialTimepickerTheme]=\\\"theme\\\">\\n        <div class=\\\"timepicker\\\"\\n             [@timepicker]=\\\"animationState\\\"\\n             (@timepicker.done)=\\\"animationDone($event)\\\"\\n             [ngClass]=\\\"timepickerClass\\\">\\n            <header class=\\\"timepicker__header\\\">\\n                <ngx-material-timepicker-dial [format]=\\\"format\\\" [hour]=\\\"(selectedHour | async)?.time\\\"\\n                                              [minute]=\\\"(selectedMinute | async)?.time\\\"\\n                                              [period]=\\\"selectedPeriod | async\\\"\\n                                              [activeTimeUnit]=\\\"activeTimeUnit\\\"\\n                                              [minTime]=\\\"minTime\\\"\\n                                              [maxTime]=\\\"maxTime\\\"\\n                                              [isEditable]=\\\"enableKeyboardInput\\\"\\n                                              [editableHintTmpl]=\\\"editableHintTmpl\\\"\\n                                              [minutesGap]=\\\"minutesGap\\\"\\n                                              [hoursOnly]=\\\"hoursOnly\\\"\\n                                              (periodChanged)=\\\"changePeriod($event)\\\"\\n                                              (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\n                                              (hourChanged)=\\\"onHourChange($event)\\\"\\n                                              (minuteChanged)=\\\"onMinuteChange($event)\\\"\\n                ></ngx-material-timepicker-dial>\\n            </header>\\n            <div class=\\\"timepicker__main-content\\\">\\n                <div class=\\\"timepicker__body\\\" [ngSwitch]=\\\"activeTimeUnit\\\">\\n                    <div *ngSwitchCase=\\\"timeUnit.HOUR\\\">\\n                        <ngx-material-timepicker-24-hours-face *ngIf=\\\"format === 24;else ampmHours\\\"\\n                                                               (hourChange)=\\\"onHourChange($event)\\\"\\n                                                               [selectedHour]=\\\"selectedHour | async\\\"\\n                                                               [minTime]=\\\"minTime\\\"\\n                                                               [maxTime]=\\\"maxTime\\\"\\n                                                               [format]=\\\"format\\\"\\n                                                               (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-material-timepicker-24-hours-face>\\n                        <ng-template #ampmHours>\\n                            <ngx-material-timepicker-12-hours-face\\n                                (hourChange)=\\\"onHourChange($event)\\\"\\n                                [selectedHour]=\\\"selectedHour | async\\\"\\n                                [period]=\\\"selectedPeriod | async\\\"\\n                                [minTime]=\\\"minTime\\\"\\n                                [maxTime]=\\\"maxTime\\\"\\n                                (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-material-timepicker-12-hours-face>\\n                        </ng-template>\\n                    </div>\\n                    <ngx-material-timepicker-minutes-face *ngSwitchCase=\\\"timeUnit.MINUTE\\\"\\n                                                          [selectedMinute]=\\\"selectedMinute | async\\\"\\n                                                          [selectedHour]=\\\"(selectedHour | async)?.time\\\"\\n                                                          [minTime]=\\\"minTime\\\"\\n                                                          [maxTime]=\\\"maxTime\\\"\\n                                                          [format]=\\\"format\\\"\\n                                                          [period]=\\\"selectedPeriod | async\\\"\\n                                                          [minutesGap]=\\\"minutesGap\\\"\\n                                                          (minuteChange)=\\\"onMinuteChange($event)\\\"></ngx-material-timepicker-minutes-face>\\n                </div>\\n                <div class=\\\"timepicker__actions\\\">\\n                    <div (click)=\\\"close()\\\">\\n                        <!--suppress HtmlUnknownAttribute -->\\n                        <ng-container\\n                            *ngTemplateOutlet=\\\"cancelBtnTmpl ? cancelBtnTmpl : cancelBtnDefault\\\"></ng-container>\\n                    </div>\\n                    <div (click)=\\\"setTime()\\\">\\n                        <!--suppress HtmlUnknownAttribute -->\\n                        <ng-container\\n                            *ngTemplateOutlet=\\\"confirmBtnTmpl ? confirmBtnTmpl : confirmBtnDefault\\\"></ng-container>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </ngx-material-timepicker-content>\\n</div>\\n<ng-template #cancelBtnDefault>\\n    <ngx-material-timepicker-button>Cancel</ngx-material-timepicker-button>\\n</ng-template>\\n<ng-template #confirmBtnDefault>\\n    <ngx-material-timepicker-button>Ok</ngx-material-timepicker-button>\\n</ng-template>\\n\", styles: [\":host{--body-background-color: #fff;--primary-font-family: \\\"Roboto\\\", sans-serif;--button-color: deepskyblue;--dial-active-color: #fff;--dial-inactive-color: rgba(255, 255, 255, .5);--dial-background-color: deepskyblue;--dial-editable-active-color: deepskyblue;--dial-editable-background-color: #fff;--clock-face-time-active-color: #fff;--clock-face-time-inactive-color: #6c6c6c;--clock-face-inner-time-inactive-color: #929292;--clock-face-time-disabled-color: #c5c5c5;--clock-face-background-color: #f0f0f0;--clock-hand-color: deepskyblue}.timepicker-backdrop-overlay{position:fixed;top:0;bottom:0;right:0;left:0;background-color:#0000004d;z-index:999;pointer-events:auto}.timepicker-backdrop-overlay--transparent{background-color:transparent}.timepicker-overlay{position:fixed;top:0;left:0;width:100%;height:100%;display:flex;justify-content:center;align-items:center;z-index:999;pointer-events:none}.timepicker{width:300px;border-radius:2px;box-shadow:#00000040 0 14px 45px,#00000038 0 10px 18px;outline:none;position:static;z-index:999;pointer-events:auto}.timepicker__header{padding:15px 30px;background-color:#00bfff}@supports (background-color: var(--dial-background-color)){.timepicker__header{background-color:var(--dial-background-color)}}.timepicker__body{padding:15px 5px;display:flex;justify-content:center;align-items:center;background-color:#fff}@supports (background-color: var(--body-background-color)){.timepicker__body{background-color:var(--body-background-color)}}.timepicker__actions{display:flex;justify-content:flex-end;padding:15px;background-color:#fff}@supports (background-color: var(--body-background-color)){.timepicker__actions{background-color:var(--body-background-color)}}@media (max-device-width: 1023px) and (orientation: landscape){.timepicker{display:flex;width:515px}.timepicker__header{display:flex;align-items:center}.timepicker__main-content{display:flex;flex-direction:column;width:100%}.timepicker__actions{padding:5px;margin-top:-1px}}\\n\"], components: [{ type: NgxMaterialTimepickerContentComponent, selector: \"ngx-material-timepicker-content\", inputs: [\"appendToInput\", \"inputElement\"] }, { type: NgxMaterialTimepickerDialComponent, selector: \"ngx-material-timepicker-dial\", inputs: [\"editableHintTmpl\", \"hour\", \"minute\", \"format\", \"period\", \"activeTimeUnit\", \"minTime\", \"maxTime\", \"isEditable\", \"minutesGap\", \"hoursOnly\"], outputs: [\"periodChanged\", \"timeUnitChanged\", \"hourChanged\", \"minuteChanged\"] }, { type: NgxMaterialTimepicker24HoursFaceComponent, selector: \"ngx-material-timepicker-24-hours-face\" }, { type: NgxMaterialTimepicker12HoursFaceComponent, selector: \"ngx-material-timepicker-12-hours-face\", inputs: [\"period\"] }, { type: NgxMaterialTimepickerMinutesFaceComponent, selector: \"ngx-material-timepicker-minutes-face\", inputs: [\"selectedMinute\", \"selectedHour\", \"period\", \"minTime\", \"maxTime\", \"format\", \"minutesGap\"], outputs: [\"minuteChange\"] }, { type: NgxMaterialTimepickerButtonComponent, selector: \"ngx-material-timepicker-button\" }], directives: [{ type: OverlayDirective, selector: \"[overlay]\", inputs: [\"overlay\"] }, { type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: NgxMaterialTimepickerThemeDirective, selector: \"[ngxMaterialTimepickerTheme]\", inputs: [\"ngxMaterialTimepickerTheme\"] }, { type: i1.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i1.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], pipes: { \"async\": i1.AsyncPipe }, animations: [\r\n        trigger('timepicker', [\r\n            transition(`* => ${AnimationState.ENTER}`, [\r\n                style({ transform: 'translateY(-30%)' }),\r\n                animate('0.2s ease-out', style({ transform: 'translateY(0)' }))\r\n            ]),\r\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\r\n                style({ transform: 'translateY(0)', opacity: 1 }),\r\n                animate('0.2s ease-out', style({ transform: 'translateY(-30%)', opacity: 0 }))\r\n            ])\r\n        ])\r\n    ] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerContainerComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-material-timepicker-container',\r\n                    templateUrl: './ngx-material-timepicker-container.component.html',\r\n                    styleUrls: ['./ngx-material-timepicker-container.component.scss'],\r\n                    animations: [\r\n                        trigger('timepicker', [\r\n                            transition(`* => ${AnimationState.ENTER}`, [\r\n                                style({ transform: 'translateY(-30%)' }),\r\n                                animate('0.2s ease-out', style({ transform: 'translateY(0)' }))\r\n                            ]),\r\n                            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\r\n                                style({ transform: 'translateY(0)', opacity: 1 }),\r\n                                animate('0.2s ease-out', style({ transform: 'translateY(-30%)', opacity: 0 }))\r\n                            ])\r\n                        ])\r\n                    ],\r\n                    providers: [NgxMaterialTimepickerService]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: NgxMaterialTimepickerService }, { type: NgxMaterialTimepickerEventService }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [TIME_LOCALE]\r\n                }] }]; }, propDecorators: { defaultTime: [{\r\n                type: Input\r\n            }], onKeydown: [{\r\n                type: HostListener,\r\n                args: ['keydown', ['$event']]\r\n            }] } });\r\n\r\nclass DomService {\r\n    constructor(cfr, appRef, injector, document) {\r\n        this.cfr = cfr;\r\n        this.appRef = appRef;\r\n        this.injector = injector;\r\n        this.document = document;\r\n    }\r\n    appendTimepickerToBody(timepicker, config) {\r\n        this.componentRef = this.cfr.resolveComponentFactory(timepicker).create(this.injector);\r\n        Object.keys(config).forEach(key => this.componentRef.instance[key] = config[key]);\r\n        this.appRef.attachView(this.componentRef.hostView);\r\n        const domElement = this.componentRef.hostView\r\n            .rootNodes[0];\r\n        this.document.body.appendChild(domElement);\r\n    }\r\n    destroyTimepicker() {\r\n        this.componentRef.destroy();\r\n        this.appRef.detachView(this.componentRef.hostView);\r\n    }\r\n}\r\nDomService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: DomService, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: i0.Injector }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nDomService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: DomService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: DomService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }]; } });\r\n\r\nconst ESCAPE = 27;\r\nclass NgxMaterialTimepickerComponent {\r\n    constructor(eventService, domService) {\r\n        this.eventService = eventService;\r\n        this.domService = domService;\r\n        this.timeUpdated = new Subject();\r\n        this.isEsc = true;\r\n        this.hoursOnly = false;\r\n        this.timeSet = new EventEmitter();\r\n        this.opened = new EventEmitter();\r\n        this.closed = new EventEmitter();\r\n        this.hourSelected = new EventEmitter();\r\n        this.timeChanged = new EventEmitter();\r\n        this.unsubscribe = new Subject();\r\n    }\r\n    /**\r\n     * @deprecated Since version 5.1.1. Will be deleted on version 6.0.0. Use @Input() theme instead\r\n     */\r\n    set ngxMaterialTimepickerTheme(theme) {\r\n        console.warn(`'ngxMaterialTimepickerTheme' is deprecated. Use 'theme' instead`);\r\n        this._ngxMaterialTimepickerTheme = theme;\r\n    }\r\n    set format(value) {\r\n        this._format = value === 24 ? 24 : 12;\r\n    }\r\n    get format() {\r\n        return this.timepickerInput ? this.timepickerInput.format : this._format;\r\n    }\r\n    set minutesGap(gap) {\r\n        if (gap == null) {\r\n            return;\r\n        }\r\n        gap = Math.floor(gap);\r\n        this._minutesGap = gap <= 59 ? gap : 1;\r\n    }\r\n    get minutesGap() {\r\n        return this._minutesGap;\r\n    }\r\n    get minTime() {\r\n        return this.timepickerInput ? this.timepickerInput.min : this.min;\r\n    }\r\n    get maxTime() {\r\n        return this.timepickerInput ? this.timepickerInput.max : this.max;\r\n    }\r\n    get disabled() {\r\n        return this.timepickerInput && this.timepickerInput.disabled;\r\n    }\r\n    get time() {\r\n        return this.timepickerInput && this.timepickerInput.value;\r\n    }\r\n    get inputElement() {\r\n        return this.timepickerInput && this.timepickerInput.element;\r\n    }\r\n    /***\r\n     * Register an input with this timepicker.\r\n     * input - The timepicker input to register with this timepicker\r\n     */\r\n    registerInput(input) {\r\n        if (this.timepickerInput) {\r\n            throw Error('A Timepicker can only be associated with a single input.');\r\n        }\r\n        this.timepickerInput = input;\r\n    }\r\n    open() {\r\n        this.domService.appendTimepickerToBody(NgxMaterialTimepickerContainerComponent, {\r\n            timepickerBaseRef: this,\r\n            time: this.time,\r\n            defaultTime: this.defaultTime,\r\n            maxTime: this.maxTime,\r\n            minTime: this.minTime,\r\n            format: this.format,\r\n            minutesGap: this.minutesGap,\r\n            disableAnimation: this.disableAnimation,\r\n            cancelBtnTmpl: this.cancelBtnTmpl,\r\n            confirmBtnTmpl: this.confirmBtnTmpl,\r\n            editableHintTmpl: this.editableHintTmpl,\r\n            disabled: this.disabled,\r\n            enableKeyboardInput: this.enableKeyboardInput,\r\n            preventOverlayClick: this.preventOverlayClick,\r\n            appendToInput: this.appendToInput,\r\n            hoursOnly: this.hoursOnly,\r\n            theme: this.theme || this._ngxMaterialTimepickerTheme,\r\n            timepickerClass: this.timepickerClass,\r\n            inputElement: this.inputElement\r\n        });\r\n        this.opened.next();\r\n        this.subscribeToEvents();\r\n    }\r\n    close() {\r\n        this.domService.destroyTimepicker();\r\n        this.closed.next();\r\n        this.unsubscribeFromEvents();\r\n    }\r\n    updateTime(time) {\r\n        this.timeUpdated.next(time);\r\n    }\r\n    subscribeToEvents() {\r\n        merge(this.eventService.backdropClick, this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\r\n            .pipe(takeUntil(this.unsubscribe))\r\n            .subscribe(() => this.close());\r\n    }\r\n    unsubscribeFromEvents() {\r\n        this.unsubscribe.next();\r\n        this.unsubscribe.complete();\r\n    }\r\n}\r\nNgxMaterialTimepickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerComponent, deps: [{ token: NgxMaterialTimepickerEventService }, { token: DomService }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMaterialTimepickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: NgxMaterialTimepickerComponent, selector: \"ngx-material-timepicker\", inputs: { cancelBtnTmpl: \"cancelBtnTmpl\", editableHintTmpl: \"editableHintTmpl\", confirmBtnTmpl: \"confirmBtnTmpl\", isEsc: [\"ESC\", \"isEsc\"], enableKeyboardInput: \"enableKeyboardInput\", preventOverlayClick: \"preventOverlayClick\", disableAnimation: \"disableAnimation\", appendToInput: \"appendToInput\", hoursOnly: \"hoursOnly\", defaultTime: \"defaultTime\", timepickerClass: \"timepickerClass\", theme: \"theme\", min: \"min\", max: \"max\", ngxMaterialTimepickerTheme: \"ngxMaterialTimepickerTheme\", format: \"format\", minutesGap: \"minutesGap\" }, outputs: { timeSet: \"timeSet\", opened: \"opened\", closed: \"closed\", hourSelected: \"hourSelected\", timeChanged: \"timeChanged\" }, ngImport: i0, template: '', isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-material-timepicker',\r\n                    template: '',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: NgxMaterialTimepickerEventService }, { type: DomService }]; }, propDecorators: { cancelBtnTmpl: [{\r\n                type: Input\r\n            }], editableHintTmpl: [{\r\n                type: Input\r\n            }], confirmBtnTmpl: [{\r\n                type: Input\r\n            }], isEsc: [{\r\n                type: Input,\r\n                args: ['ESC']\r\n            }], enableKeyboardInput: [{\r\n                type: Input\r\n            }], preventOverlayClick: [{\r\n                type: Input\r\n            }], disableAnimation: [{\r\n                type: Input\r\n            }], appendToInput: [{\r\n                type: Input\r\n            }], hoursOnly: [{\r\n                type: Input\r\n            }], defaultTime: [{\r\n                type: Input\r\n            }], timepickerClass: [{\r\n                type: Input\r\n            }], theme: [{\r\n                type: Input\r\n            }], min: [{\r\n                type: Input\r\n            }], max: [{\r\n                type: Input\r\n            }], ngxMaterialTimepickerTheme: [{\r\n                type: Input\r\n            }], format: [{\r\n                type: Input\r\n            }], minutesGap: [{\r\n                type: Input\r\n            }], timeSet: [{\r\n                type: Output\r\n            }], opened: [{\r\n                type: Output\r\n            }], closed: [{\r\n                type: Output\r\n            }], hourSelected: [{\r\n                type: Output\r\n            }], timeChanged: [{\r\n                type: Output\r\n            }] } });\r\n\r\n/* To override a default toggle icon */\r\nclass NgxMaterialTimepickerToggleIconDirective {\r\n}\r\nNgxMaterialTimepickerToggleIconDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerToggleIconDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\r\nNgxMaterialTimepickerToggleIconDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.17\", type: NgxMaterialTimepickerToggleIconDirective, selector: \"[ngxMaterialTimepickerToggleIcon]\", ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerToggleIconDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{ selector: '[ngxMaterialTimepickerToggleIcon]' }]\r\n        }] });\r\n\r\nclass NgxMaterialTimepickerToggleComponent {\r\n    get disabled() {\r\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\r\n    }\r\n    set disabled(value) {\r\n        this._disabled = value;\r\n    }\r\n    open(event) {\r\n        if (this.timepicker) {\r\n            this.timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n}\r\nNgxMaterialTimepickerToggleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerToggleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMaterialTimepickerToggleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: NgxMaterialTimepickerToggleComponent, selector: \"ngx-material-timepicker-toggle\", inputs: { timepicker: [\"for\", \"timepicker\"], disabled: \"disabled\" }, queries: [{ propertyName: \"customIcon\", first: true, predicate: NgxMaterialTimepickerToggleIconDirective, descendants: true, static: true }], ngImport: i0, template: \"<button class=\\\"ngx-material-timepicker-toggle\\\" (click)=\\\"open($event)\\\" [disabled]=\\\"disabled\\\" type=\\\"button\\\">\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" *ngIf=\\\"!customIcon\\\">\\n        <path\\n            d=\\\"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\\\"/>\\n    </svg>\\n\\n    <ng-content select=\\\"[ngxMaterialTimepickerToggleIcon]\\\"></ng-content>\\n</button>\\n\", styles: [\".ngx-material-timepicker-toggle{display:flex;justify-content:center;align-items:center;padding:4px;background-color:transparent;border-radius:50%;text-align:center;border:none;outline:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;transition:background-color .3s;cursor:pointer}.ngx-material-timepicker-toggle:focus{background-color:#00000012}\\n\"], directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerToggleComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-material-timepicker-toggle',\r\n                    templateUrl: 'ngx-material-timepicker-toggle.component.html',\r\n                    styleUrls: ['ngx-material-timepicker-toggle.component.scss']\r\n                }]\r\n        }], propDecorators: { timepicker: [{\r\n                type: Input,\r\n                args: ['for']\r\n            }], disabled: [{\r\n                type: Input\r\n            }], customIcon: [{\r\n                type: ContentChild,\r\n                args: [NgxMaterialTimepickerToggleIconDirective, { static: true }]\r\n            }] } });\r\n\r\nclass TimepickerDirective {\r\n    constructor(elementRef, locale) {\r\n        this.elementRef = elementRef;\r\n        this.locale = locale;\r\n        this._format = 12;\r\n        this._value = '';\r\n        this.timepickerSubscriptions = [];\r\n        this.onTouched = () => {\r\n        };\r\n        this.onChange = () => {\r\n        };\r\n    }\r\n    set format(value) {\r\n        this._format = value === 24 ? 24 : 12;\r\n        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);\r\n        if (isDynamicallyChanged) {\r\n            this.value = this._value;\r\n            this._timepicker.updateTime(this._value);\r\n        }\r\n        this.previousFormat = this._format;\r\n    }\r\n    get format() {\r\n        return this._format;\r\n    }\r\n    set min(value) {\r\n        console.log(value);\r\n        if (typeof value === 'string') {\r\n            this._min = TimeAdapter.parseTime(value, { locale: this.locale, format: this.format });\r\n            return;\r\n        }\r\n        this._min = value;\r\n    }\r\n    get min() {\r\n        return this._min;\r\n    }\r\n    set max(value) {\r\n        if (typeof value === 'string') {\r\n            this._max = TimeAdapter.parseTime(value, { locale: this.locale, format: this.format });\r\n            return;\r\n        }\r\n        this._max = value;\r\n    }\r\n    get max() {\r\n        return this._max;\r\n    }\r\n    set timepicker(picker) {\r\n        this.registerTimepicker(picker);\r\n    }\r\n    set value(value) {\r\n        if (!value) {\r\n            this._value = '';\r\n            this.updateInputValue();\r\n            return;\r\n        }\r\n        this.setTimeIfAvailable(value);\r\n    }\r\n    get value() {\r\n        if (!this._value) {\r\n            return '';\r\n        }\r\n        return TimeAdapter.toLocaleTimeString(this._value, { format: this.format, locale: this.locale });\r\n    }\r\n    get element() {\r\n        return this.elementRef && this.elementRef.nativeElement;\r\n    }\r\n    set defaultTime(time) {\r\n        this._timepicker.defaultTime = TimeAdapter.formatTime(time, { locale: this.locale, format: this.format });\r\n    }\r\n    updateValue(value) {\r\n        this.value = value;\r\n        this.onChange(value);\r\n    }\r\n    ngOnChanges(changes) {\r\n        var _a;\r\n        const value = (_a = changes === null || changes === void 0 ? void 0 : changes.value) === null || _a === void 0 ? void 0 : _a.currentValue;\r\n        if (value) {\r\n            // Call setTimeIfAvailable after @Input setters\r\n            this.setTimeIfAvailable(value);\r\n            this.defaultTime = value;\r\n        }\r\n    }\r\n    onClick(event) {\r\n        if (!this.disableClick) {\r\n            this._timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n    writeValue(value) {\r\n        this.value = value;\r\n        if (value) {\r\n            this.defaultTime = value;\r\n        }\r\n    }\r\n    registerOnChange(fn) {\r\n        this.onChange = fn;\r\n    }\r\n    registerOnTouched(fn) {\r\n        this.onTouched = fn;\r\n    }\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n    }\r\n    ngOnDestroy() {\r\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n    registerTimepicker(picker) {\r\n        if (picker) {\r\n            this._timepicker = picker;\r\n            this._timepicker.registerInput(this);\r\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time) => {\r\n                this.value = time;\r\n                this.onChange(this.value);\r\n                this.onTouched();\r\n                this.defaultTime = this._value;\r\n            }));\r\n        }\r\n        else {\r\n            throw new Error('NgxMaterialTimepickerComponent is not defined.' +\r\n                ' Please make sure you passed the timepicker to ngxTimepicker directive');\r\n        }\r\n    }\r\n    updateInputValue() {\r\n        this.elementRef.nativeElement.value = this.value;\r\n    }\r\n    setTimeIfAvailable(value) {\r\n        var _a;\r\n        const time = TimeAdapter.formatTime(value, { locale: this.locale, format: this.format });\r\n        const isAvailable = TimeAdapter.isTimeAvailable(time, this._min, this._max, 'minutes', (_a = this._timepicker) === null || _a === void 0 ? void 0 : _a.minutesGap, this._format);\r\n        if (isAvailable) {\r\n            this._value = time;\r\n            this.updateInputValue();\r\n        }\r\n        else {\r\n            this.value = null;\r\n            console.warn('Selected time doesn\\'t match min or max value');\r\n        }\r\n    }\r\n}\r\nTimepickerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TimepickerDirective, deps: [{ token: i0.ElementRef }, { token: TIME_LOCALE }], target: i0.ɵɵFactoryTarget.Directive });\r\nTimepickerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.17\", type: TimepickerDirective, selector: \"[ngxTimepicker]\", inputs: { format: \"format\", min: \"min\", max: \"max\", timepicker: [\"ngxTimepicker\", \"timepicker\"], value: \"value\", disabled: \"disabled\", disableClick: \"disableClick\" }, host: { listeners: { \"change\": \"updateValue($event.target.value)\", \"blur\": \"onTouched()\", \"click\": \"onClick($event)\" }, properties: { \"disabled\": \"disabled\" } }, providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: TimepickerDirective,\r\n            multi: true\r\n        }\r\n    ], usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TimepickerDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[ngxTimepicker]',\r\n                    providers: [\r\n                        {\r\n                            provide: NG_VALUE_ACCESSOR,\r\n                            useExisting: TimepickerDirective,\r\n                            multi: true\r\n                        }\r\n                    ],\r\n                    host: {\r\n                        '[disabled]': 'disabled',\r\n                        '(change)': 'updateValue($event.target.value)',\r\n                        '(blur)': 'onTouched()',\r\n                    },\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [TIME_LOCALE]\r\n                }] }]; }, propDecorators: { format: [{\r\n                type: Input\r\n            }], min: [{\r\n                type: Input\r\n            }], max: [{\r\n                type: Input\r\n            }], timepicker: [{\r\n                type: Input,\r\n                args: ['ngxTimepicker']\r\n            }], value: [{\r\n                type: Input\r\n            }], disabled: [{\r\n                type: Input\r\n            }], disableClick: [{\r\n                type: Input\r\n            }], onClick: [{\r\n                type: HostListener,\r\n                args: ['click', ['$event']]\r\n            }] } });\r\n\r\nclass TimeFormatterPipe {\r\n    transform(time, timeUnit) {\r\n        if (time == null || time === '') {\r\n            return time;\r\n        }\r\n        switch (timeUnit) {\r\n            case TimeUnit.HOUR:\r\n                return DateTime.fromObject({ hour: +time }).toFormat('HH');\r\n            case TimeUnit.MINUTE:\r\n                return DateTime.fromObject({ minute: +time }).toFormat('mm');\r\n            default:\r\n                throw new Error('no such time unit');\r\n        }\r\n    }\r\n}\r\nTimeFormatterPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TimeFormatterPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\r\nTimeFormatterPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TimeFormatterPipe, name: \"timeFormatter\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TimeFormatterPipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'timeFormatter'\r\n                }]\r\n        }] });\r\n\r\nclass NgxTimepickerTimeControlComponent {\r\n    constructor(timeParser) {\r\n        this.timeParser = timeParser;\r\n        this.timeChanged = new EventEmitter();\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.timeList && this.time != null) {\r\n            if (this.isSelectedTimeDisabled(this.time)) {\r\n                this.setAvailableTime();\r\n            }\r\n        }\r\n    }\r\n    changeTime(event) {\r\n        event.stopPropagation();\r\n        const char = String.fromCharCode(event.keyCode);\r\n        const time = concatTime(String(this.time), char);\r\n        this.changeTimeIfValid(time);\r\n    }\r\n    onKeydown(event) {\r\n        event.stopPropagation();\r\n        if (!isDigit(event)) {\r\n            event.preventDefault();\r\n        }\r\n        switch (event.key) {\r\n            case 'ArrowUp':\r\n                this.increase();\r\n                break;\r\n            case 'ArrowDown':\r\n                this.decrease();\r\n                break;\r\n        }\r\n        if (this.preventTyping && event.key !== 'Tab') {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    increase() {\r\n        if (!this.disabled) {\r\n            let nextTime = +this.time + (this.minutesGap || 1);\r\n            if (nextTime > this.max) {\r\n                nextTime = this.min;\r\n            }\r\n            if (this.isSelectedTimeDisabled(nextTime)) {\r\n                nextTime = this.getAvailableTime(nextTime, this.getNextAvailableTime.bind(this));\r\n            }\r\n            if (nextTime !== this.time) {\r\n                this.timeChanged.emit(nextTime);\r\n            }\r\n        }\r\n    }\r\n    decrease() {\r\n        if (!this.disabled) {\r\n            let previousTime = +this.time - (this.minutesGap || 1);\r\n            if (previousTime < this.min) {\r\n                previousTime = this.minutesGap ? this.max - (this.minutesGap - 1) : this.max;\r\n            }\r\n            if (this.isSelectedTimeDisabled(previousTime)) {\r\n                previousTime = this.getAvailableTime(previousTime, this.getPrevAvailableTime.bind(this));\r\n            }\r\n            if (previousTime !== this.time) {\r\n                this.timeChanged.emit(previousTime);\r\n            }\r\n        }\r\n    }\r\n    onFocus() {\r\n        this.isFocused = true;\r\n        this.previousTime = this.time;\r\n    }\r\n    onBlur() {\r\n        this.isFocused = false;\r\n        if (this.previousTime !== this.time) {\r\n            this.changeTimeIfValid(+this.time);\r\n        }\r\n    }\r\n    onModelChange(value) {\r\n        this.time = +this.timeParser.transform(value, this.timeUnit);\r\n    }\r\n    changeTimeIfValid(value) {\r\n        if (!isNaN(value)) {\r\n            this.time = value;\r\n            if (this.time > this.max) {\r\n                const timeString = String(value);\r\n                this.time = +timeString[timeString.length - 1];\r\n            }\r\n            if (this.time < this.min) {\r\n                this.time = this.min;\r\n            }\r\n            this.timeChanged.emit(this.time);\r\n        }\r\n    }\r\n    isSelectedTimeDisabled(time) {\r\n        return this.timeList.find((faceTime) => faceTime.time === time).disabled;\r\n    }\r\n    getNextAvailableTime(index) {\r\n        const timeCollection = this.timeList;\r\n        const maxValue = timeCollection.length;\r\n        for (let i = index + 1; i < maxValue; i++) {\r\n            const time = timeCollection[i];\r\n            if (!time.disabled) {\r\n                return time.time;\r\n            }\r\n        }\r\n    }\r\n    getPrevAvailableTime(index) {\r\n        for (let i = index; i >= 0; i--) {\r\n            const time = this.timeList[i];\r\n            if (!time.disabled) {\r\n                return time.time;\r\n            }\r\n        }\r\n    }\r\n    getAvailableTime(currentTime, fn) {\r\n        const currentTimeIndex = this.timeList.findIndex(time => time.time === currentTime);\r\n        const availableTime = fn(currentTimeIndex);\r\n        return availableTime != null ? availableTime : this.time;\r\n    }\r\n    setAvailableTime() {\r\n        const availableTime = this.timeList.find(t => !t.disabled);\r\n        if (availableTime != null) {\r\n            this.time = availableTime.time;\r\n            this.timeChanged.emit(this.time);\r\n        }\r\n    }\r\n}\r\nNgxTimepickerTimeControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxTimepickerTimeControlComponent, deps: [{ token: TimeParserPipe }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxTimepickerTimeControlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: NgxTimepickerTimeControlComponent, selector: \"ngx-timepicker-time-control\", inputs: { time: \"time\", min: \"min\", max: \"max\", placeholder: \"placeholder\", timeUnit: \"timeUnit\", disabled: \"disabled\", timeList: \"timeList\", preventTyping: \"preventTyping\", minutesGap: \"minutesGap\" }, outputs: { timeChanged: \"timeChanged\" }, providers: [TimeParserPipe], usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"ngx-timepicker-control\\\" [ngClass]=\\\"{'ngx-timepicker-control--active': isFocused}\\\">\\n    <!--suppress HtmlFormInputWithoutLabel -->\\n    <input class=\\\"ngx-timepicker-control__input\\\"\\n           maxlength=\\\"2\\\"\\n           [ngModel]=\\\"time | timeParser: timeUnit | timeLocalizer: timeUnit : true\\\"\\n           (ngModelChange)=\\\"onModelChange($event)\\\"\\n           [placeholder]=\\\"placeholder\\\"\\n           [disabled]=\\\"disabled\\\"\\n           (keydown)=\\\"onKeydown($event)\\\"\\n           (keypress)=\\\"changeTime($event)\\\"\\n           (focus)=\\\"onFocus()\\\"\\n           (blur)=\\\"onBlur()\\\">\\n    <div class=\\\"ngx-timepicker-control__arrows\\\">\\n            <span class=\\\"ngx-timepicker-control__arrow\\\" role=\\\"button\\\" (click)=\\\"increase()\\\">\\n                &#9650;\\n            </span>\\n        <span class=\\\"ngx-timepicker-control__arrow\\\" role=\\\"button\\\" (click)=\\\"decrease()\\\">\\n                &#9660;\\n            </span>\\n    </div>\\n</div>\\n\", styles: [\".ngx-timepicker-control{position:relative;display:flex;width:60px;height:30px;padding:0 5px;box-sizing:border-box}.ngx-timepicker-control--active:after{content:\\\"\\\";position:absolute;bottom:-2px;left:0;width:100%;height:1px;background-color:#00bfff}.ngx-timepicker-control__input{width:100%;height:100%;padding:0 5px 0 0;border:0;font-size:1rem;color:inherit;outline:none;text-align:center}.ngx-timepicker-control__input:disabled{background-color:transparent}.ngx-timepicker-control__arrows{position:absolute;right:2px;top:0;display:flex;flex-direction:column}.ngx-timepicker-control__arrow{font-size:11px;color:#0006;cursor:pointer;transition:color .2s;-webkit-user-select:none;-moz-user-select:none;user-select:none}.ngx-timepicker-control__arrow:hover{color:#000000e6}\\n\"], directives: [{ type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i4.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i4.MaxLengthValidator, selector: \"[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]\", inputs: [\"maxlength\"] }, { type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i4.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }], pipes: { \"timeLocalizer\": TimeLocalizerPipe, \"timeParser\": TimeParserPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxTimepickerTimeControlComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-timepicker-time-control',\r\n                    templateUrl: './ngx-timepicker-time-control.component.html',\r\n                    styleUrls: ['./ngx-timepicker-time-control.component.scss'],\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    providers: [TimeParserPipe],\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: TimeParserPipe }]; }, propDecorators: { time: [{\r\n                type: Input\r\n            }], min: [{\r\n                type: Input\r\n            }], max: [{\r\n                type: Input\r\n            }], placeholder: [{\r\n                type: Input\r\n            }], timeUnit: [{\r\n                type: Input\r\n            }], disabled: [{\r\n                type: Input\r\n            }], timeList: [{\r\n                type: Input\r\n            }], preventTyping: [{\r\n                type: Input\r\n            }], minutesGap: [{\r\n                type: Input\r\n            }], timeChanged: [{\r\n                type: Output\r\n            }] } });\r\nfunction concatTime(currentTime, nextTime) {\r\n    const isNumber = /\\d/.test(nextTime);\r\n    if (isNumber) {\r\n        const time = currentTime + nextTime;\r\n        return +time;\r\n    }\r\n}\r\n\r\nclass NgxTimepickerPeriodSelectorComponent {\r\n    constructor(locale) {\r\n        this.locale = locale;\r\n        this.periodSelected = new EventEmitter();\r\n        this.period = TimePeriod;\r\n        this.meridiems = Info.meridiems({ locale: this.locale });\r\n    }\r\n    set selectedPeriod(period) {\r\n        if (period) {\r\n            const periods = [TimePeriod.AM, TimePeriod.PM];\r\n            this.localizedPeriod = this.meridiems[periods.indexOf(period)];\r\n        }\r\n    }\r\n    open() {\r\n        if (!this.disabled) {\r\n            this.isOpened = true;\r\n        }\r\n    }\r\n    select(period) {\r\n        this.periodSelected.next(period);\r\n        this.isOpened = false;\r\n    }\r\n    backdropClick() {\r\n        this.isOpened = false;\r\n    }\r\n}\r\nNgxTimepickerPeriodSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxTimepickerPeriodSelectorComponent, deps: [{ token: TIME_LOCALE }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxTimepickerPeriodSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: NgxTimepickerPeriodSelectorComponent, selector: \"ngx-timepicker-period-selector\", inputs: { isOpened: \"isOpened\", disabled: \"disabled\", selectedPeriod: \"selectedPeriod\" }, outputs: { periodSelected: \"periodSelected\" }, ngImport: i0, template: \"<div class=\\\"period\\\">\\n    <div class=\\\"period-control\\\">\\n        <button class=\\\"period-control__button period__btn--default\\\"\\n                [ngClass]=\\\"{'period-control__button--disabled': disabled}\\\"\\n                type=\\\"button\\\"\\n                (click)=\\\"open()\\\">\\n            <span>{{localizedPeriod}}</span>\\n            <span class=\\\"period-control__arrow\\\">&#9660;</span>\\n        </button>\\n    </div>\\n    <ul class=\\\"period-selector\\\" @scaleInOut *ngIf=\\\"isOpened\\\" [timepickerAutofocus]=\\\"true\\\">\\n        <li>\\n            <button class=\\\"period-selector__button period__btn--default\\\"\\n                    type=\\\"button\\\"\\n                    (click)=\\\"select(period.AM)\\\"\\n                    [ngClass]=\\\"{'period-selector__button--active': localizedPeriod === meridiems[0]}\\\">{{meridiems[0]}}</button>\\n        </li>\\n        <li>\\n            <button class=\\\"period-selector__button period__btn--default\\\"\\n                    type=\\\"button\\\"\\n                    (click)=\\\"select(period.PM)\\\"\\n                    [ngClass]=\\\"{'period-selector__button--active': localizedPeriod === meridiems[1]}\\\">{{meridiems[1]}}</button>\\n        </li>\\n    </ul>\\n</div>\\n<div class=\\\"overlay\\\" (click)=\\\"backdropClick()\\\" *ngIf=\\\"isOpened\\\"></div>\\n\", styles: [\".period{position:relative}.period__btn--default{padding:0;border:none;background-color:transparent;cursor:pointer;text-align:left;-webkit-user-select:none;-moz-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;outline:none}.period-control{position:relative}.period-control__button{position:relative;width:60px;font-size:1rem;color:inherit;text-align:center}.period-control__button:not(.period-control__button--disabled):focus:after{content:\\\"\\\";position:absolute;bottom:-8px;left:0;width:100%;height:1px;background-color:#00bfff}.period-control__arrow{margin-left:10px;font-size:12px;color:#0006}.period-selector{position:absolute;top:calc(50% - 50px);right:calc(-50% + -50px);max-width:135px;width:150px;padding:6px 0;margin:0;list-style:none;background-color:#f5f5f5;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;z-index:201}.period-selector__button{width:100%;height:48px;padding:0 16px;line-height:48px}.period-selector__button--active{color:#00bfff}.period-selector__button:focus{background-color:#eee}.overlay{position:fixed;width:100%;height:100%;top:0;left:0;background-color:transparent;z-index:200}\\n\"], directives: [{ type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: AutofocusDirective, selector: \"[timepickerAutofocus]\", inputs: [\"timepickerAutofocus\"] }], animations: [\r\n        trigger('scaleInOut', [\r\n            transition(':enter', [\r\n                style({ transform: 'scale(0)', opacity: 0 }),\r\n                animate(200, style({ transform: 'scale(1)', opacity: 1 }))\r\n            ]),\r\n            transition(':leave', [\r\n                animate(200, style({ transform: 'scale(0)', opacity: 0 }))\r\n            ])\r\n        ])\r\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxTimepickerPeriodSelectorComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-timepicker-period-selector',\r\n                    templateUrl: 'ngx-timepicker-period-selector.component.html',\r\n                    styleUrls: ['./ngx-timepicker-period-selector.component.scss'],\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    animations: [\r\n                        trigger('scaleInOut', [\r\n                            transition(':enter', [\r\n                                style({ transform: 'scale(0)', opacity: 0 }),\r\n                                animate(200, style({ transform: 'scale(1)', opacity: 1 }))\r\n                            ]),\r\n                            transition(':leave', [\r\n                                animate(200, style({ transform: 'scale(0)', opacity: 0 }))\r\n                            ])\r\n                        ])\r\n                    ]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [TIME_LOCALE]\r\n                }] }]; }, propDecorators: { isOpened: [{\r\n                type: Input\r\n            }], disabled: [{\r\n                type: Input\r\n            }], selectedPeriod: [{\r\n                type: Input\r\n            }], periodSelected: [{\r\n                type: Output\r\n            }] } });\r\n\r\nclass NgxTimepickerFieldComponent {\r\n    constructor(timepickerService, locale) {\r\n        this.timepickerService = timepickerService;\r\n        this.locale = locale;\r\n        this.minHour = 1;\r\n        this.maxHour = 12;\r\n        this.timeUnit = TimeUnit;\r\n        this.buttonAlign = 'right';\r\n        this.timeChanged = new EventEmitter();\r\n        this._format = 12;\r\n        this.unsubscribe$ = new Subject();\r\n        this.isFirstTimeChange = true;\r\n        this.onChange = () => {\r\n        };\r\n    }\r\n    set format(value) {\r\n        this._format = value === 24 ? 24 : 12;\r\n        this.minHour = this._format === 12 ? 1 : 0;\r\n        this.maxHour = this._format === 12 ? 12 : 23;\r\n        this.hoursList = TimepickerTimeUtils.getHours(this._format);\r\n        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);\r\n        if (isDynamicallyChanged) {\r\n            this.updateTime(this.timepickerTime);\r\n        }\r\n        this.previousFormat = this._format;\r\n    }\r\n    get format() {\r\n        return this._format;\r\n    }\r\n    set min(value) {\r\n        if (typeof value === 'string') {\r\n            this._min = TimeAdapter.parseTime(value, { locale: this.locale, format: this.format });\r\n            return;\r\n        }\r\n        this._min = value;\r\n    }\r\n    get min() {\r\n        return this._min;\r\n    }\r\n    set max(value) {\r\n        if (typeof value === 'string') {\r\n            this._max = TimeAdapter.parseTime(value, { locale: this.locale, format: this.format });\r\n            return;\r\n        }\r\n        this._max = value;\r\n    }\r\n    get max() {\r\n        return this._max;\r\n    }\r\n    set defaultTime(val) {\r\n        this._defaultTime = val;\r\n        this.isDefaultTime = !!val;\r\n    }\r\n    get defaultTime() {\r\n        return this._defaultTime;\r\n    }\r\n    set minutesGap(gap) {\r\n        if (gap == null) {\r\n            return;\r\n        }\r\n        gap = Math.floor(gap);\r\n        this._minutesGap = gap <= 59 ? gap : 1;\r\n    }\r\n    get minutesGap() {\r\n        return this._minutesGap;\r\n    }\r\n    ngOnInit() {\r\n        this.initTime(this.defaultTime);\r\n        this.hoursList = TimepickerTimeUtils.getHours(this._format);\r\n        this.minutesList = TimepickerTimeUtils.getMinutes();\r\n        this.isTimeRangeSet = !!(this.min || this.max);\r\n        this.hour$ = this.timepickerService.selectedHour.pipe(tap((clockTime) => this.selectedHour = clockTime.time), map(this.changeDefaultTimeValue.bind(this)), tap(() => this.isTimeRangeSet && this.updateAvailableMinutes()));\r\n        this.minute$ = this.timepickerService.selectedMinute.pipe(map(this.changeDefaultTimeValue.bind(this)), tap(() => this.isFirstTimeChange = false));\r\n        if (this.format === 12) {\r\n            this.timepickerService.selectedPeriod.pipe(distinctUntilChanged(), tap((period) => this.period = period), tap(period => this.isChangePeriodDisabled = this.isPeriodDisabled(period)), takeUntil(this.unsubscribe$)).subscribe(() => this.isTimeRangeSet && this.updateAvailableTime());\r\n        }\r\n        else if (this.isTimeRangeSet) {\r\n            this.updateAvailableTime();\r\n        }\r\n    }\r\n    writeValue(val) {\r\n        if (val) {\r\n            this.initTime(val);\r\n        }\r\n        else {\r\n            this.resetTime();\r\n        }\r\n    }\r\n    registerOnTouched(fn) {\r\n    }\r\n    registerOnChange(fn) {\r\n        this.onChange = fn;\r\n    }\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n    }\r\n    changeHour(hour) {\r\n        this.timepickerService.hour = this.hoursList.find(h => h.time === hour);\r\n        this.changeTime();\r\n    }\r\n    changeMinute(minute) {\r\n        this.timepickerService.minute = this.minutesList.find(m => m.time === minute);\r\n        this.changeTime();\r\n    }\r\n    changePeriod(period) {\r\n        this.timepickerService.period = period;\r\n        this.changeTime();\r\n    }\r\n    onTimeSet(time) {\r\n        this.updateTime(time);\r\n        this.emitLocalTimeChange(time);\r\n    }\r\n    ngOnDestroy() {\r\n        this.unsubscribe$.next();\r\n        this.unsubscribe$.complete();\r\n    }\r\n    changeTime() {\r\n        const time = this.timepickerService.getFullTime(this.format);\r\n        this.timepickerTime = time;\r\n        this.emitLocalTimeChange(time);\r\n    }\r\n    resetTime() {\r\n        this.timepickerService.hour = { angle: 0, time: null };\r\n        this.timepickerService.minute = { angle: 0, time: null };\r\n    }\r\n    emitLocalTimeChange(time) {\r\n        const localTime = TimeAdapter.toLocaleTimeString(time, { format: this.format, locale: this.locale });\r\n        this.onChange(localTime);\r\n        this.timeChanged.emit(localTime);\r\n    }\r\n    changeDefaultTimeValue(clockFaceTime) {\r\n        if (!this.isDefaultTime && this.isFirstTimeChange) {\r\n            return Object.assign(Object.assign({}, clockFaceTime), { time: null });\r\n        }\r\n        return clockFaceTime;\r\n    }\r\n    updateAvailableHours() {\r\n        this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\r\n            min: this.min,\r\n            max: this.max,\r\n            format: this.format,\r\n            period: this.period\r\n        });\r\n    }\r\n    updateAvailableMinutes() {\r\n        this.minutesList = TimepickerTimeUtils.disableMinutes(this.minutesList, this.selectedHour, {\r\n            min: this.min,\r\n            max: this.max,\r\n            format: this.format,\r\n            period: this.period\r\n        });\r\n    }\r\n    updateAvailableTime() {\r\n        this.updateAvailableHours();\r\n        if (this.selectedHour) {\r\n            this.updateAvailableMinutes();\r\n        }\r\n    }\r\n    updateTime(time) {\r\n        if (time) {\r\n            const formattedTime = TimeAdapter.formatTime(time, { locale: this.locale, format: this.format });\r\n            this.timepickerService.setDefaultTimeIfAvailable(formattedTime, this.min, this.max, this.format);\r\n            this.timepickerTime = formattedTime;\r\n        }\r\n    }\r\n    initTime(time) {\r\n        const isDefaultTimeAvailable = TimeAdapter\r\n            .isTimeAvailable(time, this.min, this.max, 'minutes', null, this.format);\r\n        if (!isDefaultTimeAvailable) {\r\n            if (this.min) {\r\n                this.updateTime(TimeAdapter.fromDateTimeToString(this.min, this.format));\r\n                return;\r\n            }\r\n            if (this.max) {\r\n                this.updateTime(TimeAdapter.fromDateTimeToString(this.max, this.format));\r\n                return;\r\n            }\r\n        }\r\n        this.updateTime(time);\r\n    }\r\n    isPeriodDisabled(period) {\r\n        return TimepickerTimeUtils.disableHours(TimepickerTimeUtils.getHours(12), {\r\n            min: this.min,\r\n            max: this.max,\r\n            format: 12,\r\n            period: period === TimePeriod.AM ? TimePeriod.PM : TimePeriod.AM\r\n        }).every(time => time.disabled);\r\n    }\r\n}\r\nNgxTimepickerFieldComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxTimepickerFieldComponent, deps: [{ token: NgxMaterialTimepickerService }, { token: TIME_LOCALE }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxTimepickerFieldComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: NgxTimepickerFieldComponent, selector: \"ngx-timepicker-field\", inputs: { disabled: \"disabled\", toggleIcon: \"toggleIcon\", buttonAlign: \"buttonAlign\", clockTheme: \"clockTheme\", controlOnly: \"controlOnly\", cancelBtnTmpl: \"cancelBtnTmpl\", confirmBtnTmpl: \"confirmBtnTmpl\", format: \"format\", min: \"min\", max: \"max\", defaultTime: \"defaultTime\", minutesGap: \"minutesGap\" }, outputs: { timeChanged: \"timeChanged\" }, providers: [\r\n        NgxMaterialTimepickerService,\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: NgxTimepickerFieldComponent,\r\n            multi: true\r\n        }\r\n    ], ngImport: i0, template: \"<div class=\\\"ngx-timepicker\\\" [ngClass]=\\\"{'ngx-timepicker--disabled': disabled}\\\">\\n    <ngx-timepicker-time-control\\n        class=\\\"ngx-timepicker__control--first\\\"\\n        [placeholder]=\\\"'HH'\\\"\\n        [time]=\\\"(hour$ | async)?.time\\\"\\n        [min]=\\\"minHour\\\"\\n        [max]=\\\"maxHour\\\"\\n        [timeUnit]=\\\"timeUnit.HOUR\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [timeList]=\\\"hoursList\\\"\\n        [preventTyping]=\\\"isTimeRangeSet\\\"\\n        (timeChanged)=\\\"changeHour($event)\\\"></ngx-timepicker-time-control>\\n    <span class=\\\"ngx-timepicker__time-colon ngx-timepicker__control--second\\\">:</span>\\n    <ngx-timepicker-time-control\\n        class=\\\"ngx-timepicker__control--third\\\"\\n        [placeholder]=\\\"'MM'\\\"\\n        [time]=\\\"(minute$ | async)?.time\\\"\\n        [min]=\\\"0\\\"\\n        [max]=\\\"59\\\"\\n        [timeUnit]=\\\"timeUnit.MINUTE\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [timeList]=\\\"minutesList\\\"\\n        [preventTyping]=\\\"isTimeRangeSet\\\"\\n        [minutesGap]=\\\"minutesGap\\\"\\n        (timeChanged)=\\\"changeMinute($event)\\\"></ngx-timepicker-time-control>\\n    <ngx-timepicker-period-selector\\n        class=\\\"ngx-timepicker__control--forth\\\"\\n        [selectedPeriod]=\\\"period\\\"\\n        [disabled]=\\\"disabled || isChangePeriodDisabled\\\"\\n        (periodSelected)=\\\"changePeriod($event)\\\"\\n        *ngIf=\\\"format !== 24\\\"></ngx-timepicker-period-selector>\\n    <ngx-material-timepicker-toggle\\n        class=\\\"ngx-timepicker__toggle\\\"\\n        *ngIf=\\\"!controlOnly\\\"\\n        [ngClass]=\\\"{'ngx-timepicker__toggle--left': buttonAlign === 'left'}\\\"\\n        [for]=\\\"timepicker\\\"\\n        [disabled]=\\\"disabled\\\">\\n        <span ngxMaterialTimepickerToggleIcon>\\n            <!--suppress HtmlUnknownAttribute -->\\n            <ng-container *ngTemplateOutlet=\\\"toggleIcon || defaultIcon\\\"></ng-container>\\n        </span>\\n    </ngx-material-timepicker-toggle>\\n</div>\\n<ngx-material-timepicker\\n    [min]=\\\"min\\\"\\n    [max]=\\\"max\\\"\\n    [theme]=\\\"clockTheme\\\"\\n    [defaultTime]=\\\"timepickerTime\\\"\\n    [format]=\\\"format\\\"\\n    [cancelBtnTmpl]=\\\"cancelBtnTmpl\\\"\\n    [confirmBtnTmpl]=\\\"confirmBtnTmpl\\\"\\n    [minutesGap]=\\\"minutesGap\\\"\\n    (timeSet)=\\\"onTimeSet($event)\\\" #timepicker></ngx-material-timepicker>\\n\\n<ng-template #defaultIcon>\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\">\\n        <!--suppress CheckEmptyScriptTag -->\\n        <path\\n            d=\\\"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\\\"/>\\n    </svg>\\n</ng-template>\\n\", styles: [\".ngx-timepicker{display:flex;align-items:center;height:100%;border-bottom:1px solid rgba(0,0,0,.12)}.ngx-timepicker--disabled{background:rgba(0,0,0,.07);pointer-events:none}.ngx-timepicker__time-colon{margin-left:10px}.ngx-timepicker__control--first{order:1}.ngx-timepicker__control--second{order:2}.ngx-timepicker__control--third{order:3}.ngx-timepicker__control--forth{order:4}.ngx-timepicker__toggle{order:4}.ngx-timepicker__toggle--left{order:0}\\n\"], components: [{ type: NgxTimepickerTimeControlComponent, selector: \"ngx-timepicker-time-control\", inputs: [\"time\", \"min\", \"max\", \"placeholder\", \"timeUnit\", \"disabled\", \"timeList\", \"preventTyping\", \"minutesGap\"], outputs: [\"timeChanged\"] }, { type: NgxTimepickerPeriodSelectorComponent, selector: \"ngx-timepicker-period-selector\", inputs: [\"isOpened\", \"disabled\", \"selectedPeriod\"], outputs: [\"periodSelected\"] }, { type: NgxMaterialTimepickerToggleComponent, selector: \"ngx-material-timepicker-toggle\", inputs: [\"for\", \"disabled\"] }, { type: NgxMaterialTimepickerComponent, selector: \"ngx-material-timepicker\", inputs: [\"cancelBtnTmpl\", \"editableHintTmpl\", \"confirmBtnTmpl\", \"ESC\", \"enableKeyboardInput\", \"preventOverlayClick\", \"disableAnimation\", \"appendToInput\", \"hoursOnly\", \"defaultTime\", \"timepickerClass\", \"theme\", \"min\", \"max\", \"ngxMaterialTimepickerTheme\", \"format\", \"minutesGap\"], outputs: [\"timeSet\", \"opened\", \"closed\", \"hourSelected\", \"timeChanged\"] }], directives: [{ type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: NgxMaterialTimepickerToggleIconDirective, selector: \"[ngxMaterialTimepickerToggleIcon]\" }, { type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], pipes: { \"async\": i1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxTimepickerFieldComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-timepicker-field',\r\n                    templateUrl: './ngx-timepicker-field.component.html',\r\n                    styleUrls: ['./ngx-timepicker-field.component.scss'],\r\n                    providers: [\r\n                        NgxMaterialTimepickerService,\r\n                        {\r\n                            provide: NG_VALUE_ACCESSOR,\r\n                            useExisting: NgxTimepickerFieldComponent,\r\n                            multi: true\r\n                        }\r\n                    ],\r\n                    changeDetection: ChangeDetectionStrategy.OnPush\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: NgxMaterialTimepickerService }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [TIME_LOCALE]\r\n                }] }]; }, propDecorators: { disabled: [{\r\n                type: Input\r\n            }], toggleIcon: [{\r\n                type: Input\r\n            }], buttonAlign: [{\r\n                type: Input\r\n            }], clockTheme: [{\r\n                type: Input\r\n            }], controlOnly: [{\r\n                type: Input\r\n            }], cancelBtnTmpl: [{\r\n                type: Input\r\n            }], confirmBtnTmpl: [{\r\n                type: Input\r\n            }], format: [{\r\n                type: Input\r\n            }], min: [{\r\n                type: Input\r\n            }], max: [{\r\n                type: Input\r\n            }], defaultTime: [{\r\n                type: Input\r\n            }], minutesGap: [{\r\n                type: Input\r\n            }], timeChanged: [{\r\n                type: Output\r\n            }] } });\r\n\r\nclass NgxMaterialTimepickerModule {\r\n    // tslint:disable-next-line:max-line-length\r\n    static setOpts(locale, numberingSystem = TimeAdapter.DEFAULT_NUMBERING_SYSTEM) {\r\n        return {\r\n            ngModule: NgxMaterialTimepickerModule,\r\n            providers: [\r\n                { provide: TIME_LOCALE, useValue: locale },\r\n                { provide: NUMBERING_SYSTEM, useValue: numberingSystem }\r\n            ]\r\n        };\r\n    }\r\n}\r\nNgxMaterialTimepickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgxMaterialTimepickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerModule, declarations: [NgxMaterialTimepickerComponent,\r\n        NgxMaterialTimepicker24HoursFaceComponent,\r\n        NgxMaterialTimepicker12HoursFaceComponent,\r\n        NgxMaterialTimepickerMinutesFaceComponent,\r\n        NgxMaterialTimepickerFaceComponent,\r\n        NgxMaterialTimepickerToggleComponent,\r\n        NgxMaterialTimepickerButtonComponent,\r\n        NgxMaterialTimepickerDialComponent,\r\n        NgxMaterialTimepickerDialControlComponent,\r\n        NgxMaterialTimepickerPeriodComponent,\r\n        TimeFormatterPipe,\r\n        TimepickerDirective,\r\n        OverlayDirective,\r\n        NgxMaterialTimepickerToggleIconDirective,\r\n        AutofocusDirective,\r\n        MinutesFormatterPipe,\r\n        NgxMaterialTimepickerThemeDirective,\r\n        NgxTimepickerFieldComponent,\r\n        NgxTimepickerTimeControlComponent,\r\n        NgxTimepickerPeriodSelectorComponent,\r\n        TimeLocalizerPipe,\r\n        TimeParserPipe,\r\n        ActiveHourPipe,\r\n        ActiveMinutePipe,\r\n        NgxMaterialTimepickerContainerComponent,\r\n        NgxMaterialTimepickerContentComponent,\r\n        AppendToInputDirective], imports: [CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule], exports: [NgxMaterialTimepickerComponent,\r\n        NgxMaterialTimepickerToggleComponent,\r\n        NgxTimepickerFieldComponent,\r\n        TimepickerDirective,\r\n        NgxMaterialTimepickerToggleIconDirective,\r\n        NgxMaterialTimepickerThemeDirective] });\r\nNgxMaterialTimepickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerModule, imports: [[\r\n            CommonModule,\r\n            FormsModule,\r\n            ReactiveFormsModule,\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxMaterialTimepickerModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                        CommonModule,\r\n                        FormsModule,\r\n                        ReactiveFormsModule,\r\n                    ],\r\n                    exports: [\r\n                        NgxMaterialTimepickerComponent,\r\n                        NgxMaterialTimepickerToggleComponent,\r\n                        NgxTimepickerFieldComponent,\r\n                        TimepickerDirective,\r\n                        NgxMaterialTimepickerToggleIconDirective,\r\n                        NgxMaterialTimepickerThemeDirective,\r\n                    ],\r\n                    declarations: [\r\n                        NgxMaterialTimepickerComponent,\r\n                        NgxMaterialTimepicker24HoursFaceComponent,\r\n                        NgxMaterialTimepicker12HoursFaceComponent,\r\n                        NgxMaterialTimepickerMinutesFaceComponent,\r\n                        NgxMaterialTimepickerFaceComponent,\r\n                        NgxMaterialTimepickerToggleComponent,\r\n                        NgxMaterialTimepickerButtonComponent,\r\n                        NgxMaterialTimepickerDialComponent,\r\n                        NgxMaterialTimepickerDialControlComponent,\r\n                        NgxMaterialTimepickerPeriodComponent,\r\n                        TimeFormatterPipe,\r\n                        TimepickerDirective,\r\n                        OverlayDirective,\r\n                        NgxMaterialTimepickerToggleIconDirective,\r\n                        AutofocusDirective,\r\n                        MinutesFormatterPipe,\r\n                        NgxMaterialTimepickerThemeDirective,\r\n                        NgxTimepickerFieldComponent,\r\n                        NgxTimepickerTimeControlComponent,\r\n                        NgxTimepickerPeriodSelectorComponent,\r\n                        TimeLocalizerPipe,\r\n                        TimeParserPipe,\r\n                        ActiveHourPipe,\r\n                        ActiveMinutePipe,\r\n                        NgxMaterialTimepickerContainerComponent,\r\n                        NgxMaterialTimepickerContentComponent,\r\n                        AppendToInputDirective\r\n                    ],\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { NUMBERING_SYSTEM, NgxMaterialTimepickerComponent, NgxMaterialTimepickerModule, NgxMaterialTimepickerThemeDirective, NgxMaterialTimepickerToggleComponent, NgxMaterialTimepickerToggleIconDirective, NgxTimepickerFieldComponent, TIME_LOCALE, TimepickerDirective };\r\n\n"]},"metadata":{},"sourceType":"module"}