{"ast":null,"code":"import { EventEmitter, Directive, Input, Output, HostBinding, HostListener, ElementRef, Injectable, Component, ViewChild, Pipe, NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { isNil, pull, concat, isString, isBoolean, includes } from 'lodash';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/forms';\n\nfunction TreeviewComponent_ng_template_0_i_1__svg_svg_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 15);\n    ɵngcc0.ɵɵelement(1, \"path\", 16);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TreeviewComponent_ng_template_0_i_1__svg_svg_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 17);\n    ɵngcc0.ɵɵelement(1, \"path\", 18);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TreeviewComponent_ng_template_0_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"i\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function TreeviewComponent_ng_template_0_i_1_Template_i_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r15);\n      const onCollapseExpand_r8 = ɵngcc0.ɵɵnextContext().onCollapseExpand;\n      return onCollapseExpand_r8();\n    });\n    ɵngcc0.ɵɵtemplate(1, TreeviewComponent_ng_template_0_i_1__svg_svg_1_Template, 2, 0, \"svg\", 13);\n    ɵngcc0.ɵɵtemplate(2, TreeviewComponent_ng_template_0_i_1__svg_svg_2_Template, 2, 0, \"svg\", 14);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r7 = ɵngcc0.ɵɵnextContext().item;\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", item_r7.collapsed);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n  }\n}\n\nfunction TreeviewComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 7);\n    ɵngcc0.ɵɵtemplate(1, TreeviewComponent_ng_template_0_i_1_Template, 3, 3, \"i\", 8);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 9);\n    ɵngcc0.ɵɵelementStart(3, \"input\", 10);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function TreeviewComponent_ng_template_0_Template_input_ngModelChange_3_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r18);\n      const item_r7 = restoredCtx.item;\n      return item_r7.checked = $event;\n    })(\"ngModelChange\", function TreeviewComponent_ng_template_0_Template_input_ngModelChange_3_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r18);\n      const onCheckedChange_r9 = restoredCtx.onCheckedChange;\n      return onCheckedChange_r9();\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(4, \"label\", 11);\n    ɵngcc0.ɵɵlistener(\"click\", function TreeviewComponent_ng_template_0_Template_label_click_4_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r18);\n      const item_r7 = restoredCtx.item;\n      const onCheckedChange_r9 = restoredCtx.onCheckedChange;\n      item_r7.checked = !item_r7.checked;\n      return onCheckedChange_r9();\n    });\n    ɵngcc0.ɵɵtext(5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r7 = ctx.item;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", item_r7.children);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngModel\", item_r7.checked)(\"disabled\", item_r7.disabled)(\"indeterminate\", item_r7.indeterminate);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", item_r7.text, \" \");\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r29 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 21);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 22);\n    ɵngcc0.ɵɵelementStart(2, \"input\", 23);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function TreeviewComponent_ng_template_2_div_0_Template_input_ngModelChange_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r29);\n      const ctx_r28 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r28.filterText = $event;\n    })(\"ngModelChange\", function TreeviewComponent_ng_template_2_div_0_Template_input_ngModelChange_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r29);\n      const onFilterTextChange_r25 = ɵngcc0.ɵɵnextContext().onFilterTextChange;\n      return onFilterTextChange_r25($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r26 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"placeholder\", ctx_r26.i18n.getFilterPlaceholder())(\"ngModel\", ctx_r26.filterText);\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r38 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 29);\n    ɵngcc0.ɵɵelementStart(1, \"input\", 30);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template_input_ngModelChange_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r38);\n      const item_r22 = ɵngcc0.ɵɵnextContext(3).item;\n      return item_r22.checked = $event;\n    })(\"ngModelChange\", function TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template_input_ngModelChange_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r38);\n      const onCheckedChange_r24 = ɵngcc0.ɵɵnextContext(3).onCheckedChange;\n      return onCheckedChange_r24();\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(2, \"label\", 11);\n    ɵngcc0.ɵɵlistener(\"click\", function TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template_label_click_2_listener() {\n      ɵngcc0.ɵɵrestoreView(_r38);\n      const ctx_r42 = ɵngcc0.ɵɵnextContext(3);\n      const item_r22 = ctx_r42.item;\n      const onCheckedChange_r24 = ctx_r42.onCheckedChange;\n      item_r22.checked = !item_r22.checked;\n      return onCheckedChange_r24();\n    });\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r22 = ɵngcc0.ɵɵnextContext(3).item;\n    const ctx_r34 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngModel\", item_r22.checked)(\"indeterminate\", item_r22.indeterminate);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r34.i18n.getAllCheckboxText(), \" \");\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_div_1_label_3__svg_svg_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 35);\n    ɵngcc0.ɵɵelement(1, \"path\", 36);\n    ɵngcc0.ɵɵelement(2, \"path\", 37);\n    ɵngcc0.ɵɵelement(3, \"path\", 38);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_div_1_label_3__svg_svg_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 39);\n    ɵngcc0.ɵɵelement(1, \"path\", 40);\n    ɵngcc0.ɵɵelement(2, \"path\", 41);\n    ɵngcc0.ɵɵelement(3, \"path\", 42);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_div_1_label_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r48 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"label\", 31);\n    ɵngcc0.ɵɵlistener(\"click\", function TreeviewComponent_ng_template_2_div_1_div_1_label_3_Template_label_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r48);\n      const onCollapseExpand_r23 = ɵngcc0.ɵɵnextContext(3).onCollapseExpand;\n      return onCollapseExpand_r23();\n    });\n    ɵngcc0.ɵɵelementStart(1, \"i\", 32);\n    ɵngcc0.ɵɵtemplate(2, TreeviewComponent_ng_template_2_div_1_div_1_label_3__svg_svg_2_Template, 4, 0, \"svg\", 33);\n    ɵngcc0.ɵɵtemplate(3, TreeviewComponent_ng_template_2_div_1_div_1_label_3__svg_svg_3_Template, 4, 0, \"svg\", 34);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r22 = ɵngcc0.ɵɵnextContext(3).item;\n    const ctx_r35 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"title\", ctx_r35.i18n.getTooltipCollapseExpandText(item_r22.collapsed))(\"ngSwitch\", item_r22.collapsed);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 26);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 22);\n    ɵngcc0.ɵɵtemplate(2, TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template, 4, 3, \"div\", 27);\n    ɵngcc0.ɵɵtemplate(3, TreeviewComponent_ng_template_2_div_1_div_1_label_3_Template, 4, 4, \"label\", 28);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const config_r21 = ɵngcc0.ɵɵnextContext(2).config;\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", config_r21.hasAllCheckBox);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", config_r21.hasCollapseExpand);\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 43);\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtemplate(1, TreeviewComponent_ng_template_2_div_1_div_1_Template, 4, 2, \"div\", 24);\n    ɵngcc0.ɵɵtemplate(2, TreeviewComponent_ng_template_2_div_1_div_2_Template, 1, 0, \"div\", 25);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const config_r21 = ɵngcc0.ɵɵnextContext().config;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", config_r21.hasAllCheckBox || config_r21.hasCollapseExpand);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", config_r21.hasDivider);\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, TreeviewComponent_ng_template_2_div_0_Template, 3, 2, \"div\", 19);\n    ɵngcc0.ɵɵtemplate(1, TreeviewComponent_ng_template_2_div_1_Template, 3, 2, \"div\", 20);\n  }\n\n  if (rf & 2) {\n    const config_r21 = ctx.config;\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngIf\", config_r21.hasFilter);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r3.hasFilterItems);\n  }\n}\n\nfunction TreeviewComponent_ng_template_5_Template(rf, ctx) {}\n\nfunction TreeviewComponent_div_7_ngx_treeview_item_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r55 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"ngx-treeview-item\", 46);\n    ɵngcc0.ɵɵlistener(\"checkedChange\", function TreeviewComponent_div_7_ngx_treeview_item_1_Template_ngx_treeview_item_checkedChange_0_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r55);\n      const item_r53 = restoredCtx.$implicit;\n      const ctx_r54 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r54.onItemCheckedChange(item_r53, $event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r53 = ctx.$implicit;\n    const ctx_r52 = ɵngcc0.ɵɵnextContext(2);\n\n    const _r0 = ɵngcc0.ɵɵreference(1);\n\n    ɵngcc0.ɵɵproperty(\"config\", ctx_r52.config)(\"item\", item_r53)(\"template\", ctx_r52.itemTemplate || _r0);\n  }\n}\n\nfunction TreeviewComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 44);\n    ɵngcc0.ɵɵtemplate(1, TreeviewComponent_div_7_ngx_treeview_item_1_Template, 1, 3, \"ngx-treeview-item\", 45);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"max-height\", ctx_r5.maxHeight, \"px\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r5.filterItems);\n  }\n}\n\nfunction TreeviewComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 47);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r6.i18n.getFilterNoItemsFoundText(), \" \");\n  }\n}\n\nfunction TreeviewItemComponent_div_0_ng_template_1_Template(rf, ctx) {}\n\nfunction TreeviewItemComponent_div_0_div_2_ngx_treeview_item_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"ngx-treeview-item\", 5);\n    ɵngcc0.ɵɵlistener(\"checkedChange\", function TreeviewItemComponent_div_0_div_2_ngx_treeview_item_1_Template_ngx_treeview_item_checkedChange_0_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r6);\n      const child_r4 = restoredCtx.$implicit;\n      const ctx_r5 = ɵngcc0.ɵɵnextContext(3);\n      return ctx_r5.onChildCheckedChange(child_r4, $event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const child_r4 = ctx.$implicit;\n    const ctx_r3 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"config\", ctx_r3.config)(\"item\", child_r4)(\"template\", ctx_r3.template);\n  }\n}\n\nfunction TreeviewItemComponent_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtemplate(1, TreeviewItemComponent_div_0_div_2_ngx_treeview_item_1_Template, 1, 3, \"ngx-treeview-item\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r2.item.children);\n  }\n}\n\nconst _c0 = function (a0, a1, a2) {\n  return {\n    item: a0,\n    onCollapseExpand: a1,\n    onCheckedChange: a2\n  };\n};\n\nfunction TreeviewItemComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵtemplate(1, TreeviewItemComponent_div_0_ng_template_1_Template, 0, 0, \"ng-template\", 2);\n    ɵngcc0.ɵɵtemplate(2, TreeviewItemComponent_div_0_div_2_Template, 2, 1, \"div\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction3(3, _c0, ctx_r0.item, ctx_r0.onCollapseExpand, ctx_r0.onCheckedChange));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.item.collapsed);\n  }\n}\n\nlet DropdownDirective = /*#__PURE__*/(() => {\n  class DropdownDirective {\n    constructor() {\n      this.internalOpen = false;\n      this.openChange = new EventEmitter();\n    }\n\n    get isOpen() {\n      return this.internalOpen;\n    }\n\n    onKeyupEsc() {\n      this.close();\n    }\n\n    onDocumentClick(event) {\n      if (event.button !== 2 && !this.isEventFromToggle(event)) {\n        this.close();\n      }\n    }\n\n    open() {\n      if (!this.internalOpen) {\n        this.internalOpen = true;\n        this.openChange.emit(true);\n      }\n    }\n\n    close() {\n      if (this.internalOpen) {\n        this.internalOpen = false;\n        this.openChange.emit(false);\n      }\n    }\n\n    toggle() {\n      if (this.isOpen) {\n        this.close();\n      } else {\n        this.open();\n      }\n    }\n\n    isEventFromToggle(event) {\n      return !isNil(this.toggleElement) && this.toggleElement.contains(event.target);\n    }\n\n  }\n\n  DropdownDirective.ɵfac = function DropdownDirective_Factory(t) {\n    return new (t || DropdownDirective)();\n  };\n\n  DropdownDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: DropdownDirective,\n    selectors: [[\"\", \"ngxDropdown\", \"\"]],\n    hostVars: 2,\n    hostBindings: function DropdownDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keyup.esc\", function DropdownDirective_keyup_esc_HostBindingHandler() {\n          return ctx.onKeyupEsc();\n        })(\"click\", function DropdownDirective_click_HostBindingHandler($event) {\n          return ctx.onDocumentClick($event);\n        }, false, ɵngcc0.ɵɵresolveDocument);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"show\", ctx.isOpen);\n      }\n    },\n    inputs: {\n      internalOpen: [\"open\", \"internalOpen\"]\n    },\n    outputs: {\n      openChange: \"openChange\"\n    },\n    exportAs: [\"ngxDropdown\"]\n  });\n  return DropdownDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DropdownMenuDirective = /*#__PURE__*/(() => {\n  class DropdownMenuDirective {\n    constructor(dropdown) {\n      this.dropdown = dropdown;\n    }\n\n  }\n\n  DropdownMenuDirective.ɵfac = function DropdownMenuDirective_Factory(t) {\n    return new (t || DropdownMenuDirective)(ɵngcc0.ɵɵdirectiveInject(DropdownDirective));\n  };\n\n  DropdownMenuDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: DropdownMenuDirective,\n    selectors: [[\"\", \"ngxDropdownMenu\", \"\"]],\n    hostVars: 4,\n    hostBindings: function DropdownMenuDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"dropdown-menu\", true)(\"show\", ctx.dropdown.isOpen);\n      }\n    }\n  });\n  return DropdownMenuDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DropdownToggleDirective = /*#__PURE__*/(() => {\n  class DropdownToggleDirective {\n    constructor(dropdown, elementRef) {\n      this.dropdown = dropdown;\n      dropdown.toggleElement = elementRef.nativeElement;\n    }\n\n  }\n\n  DropdownToggleDirective.ɵfac = function DropdownToggleDirective_Factory(t) {\n    return new (t || DropdownToggleDirective)(ɵngcc0.ɵɵdirectiveInject(DropdownDirective), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  DropdownToggleDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: DropdownToggleDirective,\n    selectors: [[\"\", \"ngxDropdownToggle\", \"\"]],\n    hostAttrs: [\"aria-haspopup\", \"true\", 1, \"dropdown-toggle\"],\n    hostVars: 1,\n    hostBindings: function DropdownToggleDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function DropdownToggleDirective_click_HostBindingHandler() {\n          return ctx.dropdown.toggle();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.dropdown.isOpen);\n      }\n    }\n  });\n  return DropdownToggleDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TreeviewI18n = /*#__PURE__*/(() => {\n  class TreeviewI18n {}\n\n  TreeviewI18n.ɵfac = function TreeviewI18n_Factory(t) {\n    return new (t || TreeviewI18n)();\n  };\n\n  TreeviewI18n.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: TreeviewI18n,\n    factory: TreeviewI18n.ɵfac\n  });\n  return TreeviewI18n;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DefaultTreeviewI18n = /*#__PURE__*/(() => {\n  class DefaultTreeviewI18n extends TreeviewI18n {\n    getText(selection) {\n      if (selection.uncheckedItems.length === 0) {\n        if (selection.checkedItems.length > 0) {\n          return this.getAllCheckboxText();\n        } else {\n          return '';\n        }\n      }\n\n      switch (selection.checkedItems.length) {\n        case 0:\n          return 'Select options';\n\n        case 1:\n          return selection.checkedItems[0].text;\n\n        default:\n          return `${selection.checkedItems.length} options selected`;\n      }\n    }\n\n    getAllCheckboxText() {\n      return 'All';\n    }\n\n    getFilterPlaceholder() {\n      return 'Filter';\n    }\n\n    getFilterNoItemsFoundText() {\n      return 'No items found';\n    }\n\n    getTooltipCollapseExpandText(isCollapse) {\n      return isCollapse ? 'Expand' : 'Collapse';\n    }\n\n  }\n\n  DefaultTreeviewI18n.ɵfac = /*@__PURE__*/function () {\n    let ɵDefaultTreeviewI18n_BaseFactory;\n    return function DefaultTreeviewI18n_Factory(t) {\n      return (ɵDefaultTreeviewI18n_BaseFactory || (ɵDefaultTreeviewI18n_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DefaultTreeviewI18n)))(t || DefaultTreeviewI18n);\n    };\n  }();\n\n  DefaultTreeviewI18n.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DefaultTreeviewI18n,\n    factory: DefaultTreeviewI18n.ɵfac\n  });\n  return DefaultTreeviewI18n;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TreeviewConfig = /*#__PURE__*/(() => {\n  class TreeviewConfig {\n    constructor() {\n      this.hasAllCheckBox = true;\n      this.hasFilter = false;\n      this.hasCollapseExpand = false;\n      this.decoupleChildFromParent = false;\n      this.maxHeight = 500;\n    }\n\n    get hasDivider() {\n      return this.hasFilter || this.hasAllCheckBox || this.hasCollapseExpand;\n    }\n\n    static create(fields) {\n      const config = new TreeviewConfig();\n      Object.assign(config, fields);\n      return config;\n    }\n\n  }\n\n  TreeviewConfig.ɵfac = function TreeviewConfig_Factory(t) {\n    return new (t || TreeviewConfig)();\n  };\n\n  TreeviewConfig.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: TreeviewConfig,\n    factory: TreeviewConfig.ɵfac\n  });\n  return TreeviewConfig;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst TreeviewHelper = {\n  findItem,\n  findItemInList,\n  findParent,\n  removeItem,\n  concatSelection\n};\n\nfunction findItem(root, value) {\n  if (isNil(root)) {\n    return undefined;\n  }\n\n  if (root.value === value) {\n    return root;\n  }\n\n  if (root.children) {\n    for (const child of root.children) {\n      const foundItem = findItem(child, value);\n\n      if (foundItem) {\n        return foundItem;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction findItemInList(list, value) {\n  if (isNil(list)) {\n    return undefined;\n  }\n\n  for (const item of list) {\n    const foundItem = findItem(item, value);\n\n    if (foundItem) {\n      return foundItem;\n    }\n  }\n\n  return undefined;\n}\n\nfunction findParent(root, item) {\n  if (isNil(root) || isNil(root.children)) {\n    return undefined;\n  }\n\n  for (const child of root.children) {\n    if (child === item) {\n      return root;\n    } else {\n      const parent = findParent(child, item);\n\n      if (parent) {\n        return parent;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction removeItem(root, item) {\n  const parent = findParent(root, item);\n\n  if (parent) {\n    pull(parent.children, item);\n\n    if (parent.children.length === 0) {\n      parent.children = undefined;\n    } else {\n      parent.correctChecked();\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction concatSelection(items, checked, unchecked) {\n  let checkedItems = [...checked];\n  let uncheckedItems = [...unchecked];\n\n  for (const item of items) {\n    const selection = item.getSelection();\n    checkedItems = concat(checkedItems, selection.checkedItems);\n    uncheckedItems = concat(uncheckedItems, selection.uncheckedItems);\n  }\n\n  return {\n    checked: checkedItems,\n    unchecked: uncheckedItems\n  };\n}\n\nclass TreeviewItem {\n  constructor(item, autoCorrectChecked = false) {\n    this.internalDisabled = false;\n    this.internalChecked = true;\n    this.internalCollapsed = false;\n\n    if (isNil(item)) {\n      throw new Error('Item must be defined');\n    }\n\n    if (isString(item.text)) {\n      this.text = item.text;\n    } else {\n      throw new Error('A text of item must be string object');\n    }\n\n    this.value = item.value;\n\n    if (isBoolean(item.checked)) {\n      this.checked = item.checked;\n    }\n\n    if (isBoolean(item.collapsed)) {\n      this.collapsed = item.collapsed;\n    }\n\n    if (isBoolean(item.disabled)) {\n      this.disabled = item.disabled;\n    }\n\n    if (!isNil(item.children) && item.children.length > 0) {\n      this.children = item.children.map(child => {\n        if (this.disabled === true) {\n          child.disabled = true;\n        }\n\n        return new TreeviewItem(child);\n      });\n    }\n\n    if (autoCorrectChecked) {\n      this.correctChecked();\n    }\n  }\n\n  get checked() {\n    return this.internalChecked;\n  }\n\n  set checked(value) {\n    if (!this.internalDisabled) {\n      if (this.internalChecked !== value) {\n        this.internalChecked = value;\n      }\n    }\n  }\n\n  get indeterminate() {\n    return this.checked === undefined;\n  }\n\n  setCheckedRecursive(value) {\n    if (!this.internalDisabled) {\n      this.internalChecked = value;\n\n      if (!isNil(this.internalChildren)) {\n        this.internalChildren.forEach(child => child.setCheckedRecursive(value));\n      }\n    }\n  }\n\n  get disabled() {\n    return this.internalDisabled;\n  }\n\n  set disabled(value) {\n    if (this.internalDisabled !== value) {\n      this.internalDisabled = value;\n\n      if (!isNil(this.internalChildren)) {\n        this.internalChildren.forEach(child => child.disabled = value);\n      }\n    }\n  }\n\n  get collapsed() {\n    return this.internalCollapsed;\n  }\n\n  set collapsed(value) {\n    if (this.internalCollapsed !== value) {\n      this.internalCollapsed = value;\n    }\n  }\n\n  setCollapsedRecursive(value) {\n    this.internalCollapsed = value;\n\n    if (!isNil(this.internalChildren)) {\n      this.internalChildren.forEach(child => child.setCollapsedRecursive(value));\n    }\n  }\n\n  get children() {\n    return this.internalChildren;\n  }\n\n  set children(value) {\n    if (this.internalChildren !== value) {\n      if (!isNil(value) && value.length === 0) {\n        throw new Error('Children must be not an empty array');\n      }\n\n      this.internalChildren = value;\n\n      if (!isNil(this.internalChildren)) {\n        let checked = null;\n        this.internalChildren.forEach(child => {\n          if (checked === null) {\n            checked = child.checked;\n          } else {\n            if (child.checked !== checked) {\n              checked = undefined;\n              return;\n            }\n          }\n        });\n        this.internalChecked = checked;\n      }\n    }\n  }\n\n  getSelection() {\n    let checkedItems = [];\n    let uncheckedItems = [];\n\n    if (isNil(this.internalChildren)) {\n      if (this.internalChecked) {\n        checkedItems.push(this);\n      } else {\n        uncheckedItems.push(this);\n      }\n    } else {\n      const selection = TreeviewHelper.concatSelection(this.internalChildren, checkedItems, uncheckedItems);\n      checkedItems = selection.checked;\n      uncheckedItems = selection.unchecked;\n    }\n\n    return {\n      checkedItems,\n      uncheckedItems\n    };\n  }\n\n  correctChecked() {\n    this.internalChecked = this.getCorrectChecked();\n  }\n\n  getCorrectChecked() {\n    let checked = null;\n\n    if (!isNil(this.internalChildren)) {\n      for (const child of this.internalChildren) {\n        child.internalChecked = child.getCorrectChecked();\n\n        if (checked === null) {\n          checked = child.internalChecked;\n        } else if (checked !== child.internalChecked) {\n          checked = undefined;\n          break;\n        }\n      }\n    } else {\n      checked = this.checked;\n    }\n\n    return checked;\n  }\n\n}\n\nlet TreeviewEventParser = /*#__PURE__*/(() => {\n  class TreeviewEventParser {}\n\n  TreeviewEventParser.ɵfac = function TreeviewEventParser_Factory(t) {\n    return new (t || TreeviewEventParser)();\n  };\n\n  TreeviewEventParser.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: TreeviewEventParser,\n    factory: TreeviewEventParser.ɵfac\n  });\n  return TreeviewEventParser;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DefaultTreeviewEventParser = /*#__PURE__*/(() => {\n  class DefaultTreeviewEventParser extends TreeviewEventParser {\n    getSelectedChange(component) {\n      const checkedItems = component.selection.checkedItems;\n\n      if (!isNil(checkedItems)) {\n        return checkedItems.map(item => item.value);\n      }\n\n      return [];\n    }\n\n  }\n\n  DefaultTreeviewEventParser.ɵfac = /*@__PURE__*/function () {\n    let ɵDefaultTreeviewEventParser_BaseFactory;\n    return function DefaultTreeviewEventParser_Factory(t) {\n      return (ɵDefaultTreeviewEventParser_BaseFactory || (ɵDefaultTreeviewEventParser_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DefaultTreeviewEventParser)))(t || DefaultTreeviewEventParser);\n    };\n  }();\n\n  DefaultTreeviewEventParser.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DefaultTreeviewEventParser,\n    factory: DefaultTreeviewEventParser.ɵfac\n  });\n  return DefaultTreeviewEventParser;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DownlineTreeviewEventParser = /*#__PURE__*/(() => {\n  class DownlineTreeviewEventParser extends TreeviewEventParser {\n    getSelectedChange(component) {\n      const items = component.items;\n\n      if (!isNil(items)) {\n        let result = [];\n        items.forEach(item => {\n          const links = this.getLinks(item, null);\n\n          if (!isNil(links)) {\n            result = result.concat(links);\n          }\n        });\n        return result;\n      }\n\n      return [];\n    }\n\n    getLinks(item, parent) {\n      if (!isNil(item.children)) {\n        const link = {\n          item,\n          parent\n        };\n        let result = [];\n        item.children.forEach(child => {\n          const links = this.getLinks(child, link);\n\n          if (!isNil(links)) {\n            result = result.concat(links);\n          }\n        });\n        return result;\n      }\n\n      if (item.checked) {\n        return [{\n          item,\n          parent\n        }];\n      }\n\n      return null;\n    }\n\n  }\n\n  DownlineTreeviewEventParser.ɵfac = /*@__PURE__*/function () {\n    let ɵDownlineTreeviewEventParser_BaseFactory;\n    return function DownlineTreeviewEventParser_Factory(t) {\n      return (ɵDownlineTreeviewEventParser_BaseFactory || (ɵDownlineTreeviewEventParser_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DownlineTreeviewEventParser)))(t || DownlineTreeviewEventParser);\n    };\n  }();\n\n  DownlineTreeviewEventParser.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DownlineTreeviewEventParser,\n    factory: DownlineTreeviewEventParser.ɵfac\n  });\n  return DownlineTreeviewEventParser;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet OrderDownlineTreeviewEventParser = /*#__PURE__*/(() => {\n  class OrderDownlineTreeviewEventParser extends TreeviewEventParser {\n    constructor() {\n      super(...arguments);\n      this.currentDownlines = [];\n      this.parser = new DownlineTreeviewEventParser();\n    }\n\n    getSelectedChange(component) {\n      const newDownlines = this.parser.getSelectedChange(component);\n\n      if (this.currentDownlines.length === 0) {\n        this.currentDownlines = newDownlines;\n      } else {\n        const intersectDownlines = [];\n        this.currentDownlines.forEach(downline => {\n          let foundIndex = -1;\n          const length = newDownlines.length;\n\n          for (let i = 0; i < length; i++) {\n            if (downline.item.value === newDownlines[i].item.value) {\n              foundIndex = i;\n              break;\n            }\n          }\n\n          if (foundIndex !== -1) {\n            intersectDownlines.push(newDownlines[foundIndex]);\n            newDownlines.splice(foundIndex, 1);\n          }\n        });\n        this.currentDownlines = intersectDownlines.concat(newDownlines);\n      }\n\n      return this.currentDownlines;\n    }\n\n  }\n\n  OrderDownlineTreeviewEventParser.ɵfac = /*@__PURE__*/function () {\n    let ɵOrderDownlineTreeviewEventParser_BaseFactory;\n    return function OrderDownlineTreeviewEventParser_Factory(t) {\n      return (ɵOrderDownlineTreeviewEventParser_BaseFactory || (ɵOrderDownlineTreeviewEventParser_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(OrderDownlineTreeviewEventParser)))(t || OrderDownlineTreeviewEventParser);\n    };\n  }();\n\n  OrderDownlineTreeviewEventParser.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: OrderDownlineTreeviewEventParser,\n    factory: OrderDownlineTreeviewEventParser.ɵfac\n  });\n  return OrderDownlineTreeviewEventParser;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass FilterTreeviewItem extends TreeviewItem {\n  constructor(item) {\n    super({\n      text: item.text,\n      value: item.value,\n      disabled: item.disabled,\n      checked: item.checked,\n      collapsed: item.collapsed,\n      children: item.children\n    });\n    this.refItem = item;\n  }\n\n  updateRefChecked() {\n    this.children.forEach(child => {\n      if (child instanceof FilterTreeviewItem) {\n        child.updateRefChecked();\n      }\n    });\n    let refChecked = this.checked;\n\n    if (refChecked) {\n      for (const refChild of this.refItem.children) {\n        if (!refChild.checked) {\n          refChecked = false;\n          break;\n        }\n      }\n    }\n\n    this.refItem.checked = refChecked;\n  }\n\n}\n\nlet TreeviewComponent = /*#__PURE__*/(() => {\n  class TreeviewComponent {\n    constructor(i18n, defaultConfig, eventParser) {\n      this.i18n = i18n;\n      this.defaultConfig = defaultConfig;\n      this.eventParser = eventParser;\n      this.selectedChange = new EventEmitter();\n      this.filterChange = new EventEmitter();\n      this.filterText = '';\n      this.config = this.defaultConfig;\n      this.allItem = new TreeviewItem({\n        text: 'All',\n        value: undefined\n      });\n    }\n\n    get hasFilterItems() {\n      return !isNil(this.filterItems) && this.filterItems.length > 0;\n    }\n\n    get maxHeight() {\n      return `${this.config.maxHeight}`;\n    }\n\n    ngOnInit() {\n      this.createHeaderTemplateContext();\n      this.generateSelection();\n    }\n\n    ngOnChanges(changes) {\n      const itemsSimpleChange = changes.items;\n\n      if (!isNil(itemsSimpleChange) && !isNil(this.items)) {\n        this.updateFilterItems();\n        this.updateCollapsedOfAll();\n        this.raiseSelectedChange();\n      }\n    }\n\n    onAllCollapseExpand() {\n      this.allItem.collapsed = !this.allItem.collapsed;\n      this.filterItems.forEach(item => item.setCollapsedRecursive(this.allItem.collapsed));\n    }\n\n    onFilterTextChange(text) {\n      this.filterText = text;\n      this.filterChange.emit(text);\n      this.updateFilterItems();\n    }\n\n    onAllCheckedChange() {\n      const checked = this.allItem.checked;\n      this.filterItems.forEach(item => {\n        item.setCheckedRecursive(checked);\n\n        if (item instanceof FilterTreeviewItem) {\n          item.updateRefChecked();\n        }\n      });\n      this.raiseSelectedChange();\n    }\n\n    onItemCheckedChange(item, checked) {\n      if (item instanceof FilterTreeviewItem) {\n        item.updateRefChecked();\n      }\n\n      this.updateCheckedOfAll();\n      this.raiseSelectedChange();\n    }\n\n    raiseSelectedChange() {\n      this.generateSelection();\n      const values = this.eventParser.getSelectedChange(this);\n      setTimeout(() => {\n        this.selectedChange.emit(values);\n      });\n    }\n\n    createHeaderTemplateContext() {\n      this.headerTemplateContext = {\n        config: this.config,\n        item: this.allItem,\n        onCheckedChange: () => this.onAllCheckedChange(),\n        onCollapseExpand: () => this.onAllCollapseExpand(),\n        onFilterTextChange: text => this.onFilterTextChange(text)\n      };\n    }\n\n    generateSelection() {\n      let checkedItems = [];\n      let uncheckedItems = [];\n\n      if (!isNil(this.items)) {\n        const selection = TreeviewHelper.concatSelection(this.items, checkedItems, uncheckedItems);\n        checkedItems = selection.checked;\n        uncheckedItems = selection.unchecked;\n      }\n\n      this.selection = {\n        checkedItems,\n        uncheckedItems\n      };\n    }\n\n    updateFilterItems() {\n      if (this.filterText !== '') {\n        const filterItems = [];\n        const filterText = this.filterText.toLowerCase();\n        this.items.forEach(item => {\n          const newItem = this.filterItem(item, filterText);\n\n          if (!isNil(newItem)) {\n            filterItems.push(newItem);\n          }\n        });\n        this.filterItems = filterItems;\n      } else {\n        this.filterItems = this.items;\n      }\n\n      this.updateCheckedOfAll();\n    }\n\n    filterItem(item, filterText) {\n      const isMatch = includes(item.text.toLowerCase(), filterText);\n\n      if (isMatch) {\n        return item;\n      } else {\n        if (!isNil(item.children)) {\n          const children = [];\n          item.children.forEach(child => {\n            const newChild = this.filterItem(child, filterText);\n\n            if (!isNil(newChild)) {\n              children.push(newChild);\n            }\n          });\n\n          if (children.length > 0) {\n            const newItem = new FilterTreeviewItem(item);\n            newItem.collapsed = false;\n            newItem.children = children;\n            return newItem;\n          }\n        }\n      }\n\n      return undefined;\n    }\n\n    updateCheckedOfAll() {\n      let itemChecked = null;\n\n      for (const filterItem of this.filterItems) {\n        if (itemChecked === null) {\n          itemChecked = filterItem.checked;\n        } else if (itemChecked !== filterItem.checked) {\n          itemChecked = undefined;\n          break;\n        }\n      }\n\n      if (itemChecked === null) {\n        itemChecked = false;\n      }\n\n      this.allItem.checked = itemChecked;\n    }\n\n    updateCollapsedOfAll() {\n      let hasItemExpanded = false;\n\n      for (const filterItem of this.filterItems) {\n        if (!filterItem.collapsed) {\n          hasItemExpanded = true;\n          break;\n        }\n      }\n\n      this.allItem.collapsed = !hasItemExpanded;\n    }\n\n  }\n\n  TreeviewComponent.ɵfac = function TreeviewComponent_Factory(t) {\n    return new (t || TreeviewComponent)(ɵngcc0.ɵɵdirectiveInject(TreeviewI18n), ɵngcc0.ɵɵdirectiveInject(TreeviewConfig), ɵngcc0.ɵɵdirectiveInject(TreeviewEventParser));\n  };\n\n  TreeviewComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TreeviewComponent,\n    selectors: [[\"ngx-treeview\"]],\n    inputs: {\n      config: \"config\",\n      headerTemplate: \"headerTemplate\",\n      itemTemplate: \"itemTemplate\",\n      items: \"items\"\n    },\n    outputs: {\n      selectedChange: \"selectedChange\",\n      filterChange: \"filterChange\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 9,\n    vars: 5,\n    consts: [[\"defaultItemTemplate\", \"\"], [\"defaultHeaderTemplate\", \"\"], [1, \"treeview-header\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"ngSwitch\"], [\"class\", \"treeview-container\", 3, \"max-height\", 4, \"ngSwitchCase\"], [\"class\", \"treeview-text\", 4, \"ngSwitchCase\"], [1, \"form-inline\", \"row-item\"], [\"aria-hidden\", \"true\", 3, \"ngSwitch\", \"click\", 4, \"ngIf\"], [1, \"form-check\"], [\"type\", \"checkbox\", 1, \"form-check-input\", 3, \"ngModel\", \"disabled\", \"indeterminate\", \"ngModelChange\"], [1, \"form-check-label\", 3, \"click\"], [\"aria-hidden\", \"true\", 3, \"ngSwitch\", \"click\"], [\"width\", \"0.8rem\", \"height\", \"0.8rem\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-caret-right-fill\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngSwitchCase\"], [\"width\", \"0.8rem\", \"height\", \"0.8rem\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-caret-down-fill\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngSwitchCase\"], [\"width\", \"0.8rem\", \"height\", \"0.8rem\", \"viewBox\", \"0 0 16 16\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-caret-right-fill\"], [\"d\", \"M12.14 8.753l-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z\"], [\"width\", \"0.8rem\", \"height\", \"0.8rem\", \"viewBox\", \"0 0 16 16\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-caret-down-fill\"], [\"d\", \"M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\"], [\"class\", \"row row-filter\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"row\", \"row-filter\"], [1, \"col-12\"], [\"type\", \"text\", 1, \"form-control\", 3, \"placeholder\", \"ngModel\", \"ngModelChange\"], [\"class\", \"row row-all\", 4, \"ngIf\"], [\"class\", \"dropdown-divider\", 4, \"ngIf\"], [1, \"row\", \"row-all\"], [\"class\", \"form-check form-check-inline\", 4, \"ngIf\"], [\"class\", \"float-right form-check-label\", 3, \"click\", 4, \"ngIf\"], [1, \"form-check\", \"form-check-inline\"], [\"type\", \"checkbox\", 1, \"form-check-input\", 3, \"ngModel\", \"indeterminate\", \"ngModelChange\"], [1, \"float-right\", \"form-check-label\", 3, \"click\"], [\"aria-hidden\", \"true\", 3, \"title\", \"ngSwitch\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-arrows-angle-expand\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngSwitchCase\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-arrows-angle-contract\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngSwitchCase\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-arrows-angle-expand\"], [\"fill-rule\", \"evenodd\", \"d\", \"M1.5 10.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\"], [\"fill-rule\", \"evenodd\", \"d\", \"M6.354 9.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm8.5-8.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\"], [\"fill-rule\", \"evenodd\", \"d\", \"M10.036 1.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 1 1-1 0V2h-3.5a.5.5 0 0 1-.5-.5z\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-arrows-angle-contract\"], [\"fill-rule\", \"evenodd\", \"d\", \"M9.5 2.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\"], [\"fill-rule\", \"evenodd\", \"d\", \"M14.354 1.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 1 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm-7.5 7.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\"], [\"fill-rule\", \"evenodd\", \"d\", \"M2.036 9.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V10h-3.5a.5.5 0 0 1-.5-.5z\"], [1, \"dropdown-divider\"], [1, \"treeview-container\"], [3, \"config\", \"item\", \"template\", \"checkedChange\", 4, \"ngFor\", \"ngForOf\"], [3, \"config\", \"item\", \"template\", \"checkedChange\"], [1, \"treeview-text\"]],\n    template: function TreeviewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, TreeviewComponent_ng_template_0_Template, 6, 5, \"ng-template\", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(2, TreeviewComponent_ng_template_2_Template, 2, 2, \"ng-template\", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵelementStart(4, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(5, TreeviewComponent_ng_template_5_Template, 0, 0, \"ng-template\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 4);\n        ɵngcc0.ɵɵtemplate(7, TreeviewComponent_div_7_Template, 2, 3, \"div\", 5);\n        ɵngcc0.ɵɵtemplate(8, TreeviewComponent_div_8_Template, 2, 1, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r2 = ɵngcc0.ɵɵreference(3);\n\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.headerTemplate || _r2)(\"ngTemplateOutletContext\", ctx.headerTemplateContext);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.hasFilterItems);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgTemplateOutlet, ɵngcc1.NgSwitch, ɵngcc1.NgSwitchCase, ɵngcc1.NgIf, ɵngcc2.CheckboxControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc2.DefaultValueAccessor, ɵngcc1.NgForOf, TreeviewItemComponent];\n    },\n    styles: [\"[_nghost-%COMP%]   .treeview-header[_ngcontent-%COMP%]   .row-filter[_ngcontent-%COMP%]{margin-bottom:.5rem}[_nghost-%COMP%]   .treeview-header[_ngcontent-%COMP%]   .row-all[_ngcontent-%COMP%]   .bi[_ngcontent-%COMP%]{cursor:pointer}[_nghost-%COMP%]   .treeview-container[_ngcontent-%COMP%]   .row-item[_ngcontent-%COMP%]{flex-wrap:nowrap;margin-bottom:.3rem}[_nghost-%COMP%]   .treeview-container[_ngcontent-%COMP%]   .row-item[_ngcontent-%COMP%]   .bi[_ngcontent-%COMP%]{cursor:pointer;margin-right:.3rem}.treeview-container[_ngcontent-%COMP%]{overflow-y:auto;padding-right:.3rem}.treeview-text[_ngcontent-%COMP%]{padding:.3rem 0;white-space:nowrap}\"]\n  });\n  return TreeviewComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DropdownTreeviewComponent = /*#__PURE__*/(() => {\n  class DropdownTreeviewComponent {\n    constructor(i18n, defaultConfig) {\n      this.i18n = i18n;\n      this.defaultConfig = defaultConfig;\n      this.buttonClass = 'btn-outline-secondary';\n      this.selectedChange = new EventEmitter(true);\n      this.filterChange = new EventEmitter();\n      this.config = this.defaultConfig;\n    }\n\n    onSelectedChange(values) {\n      this.buttonLabel = this.i18n.getText(this.treeviewComponent.selection);\n      this.selectedChange.emit(values);\n    }\n\n    onFilterChange(text) {\n      this.filterChange.emit(text);\n    }\n\n  }\n\n  DropdownTreeviewComponent.ɵfac = function DropdownTreeviewComponent_Factory(t) {\n    return new (t || DropdownTreeviewComponent)(ɵngcc0.ɵɵdirectiveInject(TreeviewI18n), ɵngcc0.ɵɵdirectiveInject(TreeviewConfig));\n  };\n\n  DropdownTreeviewComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DropdownTreeviewComponent,\n    selectors: [[\"ngx-dropdown-treeview\"]],\n    viewQuery: function DropdownTreeviewComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TreeviewComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.treeviewComponent = _t.first);\n      }\n    },\n    inputs: {\n      buttonClass: \"buttonClass\",\n      config: \"config\",\n      headerTemplate: \"headerTemplate\",\n      itemTemplate: \"itemTemplate\",\n      items: \"items\"\n    },\n    outputs: {\n      selectedChange: \"selectedChange\",\n      filterChange: \"filterChange\"\n    },\n    decls: 6,\n    vars: 6,\n    consts: [[\"ngxDropdown\", \"\", 1, \"dropdown\"], [\"type\", \"button\", \"role\", \"button\", \"ngxDropdownToggle\", \"\", 1, \"btn\", 3, \"ngClass\"], [\"ngxDropdownMenu\", \"\", \"aria-labelledby\", \"dropdownMenu\", 3, \"click\"], [1, \"dropdown-container\"], [3, \"config\", \"headerTemplate\", \"items\", \"itemTemplate\", \"selectedChange\", \"filterChange\"]],\n    template: function DropdownTreeviewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"button\", 1);\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵlistener(\"click\", function DropdownTreeviewComponent_Template_div_click_3_listener($event) {\n          return $event.stopPropagation();\n        });\n        ɵngcc0.ɵɵelementStart(4, \"div\", 3);\n        ɵngcc0.ɵɵelementStart(5, \"ngx-treeview\", 4);\n        ɵngcc0.ɵɵlistener(\"selectedChange\", function DropdownTreeviewComponent_Template_ngx_treeview_selectedChange_5_listener($event) {\n          return ctx.onSelectedChange($event);\n        })(\"filterChange\", function DropdownTreeviewComponent_Template_ngx_treeview_filterChange_5_listener($event) {\n          return ctx.onFilterChange($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.buttonClass);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.buttonLabel, \" \");\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"config\", ctx.config)(\"headerTemplate\", ctx.headerTemplate)(\"items\", ctx.items)(\"itemTemplate\", ctx.itemTemplate);\n      }\n    },\n    directives: [DropdownDirective, DropdownToggleDirective, ɵngcc1.NgClass, DropdownMenuDirective, TreeviewComponent],\n    styles: [\".dropdown[_ngcontent-%COMP%]{display:inline-block;width:100%}.dropdown[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin-right:.9rem;overflow:hidden;padding-right:30px;text-align:left;text-overflow:ellipsis;width:100%}.dropdown[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:after{margin-top:.6rem;position:absolute;right:.6rem}.dropdown[_ngcontent-%COMP%]   .dropdown-menu[_ngcontent-%COMP%]   .dropdown-container[_ngcontent-%COMP%]{padding:0 .6rem}\"]\n  });\n  return DropdownTreeviewComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TreeviewItemComponent = /*#__PURE__*/(() => {\n  class TreeviewItemComponent {\n    constructor(defaultConfig) {\n      this.defaultConfig = defaultConfig;\n      this.checkedChange = new EventEmitter();\n\n      this.onCollapseExpand = () => {\n        this.item.collapsed = !this.item.collapsed;\n      };\n\n      this.onCheckedChange = () => {\n        const checked = this.item.checked;\n\n        if (!isNil(this.item.children) && !this.config.decoupleChildFromParent) {\n          this.item.children.forEach(child => child.setCheckedRecursive(checked));\n        }\n\n        this.checkedChange.emit(checked);\n      };\n\n      this.config = this.defaultConfig;\n    }\n\n    onChildCheckedChange(child, checked) {\n      if (!this.config.decoupleChildFromParent) {\n        let itemChecked = null;\n\n        for (const childItem of this.item.children) {\n          if (itemChecked === null) {\n            itemChecked = childItem.checked;\n          } else if (itemChecked !== childItem.checked) {\n            itemChecked = undefined;\n            break;\n          }\n        }\n\n        if (itemChecked === null) {\n          itemChecked = false;\n        }\n\n        if (this.item.checked !== itemChecked) {\n          this.item.checked = itemChecked;\n        }\n      }\n\n      this.checkedChange.emit(checked);\n    }\n\n  }\n\n  TreeviewItemComponent.ɵfac = function TreeviewItemComponent_Factory(t) {\n    return new (t || TreeviewItemComponent)(ɵngcc0.ɵɵdirectiveInject(TreeviewConfig));\n  };\n\n  TreeviewItemComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TreeviewItemComponent,\n    selectors: [[\"ngx-treeview-item\"]],\n    inputs: {\n      config: \"config\",\n      template: \"template\",\n      item: \"item\"\n    },\n    outputs: {\n      checkedChange: \"checkedChange\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"treeview-item\", 4, \"ngIf\"], [1, \"treeview-item\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [4, \"ngIf\"], [3, \"config\", \"item\", \"template\", \"checkedChange\", 4, \"ngFor\", \"ngForOf\"], [3, \"config\", \"item\", \"template\", \"checkedChange\"]],\n    template: function TreeviewItemComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, TreeviewItemComponent_div_0_Template, 3, 7, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.item);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgForOf, TreeviewItemComponent],\n    styles: [\"[_nghost-%COMP%]{display:block}[_nghost-%COMP%]   .treeview-item[_ngcontent-%COMP%]{white-space:nowrap}[_nghost-%COMP%]   .treeview-item[_ngcontent-%COMP%]   .treeview-item[_ngcontent-%COMP%]{margin-left:2rem}\"]\n  });\n  return TreeviewItemComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TreeviewPipe = /*#__PURE__*/(() => {\n  class TreeviewPipe {\n    transform(objects, textField) {\n      if (isNil(objects)) {\n        return undefined;\n      }\n\n      return objects.map(object => new TreeviewItem({\n        text: object[textField],\n        value: object\n      }));\n    }\n\n  }\n\n  TreeviewPipe.ɵfac = function TreeviewPipe_Factory(t) {\n    return new (t || TreeviewPipe)();\n  };\n\n  TreeviewPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"ngxTreeview\",\n    type: TreeviewPipe,\n    pure: true\n  });\n  return TreeviewPipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TreeviewModule = /*#__PURE__*/(() => {\n  class TreeviewModule {\n    static forRoot() {\n      return {\n        ngModule: TreeviewModule,\n        providers: [TreeviewConfig, {\n          provide: TreeviewI18n,\n          useClass: DefaultTreeviewI18n\n        }, {\n          provide: TreeviewEventParser,\n          useClass: DefaultTreeviewEventParser\n        }]\n      };\n    }\n\n  }\n\n  TreeviewModule.ɵfac = function TreeviewModule_Factory(t) {\n    return new (t || TreeviewModule)();\n  };\n\n  TreeviewModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TreeviewModule\n  });\n  TreeviewModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[FormsModule, CommonModule]]\n  });\n  return TreeviewModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TreeviewModule, {\n    declarations: function () {\n      return [TreeviewComponent, TreeviewItemComponent, TreeviewPipe, DropdownDirective, DropdownMenuDirective, DropdownToggleDirective, DropdownTreeviewComponent];\n    },\n    imports: function () {\n      return [FormsModule, CommonModule];\n    },\n    exports: function () {\n      return [TreeviewComponent, TreeviewPipe, DropdownTreeviewComponent];\n    }\n  });\n})();\n/*\r\n * Public API Surface of ngx-treeview\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DefaultTreeviewEventParser, DefaultTreeviewI18n, DownlineTreeviewEventParser, DropdownDirective, DropdownToggleDirective, DropdownTreeviewComponent, OrderDownlineTreeviewEventParser, TreeviewComponent, TreeviewConfig, TreeviewEventParser, TreeviewHelper, TreeviewI18n, TreeviewItem, TreeviewModule, TreeviewPipe, TreeviewItemComponent as ɵa, DropdownMenuDirective as ɵb }; //# sourceMappingURL=ngx-treeview.js.map","map":null,"metadata":{},"sourceType":"module"}