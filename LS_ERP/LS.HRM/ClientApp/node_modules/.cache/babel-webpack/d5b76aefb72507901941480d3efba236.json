{"ast":null,"code":"import _asyncToGenerator from \"E:/LS_Projects/ExOneERP/LS_ERP/LS.HRM/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BehaviorSubject } from 'rxjs';\nimport { default as data } from \"../../assets/i18n/apiuri.json\";\nimport * as i0 from \"@angular/core\";\nexport class AuthorizeService {\n  constructor() {\n    // By default pop ups are disabled because they don't work properly on Edge.\n    // If you want to enable pop up authentication simply set this flag to false. \n    //private languageSubject: BehaviorSubject<string> = new BehaviorSubject<string>('');\n    this.userSubject = new BehaviorSubject(false);\n    this.isSubmittingSubject = new BehaviorSubject(false);\n\n    this.Lang = () => this.selectedLanguage();\n  } //public setLanguageChange(language: string) {\n  //  this.languageSubject.next(language);\n  //}\n\n\n  setAuthorize(isAuth) {\n    this.userSubject.next(isAuth);\n  }\n\n  isAuthenticated() {\n    return this.getUserName() !== '' ? true : false;\n  } //public getLanguageChange(): BehaviorSubject<string> {\n  //  return this.languageSubject;\n  //}\n\n\n  getAuthorize() {\n    return this.userSubject;\n  }\n\n  getUserName() {\n    var _a;\n\n    return (_a = localStorage.getItem('userName')) !== null && _a !== void 0 ? _a : '';\n  }\n\n  getUser() {\n    const user = localStorage.getItem('metaData');\n    return JSON.parse(user);\n  }\n\n  getAccessToken() {\n    var _a;\n\n    return (_a = localStorage.getItem('accessToken')) !== null && _a !== void 0 ? _a : ''; //return from('')\n    //  .pipe(mergeMap(() => from(Observable<string>(''))),\n    //    map(user => ''));\n    //return from(this.ensureUserManagerInitialized())\n    //  .pipe(mergeMap(() => from(this.userManager.getUser())),\n    //    map(user => user && user.access_token));\n  }\n\n  SetApiEndPoint(apiEndpoint) {\n    //localStorage.removeItem('apiEndpoint');\n    localStorage.setItem('apiEndpoint', apiEndpoint);\n  }\n\n  ApiEndPoint() {\n    var _a;\n\n    return (_a = localStorage.getItem('apiEndpoint')) !== null && _a !== void 0 ? _a : '';\n  }\n\n  GetSystemSetupApiEndPoint() {\n    var _a;\n\n    return (_a = localStorage.getItem('setupapi')) !== null && _a !== void 0 ? _a : '';\n  }\n\n  GetSchoolApiEndPoint() {\n    var _a;\n\n    return (_a = data.schoolapiurl) !== null && _a !== void 0 ? _a : '';\n  }\n\n  GetOprApiEndPoint() {\n    var _a;\n\n    return (_a = localStorage.getItem('oprEndPoint')) !== null && _a !== void 0 ? _a : '';\n  }\n\n  DbConnectionString() {\n    var _a;\n\n    return (_a = localStorage.getItem('dbConnectionString')) !== null && _a !== void 0 ? _a : '';\n  }\n\n  DbHRMConnectionString() {\n    var _a;\n\n    return (_a = localStorage.getItem('dbHRMConnectionString')) !== null && _a !== void 0 ? _a : '';\n  }\n\n  ModuleCodes() {\n    var _a;\n\n    return (_a = localStorage.getItem('moduleCodes')) !== null && _a !== void 0 ? _a : '';\n  }\n\n  SetSubmitting(isSubmitting) {\n    this.isSubmittingSubject.next(isSubmitting);\n  }\n\n  IsSubmitting() {\n    return this.isSubmittingSubject;\n  }\n\n  selectedLanguage() {\n    var _a;\n\n    return (_a = localStorage.getItem('language')) !== null && _a !== void 0 ? _a : 'en-US';\n  }\n\n  isArabic() {\n    return this.selectedLanguage() == 'ar';\n  } //public isAuthenticated(): Observable<boolean> {\n  //  return this.getUser().pipe(map(u => !!u));\n  //}\n  //public getUser(): Observable<IUser | null> {\n  //  return concat(\n  //    this.userSubject.pipe(take(1), filter(u => !!u)),\n  //    this.getUserFromStorage().pipe(filter(u => !!u), tap(u => this.userSubject.next(u))),\n  //    this.userSubject.asObservable());\n  //}\n  //public getAccessToken(): Observable<string> {\n  //  return from(this.ensureUserManagerInitialized())\n  //    .pipe(mergeMap(() => from(this.userManager.getUser())),\n  //      map(user => user && user.access_token));\n  //}\n  // We try to authenticate the user in three different ways:\n  // 1) We try to see if we can authenticate the user silently. This happens\n  //    when the user is already logged in on the IdP and is done using a hidden iframe\n  //    on the client.\n  // 2) We try to authenticate the user using a PopUp Window. This might fail if there is a\n  //    Pop-Up blocker or the user has disabled PopUps.\n  // 3) If the two methods above fail, we redirect the browser to the IdP to perform a traditional\n  //    redirect flow.\n\n\n  signOut(state) {\n    return _asyncToGenerator(function* () {})();\n  }\n\n}\n\nAuthorizeService.ɵfac = function AuthorizeService_Factory(t) {\n  return new (t || AuthorizeService)();\n};\n\nAuthorizeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthorizeService,\n  factory: AuthorizeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["E:/LS_Projects/ExOneERP/LS_ERP/LS.HRM/ClientApp/src/app/api-authorization/AuthorizeService.ts"],"names":["BehaviorSubject","default","data","i0","AuthorizeService","constructor","userSubject","isSubmittingSubject","Lang","selectedLanguage","setAuthorize","isAuth","next","isAuthenticated","getUserName","getAuthorize","_a","localStorage","getItem","getUser","user","JSON","parse","getAccessToken","SetApiEndPoint","apiEndpoint","setItem","ApiEndPoint","GetSystemSetupApiEndPoint","GetSchoolApiEndPoint","schoolapiurl","GetOprApiEndPoint","DbConnectionString","DbHRMConnectionString","ModuleCodes","SetSubmitting","isSubmitting","IsSubmitting","isArabic","signOut","state","ɵfac","AuthorizeService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { BehaviorSubject } from 'rxjs';\r\nimport { default as data } from \"../../assets/i18n/apiuri.json\";\r\nimport * as i0 from \"@angular/core\";\r\nexport class AuthorizeService {\r\n    constructor() {\r\n        // By default pop ups are disabled because they don't work properly on Edge.\r\n        // If you want to enable pop up authentication simply set this flag to false. \r\n        //private languageSubject: BehaviorSubject<string> = new BehaviorSubject<string>('');\r\n        this.userSubject = new BehaviorSubject(false);\r\n        this.isSubmittingSubject = new BehaviorSubject(false);\r\n        this.Lang = () => this.selectedLanguage();\r\n    }\r\n    //public setLanguageChange(language: string) {\r\n    //  this.languageSubject.next(language);\r\n    //}\r\n    setAuthorize(isAuth) {\r\n        this.userSubject.next(isAuth);\r\n    }\r\n    isAuthenticated() {\r\n        return this.getUserName() !== '' ? true : false;\r\n    }\r\n    //public getLanguageChange(): BehaviorSubject<string> {\r\n    //  return this.languageSubject;\r\n    //}\r\n    getAuthorize() {\r\n        return this.userSubject;\r\n    }\r\n    getUserName() {\r\n        var _a;\r\n        return (_a = localStorage.getItem('userName')) !== null && _a !== void 0 ? _a : '';\r\n    }\r\n    getUser() {\r\n        const user = localStorage.getItem('metaData');\r\n        return JSON.parse(user);\r\n    }\r\n    getAccessToken() {\r\n        var _a;\r\n        return (_a = localStorage.getItem('accessToken')) !== null && _a !== void 0 ? _a : '';\r\n        //return from('')\r\n        //  .pipe(mergeMap(() => from(Observable<string>(''))),\r\n        //    map(user => ''));\r\n        //return from(this.ensureUserManagerInitialized())\r\n        //  .pipe(mergeMap(() => from(this.userManager.getUser())),\r\n        //    map(user => user && user.access_token));\r\n    }\r\n    SetApiEndPoint(apiEndpoint) {\r\n        //localStorage.removeItem('apiEndpoint');\r\n        localStorage.setItem('apiEndpoint', apiEndpoint);\r\n    }\r\n    ;\r\n    ApiEndPoint() {\r\n        var _a;\r\n        return (_a = localStorage.getItem('apiEndpoint')) !== null && _a !== void 0 ? _a : '';\r\n    }\r\n    ;\r\n    GetSystemSetupApiEndPoint() {\r\n        var _a;\r\n        return (_a = localStorage.getItem('setupapi')) !== null && _a !== void 0 ? _a : '';\r\n    }\r\n    ;\r\n    GetSchoolApiEndPoint() {\r\n        var _a;\r\n        return (_a = data.schoolapiurl) !== null && _a !== void 0 ? _a : '';\r\n    }\r\n    ;\r\n    GetOprApiEndPoint() {\r\n        var _a;\r\n        return (_a = localStorage.getItem('oprEndPoint')) !== null && _a !== void 0 ? _a : '';\r\n    }\r\n    ;\r\n    DbConnectionString() {\r\n        var _a;\r\n        return (_a = localStorage.getItem('dbConnectionString')) !== null && _a !== void 0 ? _a : '';\r\n    }\r\n    ;\r\n    DbHRMConnectionString() {\r\n        var _a;\r\n        return (_a = localStorage.getItem('dbHRMConnectionString')) !== null && _a !== void 0 ? _a : '';\r\n    }\r\n    ;\r\n    ModuleCodes() {\r\n        var _a;\r\n        return (_a = localStorage.getItem('moduleCodes')) !== null && _a !== void 0 ? _a : '';\r\n    }\r\n    ;\r\n    SetSubmitting(isSubmitting) {\r\n        this.isSubmittingSubject.next(isSubmitting);\r\n    }\r\n    IsSubmitting() {\r\n        return this.isSubmittingSubject;\r\n    }\r\n    selectedLanguage() {\r\n        var _a;\r\n        return (_a = localStorage.getItem('language')) !== null && _a !== void 0 ? _a : 'en-US';\r\n    }\r\n    isArabic() {\r\n        return this.selectedLanguage() == 'ar';\r\n    }\r\n    //public isAuthenticated(): Observable<boolean> {\r\n    //  return this.getUser().pipe(map(u => !!u));\r\n    //}\r\n    //public getUser(): Observable<IUser | null> {\r\n    //  return concat(\r\n    //    this.userSubject.pipe(take(1), filter(u => !!u)),\r\n    //    this.getUserFromStorage().pipe(filter(u => !!u), tap(u => this.userSubject.next(u))),\r\n    //    this.userSubject.asObservable());\r\n    //}\r\n    //public getAccessToken(): Observable<string> {\r\n    //  return from(this.ensureUserManagerInitialized())\r\n    //    .pipe(mergeMap(() => from(this.userManager.getUser())),\r\n    //      map(user => user && user.access_token));\r\n    //}\r\n    // We try to authenticate the user in three different ways:\r\n    // 1) We try to see if we can authenticate the user silently. This happens\r\n    //    when the user is already logged in on the IdP and is done using a hidden iframe\r\n    //    on the client.\r\n    // 2) We try to authenticate the user using a PopUp Window. This might fail if there is a\r\n    //    Pop-Up blocker or the user has disabled PopUps.\r\n    // 3) If the two methods above fail, we redirect the browser to the IdP to perform a traditional\r\n    //    redirect flow.\r\n    async signOut(state) {\r\n    }\r\n}\r\nAuthorizeService.ɵfac = function AuthorizeService_Factory(t) { return new (t || AuthorizeService)(); };\r\nAuthorizeService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthorizeService, factory: AuthorizeService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}