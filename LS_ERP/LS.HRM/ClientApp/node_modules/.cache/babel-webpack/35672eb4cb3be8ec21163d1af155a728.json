{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged, map, startWith, switchMap } from 'rxjs/operators';\nimport { ParentSystemSetupComponent } from '../../sharedcomponent/parentsystemsetup.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/api.service\";\nimport * as i3 from \"../../api-authorization/AuthorizeService\";\nimport * as i4 from \"../../services/utility.service\";\nimport * as i5 from \"../../services/notification.service\";\nimport * as i6 from \"@angular/material/dialog\";\nimport * as i7 from \"../../sharedcomponent/pagination.service\";\nimport * as i8 from \"../../sharedcomponent/autoloader.component\";\nimport * as i9 from \"@angular/material/autocomplete\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"@angular/material/slide-toggle\";\nimport * as i12 from \"@angular/material/core\";\nimport * as i13 from \"@ngx-translate/core\";\n\nfunction AccountsbranchmappingComponent_mat_option_46_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 36);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r3.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r3.value, \" \");\n  }\n}\n\nfunction AccountsbranchmappingComponent_tr_66_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵelementStart(2, \"label\", 37);\n    i0.ɵɵelementStart(3, \"mat-slide-toggle\", 32);\n    i0.ɵɵlistener(\"change\", function AccountsbranchmappingComponent_tr_66_Template_mat_slide_toggle_change_3_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const code_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.selectMapping($event, code_r4.finAcCode);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"span\", 38);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\", 39);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const code_r4 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"checked\", ctx_r2.isChecked);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(code_r4.finAcCode);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(code_r4.finAcDesc);\n  }\n}\n\nexport let AccountsbranchmappingComponent = /*#__PURE__*/(() => {\n  class AccountsbranchmappingComponent extends ParentSystemSetupComponent {\n    constructor(fb, apiService, authService, utilService, notifyService, dialog, pageService) {\n      super(authService);\n      this.fb = fb;\n      this.apiService = apiService;\n      this.authService = authService;\n      this.utilService = utilService;\n      this.notifyService = notifyService;\n      this.dialog = dialog;\n      this.pageService = pageService;\n      this.branchCodeControl = new FormControl();\n      this.acCodeList = [];\n      this.allAcCodeList = [];\n      this.isBranchLoading = false;\n      this.isChecked = false;\n      this.isMainChecked = false;\n      this.branchCodeError = '';\n      this.listOfAcCodes = [];\n      this.filteredOptions = this.branchCodeControl.valueChanges.pipe(startWith(''), debounceTime(400), distinctUntilChanged(), switchMap(val => {\n        if (val.trim() !== '') this.isBranchLoading = true;\n        return this.filter(val || '');\n      }));\n    }\n\n    ngOnInit() {\n      this.loadAcCodes();\n    }\n\n    filter(val) {\n      return this.apiService.getall(`branch/getSelectSysBranchList?search=${val.trim()}`).pipe(map(response => {\n        const res = response; //if (res && res.length == 0)\n        //  this.notifyService.showError(\"enter branch name\")\n\n        this.isBranchLoading = false;\n        return res;\n      }));\n    }\n\n    loadAcCodes() {\n      this.apiService.getall(`accountsbranchmapping/getBranchAccountMappingList`).subscribe(res => {\n        if (res) {\n          this.acCodeList = res;\n          this.allAcCodeList = res;\n        }\n      });\n    }\n\n    searchFilter(value) {\n      let filterValueLower = value.toLowerCase();\n\n      if (value.trim() === '') {\n        this.acCodeList = this.allAcCodeList;\n      } else {\n        this.acCodeList = this.allAcCodeList.filter(item => {\n          var _a;\n\n          return ((_a = item.finAcDesc) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(filterValueLower)) || item.finAcCode.includes(filterValueLower);\n        });\n      }\n    }\n\n    selectMapping(event, id) {\n      const isChecked = event.checked;\n\n      if (isChecked) {\n        this.listOfAcCodes.push(id);\n      } else {\n        let index = this.listOfAcCodes.findIndex(a => a === id);\n        this.listOfAcCodes.splice(index, 1);\n      }\n    }\n\n    checkAll(evt) {\n      this.isMainChecked = evt.checked;\n\n      if (evt.checked) {\n        this.acCodeList.forEach(item => {\n          this.listOfAcCodes.push(item.finAcCode);\n        });\n        this.isChecked = true; // this.setCheckBoxItems(true);\n      } else {\n        this.listOfAcCodes = [];\n        this.isChecked = false;\n      }\n    }\n\n    blurBranchCode(event) {\n      this.apiService.getall(`branch/checkBranchCode?branchCode=${event.target.value}`).subscribe(res => {\n        if (!res) {\n          //if (!this.isOptionSelected) {\n          //this.isOptionSelected = false;\n          this.branchCodeControl.setValue('');\n          this.branchCodeError = \"Select BranchCode\";\n          this.form.patchValue({\n            'finBranchName': '',\n            'finBranchAddress': ''\n          }); //}\n        }\n      });\n    }\n\n    branchCodeSelected(event) {\n      // this.branchCodeControl.setValue(event.option.value);\n      this.branchCodeError = '';\n      this.isMainChecked = false;\n      this.isChecked = false;\n    } //setCheckBoxItems(isChecked: boolean) {\n    //  var ele = document.getElementsByName('checkItem') as any;\n    //  for (var i = 0; i < ele.length; i++) {\n    //    if (ele[i].type == 'checkbox')\n    //      ele[i].checked = isChecked;\n    //  }\n    //}\n\n\n    submit() {\n      if (this.listOfAcCodes.length > 0) {\n        let finBranchCode = this.branchCodeControl.value;\n\n        if (this.utilService.hasValue(finBranchCode)) {\n          this.apiService.post('accountsbranchmapping', {\n            'finBranchCode': finBranchCode,\n            acCodeList: this.listOfAcCodes\n          }).subscribe(res => {\n            this.utilService.OkMessage();\n            this.listOfAcCodes = []; // this.setCheckBoxItems(false);\n\n            this.isChecked = false;\n            this.isMainChecked = false; // this.form.reset();\n          }, error => {\n            this.utilService.ShowApiErrorMessage(error);\n          });\n        } else this.utilService.FillUpFields();\n      } else this.utilService.FillUpFields();\n    }\n\n  }\n\n  AccountsbranchmappingComponent.ɵfac = function AccountsbranchmappingComponent_Factory(t) {\n    return new (t || AccountsbranchmappingComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApiService), i0.ɵɵdirectiveInject(i3.AuthorizeService), i0.ɵɵdirectiveInject(i4.UtilityService), i0.ɵɵdirectiveInject(i5.NotificationService), i0.ɵɵdirectiveInject(i6.MatDialog), i0.ɵɵdirectiveInject(i7.PaginationService));\n  };\n\n  AccountsbranchmappingComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AccountsbranchmappingComponent,\n    selectors: [[\"app-accountsbranchmapping\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 71,\n    vars: 48,\n    consts: [[1, \"page-breadcrumb\"], [1, \"row\"], [1, \"col-12\", \"align-self-center\"], [1, \"page-title\", \"text-truncate\", \"text-dark\", \"font-weight-medium\", \"mb-1\"], [1, \"d-flex\", \"align-items-center\"], [\"aria-label\", \"breadcrumb\"], [1, \"breadcrumb\", \"m-0\", \"p-0\"], [1, \"breadcrumb-item\", \"text-muted\"], [\"aria-current\", \"page\", 1, \"breadcrumb-item\", \"active\"], [1, \"container-fluid\"], [1, \"col-md-12\", \"col-lg-12\"], [1, \"card\"], [1, \"card-body\"], [1, \"card-title\"], [1, \"row\", \"pb-3\"], [1, \"col-md-3\"], [1, \"form-control\", 3, \"placeholder\", \"input\"], [1, \"cardtitle-divider\"], [1, \"col-md-4\", \"col-lg-4\"], [1, \"form-group\"], [\"for\", \"exampleFormControlSelect1\"], [1, \"text-danger\"], [3, \"isLoading\"], [\"type\", \"text\", \"matInput\", \"\", 1, \"form-control\", 3, \"placeholder\", \"formControl\", \"matAutocomplete\"], [3, \"optionSelected\"], [\"auto1\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-md-5\", \"col-lg-5\"], [1, \"col-md-12\", \"col-lg-12\", \"text-center\", \"pt-4\"], [\"type\", \"submit\", 1, \"btn\", \"waves-effect\", \"waves-light\", \"btn-rounded\", \"btn-primary\", \"btn-midblock\", \"float-right\", 3, \"value\", \"click\"], [1, \"table-responsive\"], [1, \"table\", \"table-bordered\", \"no-wrap\"], [\"color\", \"primary\", 3, \"checked\", \"change\"], [4, \"ngFor\", \"ngForOf\"], [1, \"col-md-12\", \"col-lg-12\", \"text-center\"], [\"type\", \"submit\", 1, \"btn\", \"waves-effect\", \"waves-light\", \"btn-rounded\", \"btn-primary\", \"btn-midblock\", 3, \"value\", \"click\"], [3, \"value\"], [1, \"switch\"], [1, \"slider\", \"round\"], [\"width\", \"50%\"]],\n    template: function AccountsbranchmappingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"h3\", 3);\n        i0.ɵɵtext(4);\n        i0.ɵɵpipe(5, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵelementStart(7, \"nav\", 5);\n        i0.ɵɵelementStart(8, \"ol\", 6);\n        i0.ɵɵelementStart(9, \"li\", 7);\n        i0.ɵɵtext(10);\n        i0.ɵɵpipe(11, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"li\", 7);\n        i0.ɵɵtext(13);\n        i0.ɵɵpipe(14, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"li\", 8);\n        i0.ɵɵtext(16);\n        i0.ɵɵpipe(17, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 9);\n        i0.ɵɵelementStart(19, \"div\", 1);\n        i0.ɵɵelementStart(20, \"div\", 10);\n        i0.ɵɵelementStart(21, \"div\", 11);\n        i0.ɵɵelementStart(22, \"div\", 12);\n        i0.ɵɵelementStart(23, \"h4\", 13);\n        i0.ɵɵtext(24);\n        i0.ɵɵpipe(25, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"div\", 14);\n        i0.ɵɵelementStart(27, \"div\", 15);\n        i0.ɵɵelementStart(28, \"input\", 16);\n        i0.ɵɵlistener(\"input\", function AccountsbranchmappingComponent_Template_input_input_28_listener($event) {\n          return ctx.searchFilter($event.target.value);\n        });\n        i0.ɵɵpipe(29, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(30, \"div\", 17);\n        i0.ɵɵelementStart(31, \"div\", 10);\n        i0.ɵɵelementStart(32, \"div\", 1);\n        i0.ɵɵelementStart(33, \"div\", 18);\n        i0.ɵɵelementStart(34, \"div\", 19);\n        i0.ɵɵelementStart(35, \"label\", 20);\n        i0.ɵɵtext(36);\n        i0.ɵɵpipe(37, \"translate\");\n        i0.ɵɵelementStart(38, \"span\", 21);\n        i0.ɵɵtext(39);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(40, \"auto-loader\", 22);\n        i0.ɵɵelement(41, \"input\", 23);\n        i0.ɵɵpipe(42, \"translate\");\n        i0.ɵɵpipe(43, \"translate\");\n        i0.ɵɵelementStart(44, \"mat-autocomplete\", 24, 25);\n        i0.ɵɵlistener(\"optionSelected\", function AccountsbranchmappingComponent_Template_mat_autocomplete_optionSelected_44_listener($event) {\n          return ctx.branchCodeSelected($event);\n        });\n        i0.ɵɵtemplate(46, AccountsbranchmappingComponent_mat_option_46_Template, 2, 2, \"mat-option\", 26);\n        i0.ɵɵpipe(47, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(48, \"div\", 27);\n        i0.ɵɵelementStart(49, \"div\", 1);\n        i0.ɵɵelementStart(50, \"div\", 28);\n        i0.ɵɵelementStart(51, \"input\", 29);\n        i0.ɵɵlistener(\"click\", function AccountsbranchmappingComponent_Template_input_click_51_listener() {\n          return ctx.submit();\n        });\n        i0.ɵɵpipe(52, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(53, \"div\", 30);\n        i0.ɵɵelementStart(54, \"table\", 31);\n        i0.ɵɵelementStart(55, \"thead\");\n        i0.ɵɵelementStart(56, \"tr\");\n        i0.ɵɵelementStart(57, \"th\");\n        i0.ɵɵelementStart(58, \"mat-slide-toggle\", 32);\n        i0.ɵɵlistener(\"change\", function AccountsbranchmappingComponent_Template_mat_slide_toggle_change_58_listener($event) {\n          return ctx.checkAll($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(59, \"th\");\n        i0.ɵɵtext(60);\n        i0.ɵɵpipe(61, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(62, \"th\");\n        i0.ɵɵtext(63);\n        i0.ɵɵpipe(64, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(65, \"tbody\");\n        i0.ɵɵtemplate(66, AccountsbranchmappingComponent_tr_66_Template, 9, 3, \"tr\", 33);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(67, \"div\", 1);\n        i0.ɵɵelementStart(68, \"div\", 34);\n        i0.ɵɵelementStart(69, \"input\", 35);\n        i0.ɵɵlistener(\"click\", function AccountsbranchmappingComponent_Template_input_click_69_listener() {\n          return ctx.submit();\n        });\n        i0.ɵɵpipe(70, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(45);\n\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(5, 20, \"Branch_and_Account_Mapping\"), \" \");\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(11, 22, \"Financial_Management\"), \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(14, 24, \"Finance\"), \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(17, 26, \"Branch_and_Account_Mapping\"), \" \");\n        i0.ɵɵadvance(8);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(25, 28, \"Account_Mapping\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵpropertyInterpolate1(\"placeholder\", \"\", i0.ɵɵpipeBind1(29, 30, \"Search\"), \"...\");\n        i0.ɵɵadvance(8);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(37, 32, \"Branch_Code\"), \" \\u00A0 \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.branchCodeError);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"isLoading\", ctx.isBranchLoading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate2(\"placeholder\", \"\", i0.ɵɵpipeBind1(42, 34, \"Please_Enter\"), \" \", i0.ɵɵpipeBind1(43, 36, \"Branch_Code\"), \"\");\n        i0.ɵɵproperty(\"formControl\", ctx.branchCodeControl)(\"matAutocomplete\", _r0);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(47, 38, ctx.filteredOptions));\n        i0.ɵɵadvance(5);\n        i0.ɵɵpropertyInterpolate(\"value\", i0.ɵɵpipeBind1(52, 40, \"Save\"));\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"checked\", ctx.isMainChecked);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(61, 42, \"Account_Code\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(64, 44, \"Description\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.acCodeList);\n        i0.ɵɵadvance(3);\n        i0.ɵɵpropertyInterpolate(\"value\", i0.ɵɵpipeBind1(70, 46, \"Save\"));\n      }\n    },\n    directives: [i8.AutoLoaderComponent, i1.DefaultValueAccessor, i9.MatAutocompleteTrigger, i1.NgControlStatus, i1.FormControlDirective, i9.MatAutocomplete, i10.NgForOf, i11.MatSlideToggle, i12.MatOption],\n    pipes: [i13.TranslatePipe, i10.AsyncPipe],\n    encapsulation: 2\n  });\n  return AccountsbranchmappingComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}