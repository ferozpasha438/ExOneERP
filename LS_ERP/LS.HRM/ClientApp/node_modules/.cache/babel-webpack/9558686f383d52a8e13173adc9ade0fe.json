{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../api-authorization/AuthorizeService\";\nexport let OprServicesService = /*#__PURE__*/(() => {\n  class OprServicesService {\n    constructor(http, authService) {\n      this.http = http;\n      this.authService = authService;\n      this.apiURL = '';\n    }\n\n    set EnquiryNumber(enquiryNumber) {\n      this.enquiryNumber = enquiryNumber;\n    }\n\n    get EnquiryNumber() {\n      return this.enquiryNumber;\n    }\n\n    set EnquiryID(enquiryID) {\n      this.enquiryID = enquiryID;\n    }\n\n    get EnquiryID() {\n      return this.enquiryID;\n    }\n\n    set Input(input) {\n      this.input = input;\n    }\n\n    get Input() {\n      return this.input;\n    }\n\n    set SurveyorCode(surveyorCode) {\n      this.surveyorCode = surveyorCode;\n    }\n\n    get SurveyorCode() {\n      return this.surveyorCode;\n    }\n    /*to verify whether code exist or not */\n\n\n    verifyCode(url) {\n      this.apiURL = this.authService.ApiEndPoint();\n      return this.http.get(`${this.apiURL}/${url}`);\n    }\n\n    openApprovalDialog(dialog, component) {\n      const dialogRef = dialog.open(component, {\n        disableClose: true //  direction: this.isArabic() ? \"rtl\" : \"ltr\"\n\n      });\n      return dialogRef;\n    }\n\n    openAutoWidthDialog(dialog, component) {\n      const dialogRef = dialog.open(component, {\n        disableClose: true,\n        width: \"auto\" //  direction: this.isArabic() ? \"rtl\" : \"ltr\"\n\n      });\n      return dialogRef;\n    }\n\n    openAutoWidthNHeightDialog(dialog, component) {\n      const dialogRef = dialog.open(component, {\n        disableClose: true,\n        width: \"auto\",\n        height: \"auto\" // direction: this.isArabic() ? \"rtl\" : \"ltr\"\n\n      });\n      return dialogRef;\n    }\n\n    openAutoHeightWidthDialog(dialog, component) {\n      const dialogRef = dialog.open(component, {\n        disableClose: true,\n        width: \"100%\",\n        height: \"100%\",\n        direction: this.isArabic() ? \"rtl\" : \"ltr\"\n      });\n      return dialogRef;\n    }\n\n    openFullWidthDialog(dialog, component) {\n      const dialogRef = dialog.open(component, {\n        disableClose: true,\n        width: \"100%\",\n        height: \"auto\",\n        direction: this.isArabic() ? \"rtl\" : \"ltr\"\n      });\n      return dialogRef;\n    }\n\n    confirmationDialog(dialog, component) {\n      const dialogRef = dialog.open(component, {\n        disableClose: true,\n        width: \"auto\",\n        height: \"auto\" // direction: this.isArabic() ? \"rtl\" : \"ltr\"\n\n      });\n      return dialogRef;\n    }\n\n    fullWindow(dialog, component) {\n      const dialogRef = dialog.open(component, {\n        disableClose: true,\n        width: \"100%\",\n        height: \"100%\",\n        direction: this.isArabic() ? \"rtl\" : \"ltr\"\n      });\n      return dialogRef;\n    } //openFullCrudDialog(dialog: MatDialog, component: any, width: string = '80%') {\n    //  const widthNumber = width.includes('%') ? width.split('%')[0] : width;\n    //  const dialogRef = dialog.open(component, {\n    //    disableClose: true,\n    //    width: `${widthNumber}%`,\n    //    maxWidth: `${widthNumber}vw`,\n    //    height: '90%',\n    //    direction: this.isArabic() ? \"rtl\" : \"ltr\"\n    //  });\n    //  return dialogRef;\n    //}\n\n\n    isArabic() {\n      return this.selectedLanguage() == 'ar';\n    }\n\n    getByObj(url, objectItem) {\n      this.apiURL = this.authService.GetOprApiEndPoint();\n      return this.http.get(`${this.apiURL}/${url}`, objectItem);\n    }\n\n    selectedLanguage() {\n      var _a;\n\n      return (_a = localStorage.getItem('language')) !== null && _a !== void 0 ? _a : 'en-US';\n    }\n\n    getPaginationWithFilter(url, queryParams, filterInput) {\n      this.apiURL = this.authService.GetOprApiEndPoint();\n      return this.http.post(`${this.apiURL}/${url}?${queryParams}`, filterInput).pipe(retry(1), catchError(this.handleError));\n    }\n\n    getWithFilter(url, filterInput) {\n      this.apiURL = this.authService.GetOprApiEndPoint();\n      return this.http.post(`${this.apiURL}/${url}`, filterInput).pipe(retry(1), catchError(this.handleError));\n    }\n\n    handleError(error) {\n      return throwError(error);\n    }\n\n  }\n\n  OprServicesService.ɵfac = function OprServicesService_Factory(t) {\n    return new (t || OprServicesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthorizeService));\n  };\n\n  OprServicesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OprServicesService,\n    factory: OprServicesService.ɵfac,\n    providedIn: 'root'\n  });\n  return OprServicesService;\n})();","map":null,"metadata":{},"sourceType":"module"}