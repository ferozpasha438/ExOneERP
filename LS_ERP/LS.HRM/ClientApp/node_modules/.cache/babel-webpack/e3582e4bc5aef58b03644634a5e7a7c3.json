{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { DBOperation } from '../../services/utility.constants';\nimport { DeleteConfirmDialogComponent } from '../../sharedcomponent/delete-confirm-dialog';\nimport { ParentInventoryMgtComponent } from '../../sharedcomponent/parentinventorymgt.component';\nimport { AddupdateinventorymanagementlistComponent } from '../sharedpages/addupdateinventorymanagementlist/addupdateinventorymanagementlist.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../services/api.service\";\nimport * as i5 from \"../../api-authorization/AuthorizeService\";\nimport * as i6 from \"../../services/utility.service\";\nimport * as i7 from \"../../services/notification.service\";\nimport * as i8 from \"../../sharedcomponent/ValidationService\";\nimport * as i9 from \"../../sharedcomponent/pagination.service\";\nimport * as i10 from \"@angular/material/dialog\";\nimport * as i11 from \"@ngx-translate/core\";\nimport * as i12 from \"../../sharedcomponent/spinner.component\";\nimport * as i13 from \"@angular/material/table\";\nimport * as i14 from \"@angular/material/sort\";\nimport * as i15 from \"@angular/material/paginator\";\n\nfunction InventorymanagementlistComponent_th_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 44);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"Item_Code\"), \" \");\n  }\n}\n\nfunction InventorymanagementlistComponent_td_48_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 45);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r18 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r18.itemCode);\n  }\n}\n\nfunction InventorymanagementlistComponent_th_50_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 44);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"HSN_Code\"), \" \");\n  }\n}\n\nfunction InventorymanagementlistComponent_td_51_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 45);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r19 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r19.hsnCode);\n  }\n}\n\nfunction InventorymanagementlistComponent_th_53_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 44);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"Short_Name\"), \" \");\n  }\n}\n\nfunction InventorymanagementlistComponent_td_54_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 45);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r20 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r20.shortName);\n  }\n}\n\nfunction InventorymanagementlistComponent_th_56_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 44);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"Item_Description\"), \" \");\n  }\n}\n\nfunction InventorymanagementlistComponent_td_57_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 45);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r21 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r21.itemDescription);\n  }\n}\n\nfunction InventorymanagementlistComponent_th_59_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 44);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"Category\"), \" \");\n  }\n}\n\nfunction InventorymanagementlistComponent_td_60_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 45);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r22 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r22.itemCat);\n  }\n}\n\nfunction InventorymanagementlistComponent_th_62_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 44);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"Item_Avg_Cost\"), \" \");\n  }\n}\n\nfunction InventorymanagementlistComponent_td_63_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 45);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r23 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r23.itemAvgCost);\n  }\n}\n\nfunction InventorymanagementlistComponent_th_65_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 44);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"Item_Standard_Cost\"), \" \");\n  }\n}\n\nfunction InventorymanagementlistComponent_td_66_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 45);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r24 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r24.itemStandardCost);\n  }\n}\n\nfunction InventorymanagementlistComponent_th_68_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"th\", 46);\n  }\n}\n\nfunction InventorymanagementlistComponent_td_69_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"td\", 47);\n    i0.ɵɵelementStart(1, \"a\", 48);\n    i0.ɵɵlistener(\"click\", function InventorymanagementlistComponent_td_69_Template_a_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r27);\n      const row_r25 = restoredCtx.$implicit;\n      const ctx_r26 = i0.ɵɵnextContext();\n      return ctx_r26.edit(row_r25.id);\n    });\n    i0.ɵɵelement(2, \"i\", 49);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \" \\u00A0 \");\n    i0.ɵɵelementStart(4, \"a\", 50);\n    i0.ɵɵlistener(\"click\", function InventorymanagementlistComponent_td_69_Template_a_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r27);\n      const row_r25 = restoredCtx.$implicit;\n      const ctx_r28 = i0.ɵɵnextContext();\n      return ctx_r28.delete(row_r25.id);\n    });\n    i0.ɵɵelement(5, \"i\", 51);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction InventorymanagementlistComponent_tr_70_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 52);\n  }\n}\n\nfunction InventorymanagementlistComponent_tr_71_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 53);\n  }\n}\n\nexport let InventorymanagementlistComponent = /*#__PURE__*/(() => {\n  class InventorymanagementlistComponent extends ParentInventoryMgtComponent {\n    constructor(fb, http, router, apiService, authService, utilService, notifyService, validationService, pageService, dialog, translate) {\n      super(authService);\n      this.fb = fb;\n      this.http = http;\n      this.router = router;\n      this.apiService = apiService;\n      this.authService = authService;\n      this.utilService = utilService;\n      this.notifyService = notifyService;\n      this.validationService = validationService;\n      this.pageService = pageService;\n      this.dialog = dialog;\n      this.translate = translate; //@ViewChild(MatPaginator) paginator: MatPaginator;\n      //@ViewChild(MatSort) sort: MatSort;\n\n      this.displayedColumns = ['ItemCode', 'h_code', 'shortname', 'itemdescription', 'category', 'itemavgcost', 'itemstandardcost', 'Actions'];\n      this.sortingOrder = 'id desc';\n      this.searchValue = '';\n      this.isLoading = false;\n      this.isReadOnly = false;\n      this.displayedColumns1 = ['WareHouse', 'TranDate', 'TranType', 'TranNumber', 'TranUnit', 'unitConvFactor', 'TranTotQty', 'TranPrice', 'ItemAvgCost', 'TranRemarks'];\n      /*ItemMasterform: FormGroup;*/\n\n      this.VenCodeList = [];\n      this.CategoryCodeList = [];\n      this.SubCategoryCodeList = [];\n      this.ClassCodeList = [];\n      this.SubClassCodeList = [];\n      this.TaxCodeList = [];\n      this.UomLIst = [];\n      this.warehouseList = [];\n      this.ItemTrackingList = [];\n      this.ItemTypeLIst = [];\n      this.CategoryCode = '';\n      this.id = 0;\n      this.itemcode = '';\n      this.listOfInvoices = [];\n      this.itemCode = '';\n      this.wHCode = '';\n      this.tranDate = '';\n      this.tranNumber = '';\n      this.tranUnit = '';\n      this.tranQty = '';\n      this.unitConvFactor = '';\n      this.tranTotQty = '';\n      this.tranPrice = '';\n      this.itemAvgCost = '';\n      this.tranRemarks = '';\n      this.ItemCodes = '';\n      this.sequence = 1;\n      this.editsequence = 0;\n      this.editInventoryUOMItemsequence = 0;\n      this.editBarcodesequence = 0;\n      this.listOfinventory = [];\n      this.whCode = '';\n      this.qtyOH = 0;\n      this.qtyOnSalesOrder = 0;\n      this.qtyOnPO = 0;\n      this.qtyReserved = 0;\n      this.invitemAvgCost = 0;\n      this.itemLastPOCost = 0;\n      this.itemLandedCost = 0;\n      this.minQty = 0;\n      this.maxQty = 0;\n      this.eoq = 0;\n      this.listOfUOMinventory = [];\n      this.itemUOM = '';\n      this.itemConvFactor = 0;\n      this.itemUOMPrice1 = 0;\n      this.itemUOMPrice2 = 0;\n      this.itemUOMPrice3 = 0;\n      this.itemUOMDiscPer = 0;\n      this.itemUOMPrice4 = 0;\n      this.itemUomAvgCost = 0;\n      this.itemUomLastPOCost = 0;\n      this.itemUomLandedCost = 0;\n      this.listOfBarcodeinventory = [];\n      this.itemBarUOM = '';\n      this.itemBarcode = '';\n      this.listOfNotesinventory = [];\n      this.noteDates = '';\n      this.name = '';\n      this.notes = '';\n    }\n\n    ngOnInit() {\n      this.setForm();\n      this.loadCategoryCode();\n      this.loadClassCode();\n      this.loadSubClassCode();\n      this.loadTaxCode();\n      this.loadUOMCode();\n      this.loadWarehouses();\n      this.loadVenCode();\n      this.initialLoading();\n      this.loadType();\n    }\n\n    loadinventoryHistory(Value) {\n      if (Value != null) {\n        this.apiService.getall(`Inventorymanagementlist/InventoryHistory?ItemCodes=${Value}`).subscribe(res => {\n          if (res) {\n            /*this.listOfInvoices.clear();*/\n            let listOfInvoices = res['historyList'];\n            listOfInvoices.forEach(item => {\n              //this.editInvoiceItem(item);\n              this.listOfInvoices.push({\n                itemCode: item.itemCode,\n                wHCode: item.whCode,\n                tranDate: item.tranDate,\n                tranNumber: item.tranNumber,\n                tranUnit: item.tranUnit,\n                tranQty: item.tranQty,\n                unitConvFactor: item.unitConvFactor,\n                tranTotQty: item.tranTotQty,\n                tranPrice: item.tranPrice,\n                itemAvgCost: item.itemAvgCost,\n                tranRemarks: item.tranRemarks\n              });\n            });\n            /*this.id = res.id;*/\n          }\n        });\n      }\n    }\n\n    initialLoading() {\n      this.loadList(0, this.pageService.pageCount, \"\", this.sortingOrder);\n    }\n\n    GenerateItemNumber() {\n      this.apiService.getall(`Inventorymanagementlist/GenerateItemNumber`).subscribe(res => {\n        if (res) {\n          this.form.patchValue({\n            itemCode: \"\" + res.itemCode + \"\"\n          }); //this.form.patchValue(res);\n        }\n      });\n    }\n\n    loadVenCode() {\n      this.apiService.getall('PurchaseOrder/GetVendorCodeSelectList').subscribe(res => {\n        if (res) {\n          this.VenCodeList = res;\n        }\n      });\n    }\n\n    loadWarehouses() {\n      this.apiService.getall(`warehouse/getSelectWarehouseList`).subscribe(res => {\n        if (res) {\n          this.warehouseList = res;\n        }\n      });\n    }\n\n    loadType() {\n      this.apiService.getall(`warehouse/GetSelectSysTypeList`).subscribe(res => {\n        if (res) {\n          this.ItemTypeLIst = res;\n        }\n      });\n    }\n\n    ontype(Value) {\n      if (Value == \"INV\") {\n        this.apiService.getall(`warehouse/GetSelectTrackingList?Code=${Value}`).subscribe(res => {\n          if (res) {\n            this.ItemTrackingList = res;\n          }\n        });\n      }\n    }\n\n    loadCategoryCode() {\n      this.apiService.getall('producthierarchy/GetCategorySelectList').subscribe(res => {\n        if (res) {\n          this.CategoryCodeList = res;\n        }\n      });\n    }\n\n    loadTaxCode() {\n      this.apiService.getall('Inventorymanagementlist/GetTaxSelectList').subscribe(res => {\n        if (res) {\n          this.TaxCodeList = res;\n        }\n      });\n    } //loadSubCategoryCode() {\n    //  this.apiService.getall('Inventorymanagementlist/GetSelectSubCategoryList').subscribe(res => {\n    //    if (res) {\n    //      this.SubCategoryCodeList = res;\n    //    }\n    //  })\n    //}\n\n\n    loadClassCode() {\n      this.apiService.getall('Inventorymanagementlist/GetSelectClass').subscribe(res => {\n        if (res) {\n          this.ClassCodeList = res;\n        }\n      });\n    }\n\n    loadSubClassCode() {\n      this.apiService.getall('Inventorymanagementlist/getSelectSubClassList').subscribe(res => {\n        if (res) {\n          this.SubClassCodeList = res;\n        }\n      });\n    }\n\n    loadUOMCode() {\n      this.apiService.getall('Inventorymanagementlist/GetUOMSelectList').subscribe(res => {\n        if (res) {\n          this.UomLIst = res;\n        }\n      });\n    }\n\n    onSubCategory(Value) {\n      if (Value != null) {\n        this.apiService.getall(`Inventorymanagementlist/GetSelectSubCategoryList?CategoryCode=${Value}`).subscribe(res => {\n          if (res) {\n            this.SubCategoryCodeList = res;\n          }\n        });\n      } //this.apiService.getall('Inventorymanagementlist/GetSelectSubCategoryList?search=${val}').subscribe(res => {\n      //  if (res) {\n      //    this.form.patchValue(res);\n      //    this.form.controls['itemCatName'].setValue(res.itemCatCode);\n      //  }\n      //})\n\n    } //onSortOrder(sort: any) {\n    //  this.totalItemsCount = 0;\n    //  this.sortingOrder = sort.active + ' ' + sort.direction;\n    //  this.loadUser(0, this.pageService.pageCount, \"\", this.sortingOrder);\n    //}\n\n\n    setForm() {\n      let MOBILE_PATTERN = /[0-9\\+\\-\\ ]/;\n      this.form = this.fb.group({\n        '': ['', Validators.required],\n\n        /*itemList: this.fb.array([this.createAuthority()])//, Validators.required)*/\n        'itemCode': '',\n        'hSNCode': '',\n        'itemDescription': '',\n        'itemDescriptionAr': '',\n        'shortName': '',\n        'shortNameAr': '',\n        'itemCat': ['', Validators.required],\n        'itemSubCat': ['', Validators.required],\n        'itemClass': ['', Validators.required],\n        'itemSubClass': ['', Validators.required],\n        'itemAvgCost': '',\n        'itemStandardCost': '',\n        'itemBaseUnit': ['', Validators.required],\n        'itemPrimeVendor': '',\n\n        /* 'itemStandardPrice1': ['', Validators.required],*/\n        'itemStandardPrice1': ['', Validators.required],\n        'itemStandardPrice2': ['', Validators.required],\n        'itemStandardPrice3': ['', Validators.required],\n        'itemType': '',\n        'itemTracking': '',\n        'itemWeight': '',\n        'itemTaxCode': ['', Validators.required],\n        'isActive': [false],\n        'allowPriceOverride': [false],\n        'allowDiscounts': [false],\n        'allowQuantityOverride': [false],\n        'ItemInventoryCodes': '',\n        'ItemUOMCodes': '',\n        'ItemBarcodeCodes': '',\n        'ItemNotesCodes': '',\n        'ItemHistoryCodes': '',\n        authList: this.fb.array([this.createAuthority()]),\n        inventoryList: this.fb.array([this.createInventory()]),\n        barcodeList: this.fb.array([this.createBarcode()]),\n        notesList: this.fb.array([this.createNotes()]),\n        historyList: this.fb.array([this.createHistory()])\n      });\n    } //onPageSwitch(event: PageEvent) {\n    //  this.pageService.change(event);\n    //  this.loadUser(event.pageIndex, event.pageSize, \"\", this.sortingOrder);\n    //}\n\n\n    loadUser(page, pageCount, query, orderBy) {\n      //this.apiService.getPagination('', this.utilService.getQueryString(page, pageCount, query, orderBy)).subscribe(result => {\n      //  this.totalItemsCount = 0;\n      //  //this.forecasts = result.items;\n      this.data = new MatTableDataSource(this.getData()); //  this.data = new MatTableDataSource(result.items);\n\n      this.totalItemsCount = 2; //  //this.data.data = this.forecasts;\n      //  this.data.paginator = this.paginator;\n      //  this.data.sort = this.sort;\n      //}, error => console.error(error));\n    }\n\n    submit() {\n      alert('submit');\n    }\n\n    inventorysubmit() {\n      if (this.id > 0) this.form.value['id'] = this.id;\n      this.apiService.post('Inventorymanagementlist', this.form.value).subscribe(res => {\n        /*this.itemcode = res['itemcode'];*/\n        if (res) {\n          let output1 = res;\n          Object.values(res);\n          this.itemcode = Object.values(res)[0];\n        }\n\n        this.form.patchValue({\n          ItemInventoryCodes: this.itemcode,\n          ItemUOMCodes: this.itemcode,\n          ItemBarcodeCodes: this.itemcode,\n          ItemNotesCodes: this.itemcode,\n          ItemHistoryCodes: this.itemcode,\n          itemCode: this.itemcode\n        });\n        this.setInventoryForm(this.itemcode);\n        this.setUOMForm(this.itemcode);\n        this.setBarcodeForm(this.itemcode);\n        this.utilService.OkMessage(); //this.reset();\n        //this.dialogRef.close(true);\n      }, error => {\n        console.error(error); //this.utilService.ShowApiErrorMessage(\"Duplicate\");\n\n        this.utilService.ShowApiErrorMessage(error);\n      });\n    }\n    /*  UOMTab*/\n\n\n    setUOMForm(itemvalue) {\n      this.apiService.getall(`Inventorymanagementlist/GetUOMListByID?itemvalue=${itemvalue}`).subscribe(res => {\n        if (res) {\n          //this.authList.clear();\n          //let authList = res['authList'] as Array<any>;\n          //authList.forEach(item => {\n          //  this.editItem(item);\n          //});\n          let listOfUOMinventory = res['authList'];\n          listOfUOMinventory.forEach(item => {\n            //this.editInvoiceItem(item);\n            this.listOfUOMinventory.push({\n              sequence: this.getSequence(),\n              tranNumber: \"0\",\n              itemUOM: item.itemUOM,\n              itemConvFactor: item.itemConvFactor,\n              itemUOMPrice1: item.itemUOMPrice1,\n              itemUOMPrice2: item.itemUOMPrice2,\n              itemUOMPrice3: item.itemUOMPrice3,\n              itemUOMDiscPer: item.itemUOMDiscPer,\n              itemUOMPrice4: item.itemUOMPrice4,\n              itemUomAvgCost: item.itemUomAvgCost,\n              itemUomLastPOCost: item.itemUomLastPOCost,\n              itemUomLandedCost: item.itemUomLandedCost\n            });\n          });\n        }\n      });\n    }\n\n    editItem(res) {\n      this.authList.push(this.createAuthority(res));\n    }\n\n    createAuthority(res) {\n      if (res) {\n        return this.fb.group(res);\n      }\n\n      return this.fb.group({\n        'itemUOM': ['', Validators.required],\n        'itemConvFactor': ['', Validators.required],\n        'itemUOMPrice1': ['', Validators.required],\n        'itemUOMPrice2': ['', Validators.required],\n        'itemUOMPrice3': ['', Validators.required],\n        'itemUOMDiscPer': ['', Validators.required],\n        'itemUOMPrice4': ['', Validators.required],\n        'itemUomAvgCost': ['', Validators.required],\n        'itemUomLastPOCost': ['', Validators.required],\n        'itemUomLandedCost': ['', Validators.required]\n      });\n    }\n\n    get authList() {\n      return this.form.get('authList');\n    }\n\n    addItem() {\n      this.authList.push(this.createAuthority());\n    }\n\n    AddUOM() {\n      if (this.id > 0) this.form.value['id'] = this.id;\n      this.form.value['authList'] = this.listOfUOMinventory;\n      this.apiService.post('Inventorymanagementlist/CreateUomItem', this.form.value).subscribe(res => {\n        this.setBarcodeForm(this.itemcode);\n        this.utilService.OkMessage();\n      }, error => {\n        console.error(error);\n        this.utilService.ShowApiErrorMessage(error);\n      });\n    }\n\n    removeItem(item) {\n      this.authList.removeAt(item);\n    }\n    /*UOM Tab*/\n\n    /*Item Inventory*/\n\n\n    addItemInventory() {\n      this.inventoryList.push(this.createInventory());\n    }\n\n    AddInventory() {\n      if (this.id > 0) this.form.value['id'] = this.id;\n      this.form.value['inventoryList'] = this.listOfinventory;\n      this.apiService.post('Inventorymanagementlist/CreateInventoryItem', this.form.value).subscribe(res => {\n        debugger;\n        this.utilService.OkMessage();\n      }, error => {\n        console.error(error);\n        this.utilService.ShowApiErrorMessage(error);\n      });\n    }\n\n    removeItemInventory(item) {\n      this.inventoryList.removeAt(item);\n    }\n\n    setInventoryForm(itemvalue) {\n      this.apiService.getall(`Inventorymanagementlist/GetInventoryListByID?itemvalue=${itemvalue}`).subscribe(res => {\n        if (res) {\n          //this.inventoryList.clear();\n          //let inventoryList = res['inventoryList'] as Array<any>;\n          //inventoryList.forEach(item => {\n          //  this.editInventory(item);\n          //});\n          let listOfinventory = res['inventoryList'];\n          listOfinventory.forEach(item => {\n            //this.editInvoiceItem(item);\n            this.listOfinventory.push({\n              sequence: this.getSequence(),\n              tranNumber: \"0\",\n              whCode: item.whCode,\n              qtyOH: item.qtyOH,\n              qtyOnSalesOrder: item.qtyOnSalesOrder,\n              qtyOnPO: item.qtyOnPO,\n              qtyReserved: item.qtyReserved,\n              invitemAvgCost: item.invItemAvgCost,\n              itemLastPOCost: item.itemLastPOCost,\n              itemLandedCost: item.itemLandedCost,\n              minQty: item.minQty,\n              maxQty: item.maxQty,\n              eoq: item.eoq\n            });\n          });\n        }\n      });\n    }\n\n    editInventory(res) {\n      this.inventoryList.push(this.createInventory(res));\n    }\n\n    createInventory(res) {\n      if (res) {\n        return this.fb.group(res);\n      }\n\n      return this.fb.group({\n        'whCode': ['', Validators.required],\n        'qtyOH': ['', Validators.required],\n        'qtyOnSalesOrder': ['', Validators.required],\n        'qtyOnPO': ['', Validators.required],\n        'qtyReserved': ['', Validators.required],\n        'invitemAvgCost': ['', Validators.required],\n        'itemLastPOCost': ['', Validators.required],\n        'itemLandedCost': ['', Validators.required],\n        'minQty': ['', Validators.required],\n        'maxQty': ['', Validators.required],\n        'eoq': ['', Validators.required]\n      });\n    }\n\n    get inventoryList() {\n      return this.form.get('inventoryList');\n    }\n    /* Item Inventory*/\n\n    /*Item BarCode*/\n\n\n    addItemBarcode() {\n      this.barcodeList.push(this.createBarcode());\n    }\n\n    AddBarcode() {\n      /*  alert('ItemInventory');*/\n      if (this.id > 0) this.form.value['id'] = this.id;\n      this.form.value['barcodeList'] = this.listOfBarcodeinventory;\n      this.apiService.post('Inventorymanagementlist/CreateBarcodeItem', this.form.value).subscribe(res => {\n        this.utilService.OkMessage();\n      }, error => {\n        console.error(error);\n        this.utilService.ShowApiErrorMessage(error);\n      });\n    }\n\n    removeItemBarcode(item) {\n      this.barcodeList.removeAt(item);\n    } //setBarcodeForm(itemvalue: any) {\n    //  this.apiService.getall(`Inventorymanagementlist/GetInventoryListByID?itemvalue=${itemvalue}`).subscribe(res => {\n    //    if (res) {\n    //      debugger;\n    //      this.barcodeList.clear();\n    //      let barcodeList = res['barcodeList'] as Array<any>;\n    //      barcodeList.forEach(item => {\n    //        this.editBarcode(item);\n    //      });\n    //    }\n    //  })\n    //}\n\n\n    editBarcode(res) {\n      this.barcodeList.push(this.createBarcode(res));\n    }\n\n    createBarcode(res) {\n      if (res) {\n        return this.fb.group(res);\n      }\n\n      return this.fb.group({\n        'itemBarcode': ['', Validators.required],\n        'itemUOM': ['', Validators.required]\n      });\n    }\n\n    get barcodeList() {\n      return this.form.get('barcodeList');\n    }\n\n    setBarcodeForm(itemvalue) {\n      this.apiService.getall(`Inventorymanagementlist/GetBarcodeListByID?itemvalue=${itemvalue}`).subscribe(res => {\n        if (res) {\n          //this.barcodeList.clear();\n          //let barcodeList = res['barCodeList'] as Array<any>;\n          //barcodeList.forEach(item => {\n          //  this.editBarcode(item);\n          //});\n          let listOfBarcodeinventory = res['barCodeList'];\n          listOfBarcodeinventory.forEach(item => {\n            //this.editInvoiceItem(item);\n            this.listOfBarcodeinventory.push({\n              sequence: this.getSequence(),\n              tranNumber: \"0\",\n              itemBarUOM: item.itemBarUOM,\n              itemBarcode: item.itemBarcode\n            });\n          });\n        }\n      });\n    }\n\n    onBarcodechange(Value) {\n      if (Value != null) {\n        this.apiService.getall(`Inventorymanagementlist/GetBarcode?Barcode=${Value}`).subscribe(res => {\n          if (res) {\n            this.notifyService.showError('Duplicate Barcode...');\n          }\n        });\n      }\n    }\n    /* Item BarCode*/\n\n    /*Item Notes*/\n\n\n    addItemNotes() {\n      this.notesList.push(this.createNotes());\n    }\n\n    AddNotes() {\n      //alert('ItemInventory');\n      if (this.id > 0) this.form.value['id'] = this.id;\n      this.form.value['notesList'] = this.listOfNotesinventory;\n      this.apiService.post('Inventorymanagementlist/CreateNotesItem', this.form.value).subscribe(res => {\n        this.utilService.OkMessage();\n      }, error => {\n        console.error(error);\n        this.utilService.ShowApiErrorMessage(error);\n      });\n    }\n\n    removeItemNotes(item) {\n      this.notesList.removeAt(item);\n    } //setNotesForm(itemvalue: any) {\n    //  this.apiService.getall(`Inventorymanagementlist/GetInventoryListByID?itemvalue=${itemvalue}`).subscribe(res => {\n    //    if (res) {\n    //      debugger;\n    //      this.notesList.clear();\n    //      let notesList = res['notesList'] as Array<any>;\n    //      notesList.forEach(item => {\n    //        this.editNotes(item);\n    //      });\n    //    }\n    //  })\n    //}\n\n\n    editNotes(res) {\n      this.notesList.push(this.createNotes(res));\n    }\n\n    createNotes(res) {\n      if (res) {\n        return this.fb.group(res);\n      }\n\n      return this.fb.group({\n        'noteDates': ['', Validators.required],\n        'name': ['', Validators.required],\n        'notes': ['', Validators.required]\n      });\n    }\n\n    get notesList() {\n      return this.form.get('notesList');\n    }\n    /* Item BarCode*/\n\n    /*Item History*/\n\n\n    addItemHistory() {\n      this.historyList.push(this.createHistory());\n    }\n\n    AddHistory() {\n      //alert('ItemInventory');\n      if (this.id > 0) this.form.value['id'] = this.id;\n      this.apiService.post('Inventorymanagementlist/CreateItemHistory', this.form.value).subscribe(res => {\n        this.utilService.OkMessage();\n      }, error => {\n        console.error(error);\n        this.utilService.ShowApiErrorMessage(error);\n      });\n    }\n\n    removeItemHistory(item) {\n      this.historyList.removeAt(item);\n    }\n\n    editHistory(res) {\n      this.historyList.push(this.createHistory(res));\n    }\n\n    createHistory(res) {\n      if (res) {\n        return this.fb.group(res);\n      }\n\n      return this.fb.group({\n        'whCode': ['', Validators.required],\n        'tranDate': ['', Validators.required],\n        'tranType': ['', Validators.required],\n        'tranNumber': ['', Validators.required],\n        'tranUnit': ['', Validators.required],\n        'tranQty': ['', Validators.required],\n        'unitConvFactor': ['', Validators.required],\n        'tranTotQty': ['', Validators.required],\n        'tranPrice': ['', Validators.required],\n        'itemAvgCost': ['', Validators.required],\n        'tranRemarks': ['', Validators.required]\n      });\n    }\n\n    get historyList() {\n      return this.form.get('historyList');\n    }\n    /* Item History*/\n\n\n    getData() {\n      let data = [{\n        \"ItemCode\": \"0110101\",\n        \"h_code\": \"012121011\",\n        \"shortname\": \"shortname \",\n        \"itemdescription\": \"Appearls \",\n        \"category\": \"Appearls \",\n        \"itemavgcost\": \"$1200 \",\n        \"itemstandardcost\": \"$1400 \",\n        \"id\": 1\n      }, {\n        \"ItemCode\": \"0110101\",\n        \"h_code\": \"012121011\",\n        \"shortname\": \"shortname \",\n        \"itemdescription\": \"Appearls \",\n        \"category\": \"Appearls \",\n        \"itemavgcost\": \"$1200 \",\n        \"itemstandardcost\": \"$1400 \",\n        \"id\": 2\n      }];\n      return data;\n    }\n    /*  Inventory Table*/\n\n\n    onSortOrder(sort) {\n      this.sortingOrder = sort.active + ' ' + sort.direction;\n      this.totalItemsCount = 0;\n      this.loadList(0, this.pageService.pageCount, \"\", this.sortingOrder);\n    }\n\n    onPageSwitch(event) {\n      this.pageService.change(event);\n      this.loadList(event.pageIndex, event.pageSize, \"\", this.sortingOrder);\n    }\n\n    loadList(page, pageCount, query, orderBy) {\n      this.isLoading = true;\n      this.apiService.getPagination('Inventorymanagementlist', this.utilService.getQueryString(page, pageCount, query, orderBy)).subscribe(result => {\n        this.totalItemsCount = 0;\n        this.data = new MatTableDataSource(result.items);\n        this.totalItemsCount = result.totalCount;\n        setTimeout(() => {\n          this.paginator.pageIndex = page;\n          this.paginator.length = this.totalItemsCount;\n        });\n        this.data.sort = this.sort; //console.log(this.data.sort)\n        //console.log(this.data.paginator)\n\n        this.isLoading = false;\n      }, error => this.utilService.ShowApiErrorMessage(error));\n    }\n\n    applyFilter(searchVal) {\n      const search = searchVal; //.target.value as string;\n      //if (search && search.length >= 3) {\n\n      if (search) {\n        this.searchValue = search;\n        this.loadList(0, this.pageService.pageCount, this.searchValue, this.sortingOrder);\n      }\n    }\n\n    getSequence() {\n      return this.sequence += this.sequence + 1;\n    }\n\n    //public edit(id: number) {\n    //  /*this.openDialogManage(id, DBOperation.update, 'Updating Warehouse', 'Update');*/\n    //  this.apiService.get('Inventorymanagementlist', id).subscribe(res => {\n    //    if (res) {\n    //      this.isReadOnly = true;\n    //     /* this.loadSubCategoryCode();*/\n    //      this.onSubCategory(res.itemCat)\n    //      this.ontype(res.itemType)\n    //      this.form.patchValue({\n    //        ItemInventoryCodes: res.itemCode,\n    //        ItemUOMCodes: res.itemCode,\n    //        ItemBarcodeCodes: res.itemCode,\n    //        ItemNotesCodes: res.itemCode,\n    //        ItemHistoryCodes: res.itemCode\n    //      });\n    //      this.form.patchValue(res);\n    //      //this.loadinventoryHistory(res.itemCode);\n    //      //this.inventoryList.clear();\n    //      //let inventoryList = res['inventoryList'] as Array<any>;\n    //      //inventoryList.forEach(item => {\n    //      //  this.editInventory(item);\n    //      //});\n    //      /*this.listOfInvoices.clear();*/\n    //      let listOfinventory = res['inventoryList'] as Array<any>;\n    //      listOfinventory.forEach(item => {\n    //        //this.editInvoiceItem(item);\n    //        this.listOfinventory.push({\n    //          sequence: this.getSequence(),\n    //          tranNumber: \"0\", whCode: item.whCode, qtyOH: item.qtyOH, qtyOnSalesOrder: item.qtyOnSalesOrder, qtyOnPO: item.qtyOnPO, qtyReserved: item.qtyReserved,\n    //          invitemAvgCost: item.invItemAvgCost, itemLastPOCost: item.itemLastPOCost, itemLandedCost: item.itemLandedCost, minQty: item.minQty, maxQty: item.maxQty, eoq: item.eoq\n    //        });\n    //      });\n    //      //this.authList.clear();\n    //      //let authList = res['authList'] as Array<any>;\n    //      //authList.forEach(item => {\n    //      //  this.editItem(item);\n    //      //});\n    //      let listOfUOMinventory = res['authList'] as Array<any>;\n    //      listOfUOMinventory.forEach(item => {\n    //        //this.editInvoiceItem(item);\n    //        this.listOfUOMinventory.push({\n    //          sequence: this.getSequence(),\n    //          tranNumber: \"0\",\n    //          itemUOM : item.itemUOM,\n    //          itemConvFactor : item.itemConvFactor,\n    //          itemUOMPrice1 : item.itemUOMPrice1,\n    //          itemUOMPrice2 : item.itemUOMPrice2,\n    //          itemUOMPrice3 : item.itemUOMPrice3,\n    //          itemUOMDiscPer : item.itemUOMDiscPer,\n    //          itemUOMPrice4 : item.itemUOMPrice4,\n    //          itemUomAvgCost : item.itemUomAvgCost,\n    //          itemUomLastPOCost : item.itemUomLastPOCost,\n    //          itemUomLandedCost : item.itemUomLandedCost\n    //        });\n    //      });\n    //      //this.barcodeList.clear();\n    //      //let barcodeList = res['barcodeList'] as Array<any>;\n    //      //barcodeList.forEach(item => {\n    //      //  this.editBarcode(item);\n    //      //});\n    //      let listOfBarcodeinventory = res['barcodeList'] as Array<any>;\n    //      listOfBarcodeinventory.forEach(item => {\n    //        //this.editInvoiceItem(item);\n    //        this.listOfBarcodeinventory.push({\n    //          sequence: this.getSequence(),\n    //          tranNumber: \"0\",\n    //          itemBarUOM: item.itemBarUOM,\n    //          itemBarcode: item.itemBarcode\n    //        });\n    //      });\n    //      //this.notesList.clear();\n    //      //let notesList = res['notesList'] as Array<any>;\n    //      //notesList.forEach(item => {\n    //      //  this.editNotes(item);\n    //      //});\n    //      let listOfNotesinventory = res['notesList'] as Array<any>;\n    //      listOfNotesinventory.forEach(item => {\n    //        //this.editInvoiceItem(item);\n    //        this.listOfNotesinventory.push({\n    //          sequence: this.getSequence(),\n    //          tranNumber: \"0\",\n    //          noteDates: item.noteDates,\n    //          name: item.name,\n    //          notes: item.notes\n    //        });\n    //      });\n    //      //this.historyList.clear();\n    //      //let historyList = res['historyList'] as Array<any>;\n    //      //historyList.forEach(item => {\n    //      //  this.editHistory(item);\n    //      //});\n    //      let listOfInvoices = res['historyList'] as Array<any>;\n    //      listOfInvoices.forEach(item => {\n    //        //this.editInvoiceItem(item);\n    //        this.listOfInvoices.push({\n    //          itemCode: item.itemCode, wHCode: item.whCode, tranDate: item.tranDate, tranNumber: item.tranNumber, tranUnit: item.tranUnit, tranQty: item.tranQty,\n    //          unitConvFactor: item.unitConvFactor, tranTotQty: item.tranTotQty, tranPrice: item.tranPrice, itemAvgCost: item.itemAvgCost, tranRemarks: item.tranRemarks\n    //        });\n    //      });\n    //      //this.listOfInvoices = [];\n    //      //let listOfInvoices = res['historyList'] as Array<any>;\n    //      //listOfInvoices.forEach(item => {\n    //      //  this.editHistory(item);\n    //      //});\n    //      this.id = res.id;\n    //    }\n    //  })\n    //}\n    delete(id) {\n      const dialogRef = this.utilService.openDeleteConfirmDialog(this.dialog, DeleteConfirmDialogComponent);\n      dialogRef.afterClosed().subscribe(canDelete => {\n        if (canDelete && id > 0) {\n          this.apiService.delete('Inventorymanagementlist', id).subscribe(res => {\n            this.refresh();\n            this.utilService.OkMessage();\n          });\n        }\n      }, error => this.utilService.ShowApiErrorMessage(error));\n    }\n\n    refresh() {\n      this.searchValue = '';\n      this.initialLoading();\n    }\n\n    closeModel() {\n      /* this.refresh();*/\n      this.ngOnInit();\n      this.listOfNotesinventory = [];\n      this.listOfBarcodeinventory = [];\n      this.listOfUOMinventory = [];\n      this.listOfInvoices = [];\n    }\n\n    onTextchange(Value) {\n      if (Value != null) {\n        this.apiService.getall(`Inventorymanagementlist/GetInventoryItems?ItemCode=${Value}`).subscribe(res => {\n          if (res) {\n            this.isReadOnly = true;\n            this.onSubCategory(res.itemCat);\n            this.form.patchValue({\n              ItemInventoryCodes: res.itemCode,\n              ItemUOMCodes: res.itemCode,\n              ItemBarcodeCodes: res.itemCode,\n              ItemNotesCodes: res.itemCode,\n              ItemHistoryCodes: res.itemCode\n            });\n            this.form.patchValue(res);\n            this.inventoryList.clear();\n            let inventoryList = res['inventoryList'];\n            inventoryList.forEach(item => {\n              this.editInventory(item);\n            });\n            this.authList.clear();\n            let authList = res['authList'];\n            authList.forEach(item => {\n              this.editItem(item);\n            });\n            this.barcodeList.clear();\n            let barcodeList = res['barcodeList'];\n            barcodeList.forEach(item => {\n              this.editBarcode(item);\n            });\n            this.notesList.clear();\n            let notesList = res['notesList'];\n            notesList.forEach(item => {\n              this.editNotes(item);\n            });\n            this.historyList.clear();\n            let historyList = res['historyList'];\n            historyList.forEach(item => {\n              this.editHistory(item);\n            });\n            this.id = res.id;\n          }\n        });\n      }\n    }\n\n    Close() {\n      this.refresh();\n    }\n\n    ErrorMessage() {\n      this.notifyService.showError(this.isArabic() ? 'املأ جميع الحقول' : 'Cannot Delete The  Item ');\n    }\n\n    ErrorMesg() {\n      this.notifyService.showError(this.isArabic() ? 'املأ جميع الحقول' : 'Duplicate Item ');\n    }\n\n    isArabic() {\n      return this.selectedLanguage() == 'ar';\n    }\n\n    selectedLanguage() {\n      var _a;\n\n      return (_a = localStorage.getItem('language')) !== null && _a !== void 0 ? _a : 'en-US';\n    }\n\n    deleteInventoryItem(item) {\n      if (item.qtyOH > 0) {\n        this.ErrorMessage();\n      } else this.removeInventoryList(item.sequence);\n    }\n\n    removeInventoryList(sequence) {\n      let index = this.listOfinventory.findIndex(a => a.sequence === sequence);\n      this.listOfinventory.splice(index, 1);\n    }\n\n    editInventoryItem(item) {\n      this.editsequence = item.sequence, this.whCode = item.whCode, this.qtyOH = item.qtyOH, this.qtyOnSalesOrder = item.qtyOnSalesOrder, this.qtyOnPO = item.qtyOnPO, this.qtyReserved = item.qtyReserved, this.invitemAvgCost = item.invitemAvgCost, this.itemLastPOCost = item.itemLastPOCost, this.itemLandedCost = item.itemLandedCost, this.minQty = item.minQty, this.maxQty = item.maxQty, this.eoq = item.eoq;\n    }\n\n    additem_inv() {\n      if (this.editsequence > 0) {\n        this.removeInventoryList(this.editsequence);\n        this.editsequence = 0;\n      }\n\n      this.listOfinventory.push({\n        sequence: this.getSequence(),\n        tranNumber: \"0\",\n        whCode: this.whCode,\n        qtyOH: this.qtyOH,\n        qtyOnSalesOrder: this.qtyOnSalesOrder,\n        qtyOnPO: this.qtyOnPO,\n        qtyReserved: this.qtyReserved,\n        invitemAvgCost: this.invitemAvgCost,\n        itemLastPOCost: this.itemLastPOCost,\n        itemLandedCost: this.itemLandedCost,\n        minQty: this.minQty,\n        maxQty: this.maxQty,\n        eoq: this.eoq\n      });\n      this.setToDefault();\n    }\n\n    setToDefault() {\n      this.whCode = '', this.qtyOH = 0, this.qtyOnSalesOrder = 0, this.qtyOnPO = 0, this.qtyReserved = 0, this.invitemAvgCost = 0, this.itemLastPOCost = 0, this.itemLandedCost = 0, this.minQty = 0, this.maxQty = 0, this.eoq = 0;\n    }\n\n    deleteInventoryUOMItem(item) {\n      this.removeInventoryUOMList(item.sequence);\n    }\n\n    removeInventoryUOMList(sequence) {\n      let index = this.listOfUOMinventory.findIndex(a => a.sequence === sequence);\n      this.listOfUOMinventory.splice(index, 1);\n    }\n\n    editInventoryUOMItem(item) {\n      this.editInventoryUOMItemsequence = item.sequence, this.itemUOM = item.itemUOM, this.itemConvFactor = item.itemConvFactor, this.itemUOMPrice1 = item.itemUOMPrice1, this.itemUOMPrice2 = item.itemUOMPrice2, this.itemUOMPrice3 = item.itemUOMPrice3, this.itemUOMDiscPer = item.itemUOMDiscPer, this.itemUOMPrice4 = item.itemUOMPrice4, this.itemUomAvgCost = item.itemUomAvgCost, this.itemUomLastPOCost = item.itemUomLastPOCost, this.itemUomLandedCost = item.itemUomLandedCost;\n    }\n\n    additem_invUOM() {\n      if (this.editInventoryUOMItemsequence > 0) {\n        this.removeInventoryUOMList(this.editInventoryUOMItemsequence);\n        this.editInventoryUOMItemsequence = 0;\n      } //if (this.listOfUOMinventory[0].itemUOM = this.itemUOM) {\n      //  this.ErrorMessage();\n      //  return;\n      //}\n\n\n      for (let i = 0; i < this.listOfUOMinventory.length; i++) {\n        if (this.listOfUOMinventory[i].itemUOM == this.itemUOM) {\n          this.ErrorMesg();\n          return;\n        }\n      }\n\n      this.listOfUOMinventory.push({\n        sequence: this.getSequence(),\n        tranNumber: \"0\",\n        itemUOM: this.itemUOM,\n        itemConvFactor: this.itemConvFactor,\n        itemUOMPrice1: this.itemUOMPrice1,\n        itemUOMPrice2: this.itemUOMPrice2,\n        itemUOMPrice3: this.itemUOMPrice3,\n        itemUOMDiscPer: this.itemUOMDiscPer,\n        itemUOMPrice4: this.itemUOMPrice4,\n        itemUomAvgCost: this.itemUomAvgCost,\n        itemUomLastPOCost: this.itemUomLastPOCost,\n        itemUomLandedCost: this.itemUomLandedCost\n      });\n      this.setToDefaultUOM();\n    }\n\n    setToDefaultUOM() {\n      this.itemUOM = '', this.itemConvFactor = 0, this.itemUOMPrice1 = 0, this.itemUOMPrice2 = 0, this.itemUOMPrice3 = 0, this.itemUOMDiscPer = 0, this.itemUOMPrice4 = 0, this.itemUomAvgCost = 0, this.itemUomLastPOCost = 0, this.itemUomLandedCost = 0;\n    }\n\n    deleteInventoryBarcodeItem(item) {\n      this.removeInventoryBarcodeList(item.sequence);\n    }\n\n    removeInventoryBarcodeList(sequence) {\n      let index = this.listOfBarcodeinventory.findIndex(a => a.sequence === sequence);\n      this.listOfBarcodeinventory.splice(index, 1);\n    }\n\n    editInventoryBarcodeItem(item) {\n      this.editBarcodesequence = item.sequence, this.itemBarUOM = item.itemBarUOM, this.itemBarcode = item.itemBarcode;\n    }\n\n    additem_invBarcode() {\n      if (this.editBarcodesequence > 0) {\n        this.removeInventoryBarcodeList(this.editBarcodesequence);\n        this.editBarcodesequence = 0;\n      }\n\n      this.listOfBarcodeinventory.push({\n        sequence: this.getSequence(),\n        tranNumber: \"0\",\n        itemBarUOM: this.itemBarUOM,\n        itemBarcode: this.itemBarcode\n      });\n      this.setToDefaultBarcode();\n    }\n\n    setToDefaultBarcode() {\n      this.itemBarUOM = '', this.itemBarcode = '';\n    }\n\n    deleteInventoryNotesItem(item) {\n      this.removeInventoryNotesList(item.sequence);\n    }\n\n    removeInventoryNotesList(sequence) {\n      let index = this.listOfNotesinventory.findIndex(a => a.sequence === sequence);\n      this.listOfNotesinventory.splice(index, 1);\n    }\n\n    editInventoryNotesItem(item) {\n      this.editsequence = item.sequence, this.noteDates = item.noteDates, this.name = item.name, this.notes = item.notes;\n    }\n\n    additem_invNotes() {\n      if (this.editsequence > 0) {\n        this.deleteInventoryNotesItem(this.editsequence);\n        this.editsequence = 0;\n      }\n\n      this.listOfNotesinventory.push({\n        sequence: this.getSequence(),\n        tranNumber: \"0\",\n        noteDates: this.noteDates,\n        name: this.name,\n        notes: this.notes\n      });\n      this.setToDefaultNotes();\n    }\n\n    setToDefaultNotes() {\n      this.noteDates = '', this.name = '';\n      this.notes = '';\n    }\n\n    create() {\n      this.openDialogManage(0, DBOperation.create, this.translate.instant('Create_New_Issues'), '', AddupdateinventorymanagementlistComponent);\n    }\n\n    edit(id) {\n      this.openDialogManage(id, DBOperation.update, this.translate.instant('Create_New_Issues'), '', AddupdateinventorymanagementlistComponent);\n    }\n\n    view(id) {\n      this.openDialogManage(id, DBOperation.update, this.translate.instant('Create_New_Issues'), '', AddupdateinventorymanagementlistComponent);\n    }\n\n    openApprovalDialog(branchCode, serviceCode, dbops, modalTitle, modalBtnTitle, serviceType, Component) {\n      let dialogRef = this.openApprovalDialog1(this.dialog, Component);\n      dialogRef.componentInstance.dbops = dbops;\n      dialogRef.componentInstance.modalTitle = modalTitle;\n      dialogRef.componentInstance.modalBtnTitle = modalBtnTitle;\n      dialogRef.componentInstance.serviceType = serviceType;\n      dialogRef.componentInstance.serviceCode = serviceCode;\n      dialogRef.componentInstance.branchCode = branchCode;\n      dialogRef.afterClosed().subscribe(res => {\n        if (res && res === true) this.initialLoading();\n      });\n    }\n\n    openApprovalDialog1(dialog, component) {\n      const dialogRef = dialog.open(component, {\n        disableClose: true\n      });\n      return dialogRef;\n    }\n\n    openDialogManage(id = 0, dbops, modalTitle = '', modalBtnTitle = '', component, moduleFile = {\n      module: '00',\n      action: '00act'\n    }, width = 100) {\n      let dialogRef = this.utilService.openDialogCongif(this.dialog, component, width);\n      dialogRef.componentInstance.dbops = dbops;\n      dialogRef.componentInstance.modalTitle = modalTitle;\n      dialogRef.componentInstance.id = id;\n      dialogRef.componentInstance.moduleFile = moduleFile;\n      dialogRef.afterClosed().subscribe(res => {\n        if (res && res === true) this.initialLoading();\n      });\n    }\n\n  }\n\n  InventorymanagementlistComponent.ɵfac = function InventorymanagementlistComponent_Factory(t) {\n    return new (t || InventorymanagementlistComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.ApiService), i0.ɵɵdirectiveInject(i5.AuthorizeService), i0.ɵɵdirectiveInject(i6.UtilityService), i0.ɵɵdirectiveInject(i7.NotificationService), i0.ɵɵdirectiveInject(i8.ValidationService), i0.ɵɵdirectiveInject(i9.PaginationService), i0.ɵɵdirectiveInject(i10.MatDialog), i0.ɵɵdirectiveInject(i11.TranslateService));\n  };\n\n  InventorymanagementlistComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: InventorymanagementlistComponent,\n    selectors: [[\"app-inventorymanagementlist\"]],\n    viewQuery: function InventorymanagementlistComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatPaginator, 7);\n        i0.ɵɵviewQuery(MatSort, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 74,\n    vars: 26,\n    consts: [[1, \"page-breadcrumb\"], [1, \"row\"], [1, \"col-12\", \"align-self-center\"], [1, \"page-title\", \"text-truncate\", \"text-dark\", \"font-weight-medium\", \"mb-1\"], [1, \"d-flex\", \"align-items-center\"], [\"aria-label\", \"breadcrumb\"], [1, \"breadcrumb\", \"m-0\", \"p-0\"], [1, \"breadcrumb-item\", \"text-muted\"], [\"aria-current\", \"page\", 1, \"breadcrumb-item\", \"active\"], [1, \"container-fluid\"], [1, \"col-md-12\", \"col-lg-12\"], [1, \"card\"], [1, \"card-body\"], [1, \"row\", \"pb-3\"], [1, \"col-md-3\"], [1, \"custom-select\", \"mr-sm-2\"], [\"value\", \"\"], [\"value\", \"TransLocK\"], [\"value\", \"TransPost\"], [\"value\", \"TransVoid\"], [1, \"col-md-7\", \"col-lg-9\"], [1, \"card-title\", \"pt6\"], [1, \"col-md-3\", \"col-lg-3\", \"text-right\"], [\"data-toggle\", \"modal\", \"data-target\", \"#scrollable-modal\", \"href\", \"#\", 1, \"btn\", \"waves-effect\", \"waves-light\", \"btn-rounded\", \"btn-outline-primary\", 3, \"click\"], [1, \"icon-plus\"], [1, \"cardtitle-divider\"], [1, \"table-responsive\"], [3, \"isLoading\"], [\"mat-table\", \"\", \"matSort\", \"\", \"matSortActive\", \"Id\", \"matSortDisableClear\", \"\", \"matSortDirection\", \"desc\", 1, \"table\", \"table-bordered\", \"no-wrap\", 3, \"dataSource\", \"matSortChange\"], [\"matColumnDef\", \"ItemCode\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"h_code\"], [\"matColumnDef\", \"shortname\"], [\"matColumnDef\", \"itemdescription\"], [\"matColumnDef\", \"category\"], [\"matColumnDef\", \"itemavgcost\"], [\"matColumnDef\", \"itemstandardcost\"], [\"matColumnDef\", \"Actions\", \"stickyEnd\", \"\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", \"class\", \"text-center\", 4, \"matCellDef\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\", \"matHeaderRowDefSticky\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [3, \"length\", \"pageSize\", \"pageSizeOptions\", \"page\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\", 1, \"text-center\"], [\"data-toggle\", \"modal\", \"data-target\", \"#scrollable-modal\", 1, \"tableicons\", 3, \"click\"], [1, \"icon-note\"], [1, \"tableicons\", 3, \"click\"], [1, \"icon-trash\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"]],\n    template: function InventorymanagementlistComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"h3\", 3);\n        i0.ɵɵtext(4);\n        i0.ɵɵpipe(5, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵelementStart(7, \"nav\", 5);\n        i0.ɵɵelementStart(8, \"ol\", 6);\n        i0.ɵɵelementStart(9, \"li\", 7);\n        i0.ɵɵtext(10);\n        i0.ɵɵpipe(11, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"li\", 8);\n        i0.ɵɵtext(13);\n        i0.ɵɵpipe(14, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 9);\n        i0.ɵɵelementStart(16, \"div\", 1);\n        i0.ɵɵelementStart(17, \"div\", 10);\n        i0.ɵɵelementStart(18, \"div\", 11);\n        i0.ɵɵelementStart(19, \"div\", 12);\n        i0.ɵɵelementStart(20, \"div\", 13);\n        i0.ɵɵelementStart(21, \"div\", 14);\n        i0.ɵɵelementStart(22, \"select\", 15);\n        i0.ɵɵelementStart(23, \"option\", 16);\n        i0.ɵɵtext(24);\n        i0.ɵɵpipe(25, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"option\", 17);\n        i0.ɵɵtext(27, \"Trans LocK\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"option\", 18);\n        i0.ɵɵtext(29, \"Trans Post\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"option\", 19);\n        i0.ɵɵtext(31, \"Trans Void\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"div\", 1);\n        i0.ɵɵelementStart(33, \"div\", 20);\n        i0.ɵɵelementStart(34, \"h4\", 21);\n        i0.ɵɵtext(35);\n        i0.ɵɵpipe(36, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"div\", 22);\n        i0.ɵɵelementStart(38, \"a\", 23);\n        i0.ɵɵlistener(\"click\", function InventorymanagementlistComponent_Template_a_click_38_listener() {\n          return ctx.create();\n        });\n        i0.ɵɵelement(39, \"i\", 24);\n        i0.ɵɵtext(40);\n        i0.ɵɵpipe(41, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(42, \"div\", 25);\n        i0.ɵɵelementStart(43, \"div\", 26);\n        i0.ɵɵelement(44, \"spinner-loader\", 27);\n        i0.ɵɵelementStart(45, \"table\", 28);\n        i0.ɵɵlistener(\"matSortChange\", function InventorymanagementlistComponent_Template_table_matSortChange_45_listener($event) {\n          return ctx.onSortOrder($event);\n        });\n        i0.ɵɵelementContainerStart(46, 29);\n        i0.ɵɵtemplate(47, InventorymanagementlistComponent_th_47_Template, 3, 3, \"th\", 30);\n        i0.ɵɵtemplate(48, InventorymanagementlistComponent_td_48_Template, 2, 1, \"td\", 31);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(49, 32);\n        i0.ɵɵtemplate(50, InventorymanagementlistComponent_th_50_Template, 3, 3, \"th\", 30);\n        i0.ɵɵtemplate(51, InventorymanagementlistComponent_td_51_Template, 2, 1, \"td\", 31);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(52, 33);\n        i0.ɵɵtemplate(53, InventorymanagementlistComponent_th_53_Template, 3, 3, \"th\", 30);\n        i0.ɵɵtemplate(54, InventorymanagementlistComponent_td_54_Template, 2, 1, \"td\", 31);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(55, 34);\n        i0.ɵɵtemplate(56, InventorymanagementlistComponent_th_56_Template, 3, 3, \"th\", 30);\n        i0.ɵɵtemplate(57, InventorymanagementlistComponent_td_57_Template, 2, 1, \"td\", 31);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(58, 35);\n        i0.ɵɵtemplate(59, InventorymanagementlistComponent_th_59_Template, 3, 3, \"th\", 30);\n        i0.ɵɵtemplate(60, InventorymanagementlistComponent_td_60_Template, 2, 1, \"td\", 31);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(61, 36);\n        i0.ɵɵtemplate(62, InventorymanagementlistComponent_th_62_Template, 3, 3, \"th\", 30);\n        i0.ɵɵtemplate(63, InventorymanagementlistComponent_td_63_Template, 2, 1, \"td\", 31);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(64, 37);\n        i0.ɵɵtemplate(65, InventorymanagementlistComponent_th_65_Template, 3, 3, \"th\", 30);\n        i0.ɵɵtemplate(66, InventorymanagementlistComponent_td_66_Template, 2, 1, \"td\", 31);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(67, 38);\n        i0.ɵɵtemplate(68, InventorymanagementlistComponent_th_68_Template, 1, 0, \"th\", 39);\n        i0.ɵɵtemplate(69, InventorymanagementlistComponent_td_69_Template, 6, 0, \"td\", 40);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵtemplate(70, InventorymanagementlistComponent_tr_70_Template, 1, 0, \"tr\", 41);\n        i0.ɵɵtemplate(71, InventorymanagementlistComponent_tr_71_Template, 1, 0, \"tr\", 42);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementContainerStart(72);\n        i0.ɵɵelementStart(73, \"mat-paginator\", 43);\n        i0.ɵɵlistener(\"page\", function InventorymanagementlistComponent_Template_mat_paginator_page_73_listener($event) {\n          return ctx.onPageSwitch($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(5, 14, \"Inventory_Management_List\"), \" \");\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(11, 16, \"Inventory_Management\"), \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(14, 18, \"Inventory_Management_List\"), \" \");\n        i0.ɵɵadvance(11);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(25, 20, \"Inventory_Management_List\"));\n        i0.ɵɵadvance(11);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(36, 22, \"Inventory_Management_List\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(41, 24, \"Add_New_Inventory\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"isLoading\", ctx.isLoading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"dataSource\", ctx.data);\n        i0.ɵɵadvance(25);\n        i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns)(\"matHeaderRowDefSticky\", true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"length\", ctx.totalItemsCount)(\"pageSize\", ctx.pageService.pageCount)(\"pageSizeOptions\", ctx.pageService.selectItemsPerPage);\n      }\n    },\n    directives: [i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i12.SpinnerLoaderComponent, i13.MatTable, i14.MatSort, i13.MatColumnDef, i13.MatHeaderCellDef, i13.MatCellDef, i13.MatHeaderRowDef, i13.MatRowDef, i15.MatPaginator, i13.MatHeaderCell, i14.MatSortHeader, i13.MatCell, i13.MatHeaderRow, i13.MatRow],\n    pipes: [i11.TranslatePipe],\n    encapsulation: 2\n  });\n  return InventorymanagementlistComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}