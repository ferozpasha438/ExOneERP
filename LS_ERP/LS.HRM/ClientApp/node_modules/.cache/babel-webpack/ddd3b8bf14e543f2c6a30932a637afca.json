{"ast":null,"code":"import { FormArray, FormControl, Validators } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged, map, startWith, switchMap } from 'rxjs/operators';\nimport { ParentOptMgtComponent } from '../../sharedcomponent/parentoptmgt.component';\nimport * as moment from \"moment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../services/api.service\";\nimport * as i5 from \"../../api-authorization/AuthorizeService\";\nimport * as i6 from \"../../services/utility.service\";\nimport * as i7 from \"@ngx-translate/core\";\nimport * as i8 from \"../../services/notification.service\";\nimport * as i9 from \"../../sharedcomponent/ValidationService\";\nimport * as i10 from \"../../sharedcomponent/autoloader.component\";\nimport * as i11 from \"@angular/material/autocomplete\";\nimport * as i12 from \"@angular/common\";\nimport * as i13 from \"../../sharedcomponent/ValidationMessagesComponent\";\nimport * as i14 from \"@angular/material/datepicker\";\nimport * as i15 from \"@angular/material/form-field\";\nimport * as i16 from \"@angular/material/core\";\nimport * as i17 from \"@angular/material/tooltip\";\n\nfunction AttendanceFromMonthlyRoasterComponent_mat_option_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 28);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r5.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", option_r5.value, \"-\", option_r5.text, \" \");\n  }\n}\n\nfunction AttendanceFromMonthlyRoasterComponent_option_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 28);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const cty_r6 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"value\", cty_r6.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 2, cty_r6.value));\n  }\n}\n\nfunction AttendanceFromMonthlyRoasterComponent_div_49_tr_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\", 32);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const rst_r8 = ctx.$implicit;\n    const k_r9 = ctx.index;\n    const d_r10 = ctx.day;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", rst_r8.employeeNumber, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", ctx_r7.getCellInfo(k_r9, d_r10));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r7.getDay(rst_r8), \" \");\n  }\n}\n\nfunction AttendanceFromMonthlyRoasterComponent_div_49_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29);\n    i0.ɵɵelementStart(1, \"table\", 30);\n    i0.ɵɵelementStart(2, \"thead\");\n    i0.ɵɵelementStart(3, \"tr\");\n    i0.ɵɵelementStart(4, \"th\");\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"tbody\");\n    i0.ɵɵtemplate(10, AttendanceFromMonthlyRoasterComponent_div_49_tr_10_Template, 5, 3, \"tr\", 31);\n    i0.ɵɵelementStart(11, \"tr\");\n    i0.ɵɵelementStart(12, \"th\");\n    i0.ɵɵtext(13);\n    i0.ɵɵpipe(14, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"td\");\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(6, 5, \"Employee\"), \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.form.controls[\"monthYear\"].value.toDateString(), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.listOfRoasters);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(14, 7, \"Total_Shifts\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.totalShiftsCol[ctx_r4.day], \" \");\n  }\n}\n\nexport let AttendanceFromMonthlyRoasterComponent = /*#__PURE__*/(() => {\n  class AttendanceFromMonthlyRoasterComponent extends ParentOptMgtComponent {\n    //filterEmployeeNumbers(val: string): Observable<Array<CustomSelectListItem>> {\n    //  return this.apiService.getall(`Employee/getAutoFillEmployeeList?search=${val}`)\n    //    .pipe(\n    //      map(response => {\n    //        const res = response as Array<CustomSelectListItem>;\n    //        this.isDataLoading = false;\n    //        return res;\n    //      })\n    //    )\n    //}\n    constructor(fb, http, router, apiService, authService, utilService, translate, notifyService, validationService) {\n      super(authService);\n      this.fb = fb;\n      this.http = http;\n      this.router = router;\n      this.apiService = apiService;\n      this.authService = authService;\n      this.utilService = utilService;\n      this.translate = translate;\n      this.notifyService = notifyService;\n      this.validationService = validationService;\n      this.id = 0;\n      this.readonly = \"\";\n      this.isDataLoading = false;\n      this.listOfRoasters = [];\n      this.listOfDays = [];\n      this.sequence = 1;\n      this.editsequence = 0;\n      this.remarks = '';\n      this.shiftsFormControls = new FormArray([new FormControl('')]);\n      this.noOfDays = 0;\n      this.saveEnable = false;\n      this.editEnable = false;\n      this.monthYear = '';\n      this.employeeNumber = '';\n      this.employeeName = '';\n      this.s = [];\n      this.custCodeControl = new FormControl('', Validators.required);\n      this.empCodeControl = new FormControl('');\n      this.siteCodeList = [];\n      this.customerCode = '';\n      this.listOfShiftCodes = [];\n      this.employeeList = []; //monthsList: Array<CustomSelectListItem> = [];\n      //yearsList: Array<CustomSelectListItem> = [];\n\n      this.siteCode = '';\n      this.projectCode = '';\n      this.day = 0;\n      this.month = 0;\n      this.year = 0;\n      this.shiftCode = '';\n      this.totalShiftsRow = [];\n      this.totalShiftsCol = [];\n      this.grandTotalShifts = 0;\n      this.newTotalShifts = 0;\n      this.filteredCustCodes = this.custCodeControl.valueChanges.pipe(startWith(this.customerCode), debounceTime(utilService.autoDelay()), distinctUntilChanged(), switchMap(val => {\n        if (val.trim() !== '') this.isDataLoading = true;\n        return this.filterCustCodes(val || '');\n      })); //this.filteredEmployeeNumbers = this.empCodeControl.valueChanges.pipe(\n      //  startWith(this.employeeNumber),\n      //  debounceTime(utilService.autoDelay()),\n      //  distinctUntilChanged(),\n      //  switchMap((val: string) => {\n      //    if (val.trim() !== '')\n      //      this.isDataLoading = true;\n      //    return this.filterEmployeeNumbers(val || '')\n      //  })\n      //);\n    }\n\n    filterCustCodes(val) {\n      return this.apiService.getall(`CustomerMaster/getSelectCustomerList?search=${val}`).pipe(map(response => {\n        const res = response;\n        this.isDataLoading = false;\n        return res;\n      }));\n    }\n\n    loadShiftCodes() {\n      this.apiService.getall('ShiftMaster/getSelectShiftsToSiteBySiteCode/' + this.siteCode).subscribe(res => {\n        this.listOfShiftCodes = res;\n        this.findNoOfShifts();\n      });\n    } //loadEmployees() {\n    //  this.apiService.getall('Employee/getSelectEmployeeList').subscribe(res => {\n    //    this.employeeList = res;\n    //  });\n    //}\n\n\n    ngOnInit() {\n      let date = new Date(Date.now());\n      this.year = date.getFullYear();\n      this.setForm();\n      this.readonly = \"readonly\"; //this.siteCodeList = [];\n    }\n\n    setForm() {\n      this.form = this.fb.group({\n        \"customerCode\": ['', Validators.required],\n        \"monthYear\": [''],\n        \"siteCode\": ['', Validators.required],\n\n        /*   \"projectCode\": ['', Validators.required],*/\n        \"month\": [0],\n        \"year\": [this.year],\n        'employeeNumber': [''],\n        'shiftCode': ['']\n      });\n    } //submit() {\n    //  if (this.saveEnable) {\n    //    this.form.controls['customerCode'].setValue(this.customerCode);\n    //    this.form.controls['siteCode'].setValue(this.siteCode);\n    //    this.form.controls['employeeNumber'].setValue(this.employeeNumber);\n    //    this.form.value['roastersList'] = this.listOfRoasters;\n    //    this.form.value['s'] = this.s;\n    //    this.form.value['month'] = this.month;\n    //    this.form.value['year'] = this.year;\n    //    this.form.value['employeeNumber'] = this.employeeNumber;\n    //    this.form.value['employeeName'] = this.employeeName;\n    //    this.form.value['customerCode'] = this.customerCode;\n    //    this.form.value['siteCode'] = this.siteCode;\n    //    if (/*this.form.valid &&*/this.listOfRoasters.length > 0) {\n    //      if (this.id > 0)\n    //        this.form.value['id'] = this.id;\n    //      this.apiService.post('MonthlyRoaster/createUpdateMonthlyRoaster', this.form.value)\n    //        .subscribe(res => {\n    //          this.utilService.OkMessage();\n    //        },\n    //          error => {\n    //            console.log(error)\n    //            console.error(error);\n    //            this.utilService.ShowApiErrorMessage(error);\n    //          });\n    //    }\n    //    else\n    //      this.utilService.FillUpFields();\n    //  }\n    //}\n    //addEntry() {\n    //  if (this.employeeNumber != '' && this.employeeNumber != null && this.newTotalShifts != 0) {\n    //    let index = this.listOfRoasters.findIndex(s => s.employeeNumber == this.employeeNumber);\n    //    let entry: any = {\n    //      employeeNumber: this.employeeNumber,\n    //      employeeName: this.employeeName,\n    //      s: this.s.slice()\n    //    };\n    //    console.log(\"index=\" + index);\n    //    if (index != -1) {\n    //      this.removeEntry(index);\n    //      this.listOfRoasters.splice(index, 0, entry);\n    //    }\n    //    else {\n    //      this.listOfRoasters.push(entry);\n    //    }\n    //    this.findNoOfShifts();\n    //    this.saveEnable = true;\n    //    this.employeeNumber = '';\n    //    this.form.controls['employeeNumber'].setValue('');\n    //    this.empCodeControl.setValue('');\n    //    this.resetShiftsFormControls();\n    //  }\n    //}\n\n\n    removeEntry(i) {\n      this.listOfRoasters.splice(i, 1);\n      this.saveEnable = true;\n      this.findNoOfShifts();\n    }\n\n    getSequence() {\n      return this.sequence += this.sequence + 1;\n    }\n\n    downSequence() {\n      return this.sequence += this.sequence - 1;\n    }\n\n    reset() {\n      this.form.controls['employeeNumber'].setValue('');\n      this.form.controls['employeeName'].setValue('');\n    }\n\n    goBack() {\n      window.history.back();\n    }\n\n    onSelectionCustomerCode(event, op) {\n      let custCode = '';\n      custCode = op == 'change' ? event.target.value : event.option.value;\n      this.apiService.getall('CustomerMaster/getCustomerByCustomerCode/' + custCode).subscribe(res => {\n        if (res != null) {\n          this.form.patchValue({\n            'customerCode': res['custCode']\n          });\n          let custCode = this.custCodeControl.value;\n          this.form.value['customerCode'] = custCode;\n          this.customerCode = custCode;\n          this.loadSiteCodes(custCode);\n        } else {\n          this.form.controls['customerCode'].setValue('');\n          this.custCodeControl.setValue('');\n          this.customerCode = '';\n          this.siteCodeList = []; //this.projectCodeList = [];\n        }\n      });\n      this.form.controls['siteCode'].setValue('');\n      this.siteCode = '';\n      this.loadData();\n    } //autoSelectionEmployeeNumber(event: any, op: string) {\n    //  let empNumber: string = this.empCodeControl.value;\n    //  let index = -1;\n    //  this.employeeNumber = empNumber;\n    //  this.apiService.getall('Employee/getEmployeeByEmployeeNumber/' + empNumber).subscribe(res => {\n    //    if (res != null) {\n    //      this.employeeName = res['employeeName'];\n    //      this.form.value['employeeNumber'] = empNumber;\n    //      this.form.value['employeeName'] = res['employeeName'];\n    //      this.s = [];\n    //      for (var i = 1; i <= 31; i++) {\n    //        this.s.push('');\n    //      }\n    //      this.resetShiftsFormControls();\n    //      index = this.listOfRoasters.findIndex(s => s.employeeNumber == this.employeeNumber);\n    //      console.log(\"index=\" + index);\n    //      if (index >= 0)\n    //        this.editRoasterEntry(index);\n    //    }\n    //    else {\n    //      this.empCodeControl.setValue('');\n    //      this.employeeNumber = '';\n    //      this.employeeName = '';\n    //      this.resetShiftsFormControls();\n    //    }\n    //  });\n    //}\n\n\n    onSelectSiteCode(event) {\n      const siteCode = event.target.value;\n      ;\n      this.form.value['siteCode'] = siteCode;\n      this.form.controls['siteCode'].setValue(siteCode);\n      this.siteCode = siteCode;\n      this.loadData();\n    }\n\n    loadData() {\n      if (this.customerCode != '' && this.siteCode != '' && this.month != 0 && this.year != 0) {\n        let fromDate = new Date(this.year, this.month - 1, 1);\n        let toDate = new Date(this.year, this.month, 0);\n        this.listOfDays = [];\n        this.noOfDays = toDate.getDate() - fromDate.getDate() + 1;\n        this.apiService.getall(`MonthlyRoaster/getMonthlyRoaster/${this.customerCode}/${this.siteCode}/${this.month}/${this.year}`).subscribe(res => {\n          this.listOfRoasters = res;\n          this.sequence = this.listOfRoasters.length + 1;\n        });\n        this.loadWeekDays();\n        this.shiftsFormControls.clear();\n\n        for (var i = 1; i <= this.noOfDays; i++) {\n          this.shiftsFormControls.push(new FormControl(''));\n        }\n\n        this.loadShiftCodes();\n        this.listOfShiftCodes = [];\n      } else {\n        this.listOfRoasters = [];\n      }\n    }\n\n    loadWeekDays() {\n      this.form.controls['monthYear'].setValue(new Date(this.year, this.month - 1, this.day));\n\n      for (var i = 1; i <= this.noOfDays; i++) {\n        let day = new Date(this.year, this.month - 1, i);\n        let dayText = day.toDateString().substring(0, 1);\n        let DayObj = {\n          dayText: dayText,\n          dayNumber: i,\n          dayFullName: day.toDateString()\n        };\n        this.listOfDays.push(DayObj);\n      }\n    }\n\n    loadSiteCodes(custCode) {\n      this.apiService.getall(`CustomerSite/getSelectSiteListByCustCode/${custCode}`).subscribe(res => {\n        this.siteCodeList = res;\n      });\n    } //loadProjectCodes(custCode: string) {\n    //  this.apiService.getall(`Project/getSelectProjectList`).subscribe(res => {\n    //      this.projectCodeList = res;\n    //    });\n    //}\n    //onSelectShift(event: any, index: number) {\n    //  if (this.newTotalShifts != 0) {\n    //    this.s[index] = event.target.value;\n    //    this.shiftsFormControls.controls[index].setValue(event.target.value);\n    //  }\n    //  else {\n    //    for (var i = 1; i <= this.noOfDays; i++) {\n    //      this.s[i - 1] = event.target.value;\n    //      this.shiftsFormControls.controls[i - 1].setValue(event.target.value);\n    //    }\n    //  }\n    //  this.findTotalNewShifts();\n    //}\n    //resetShiftsFormControls() {\n    //  this.shiftsFormControls.clear();\n    //  for (var i = 1; i <= this.noOfDays; i++) {\n    //    this.shiftsFormControls.push(new FormControl(''));\n    //    this.s[i - 1] = '';\n    //  }\n    //  this.findTotalNewShifts();\n    //}\n\n\n    openDatePicker(dp) {\n      dp.open();\n    }\n\n    closeDatePicker(eventData, dp) {\n      let picker = moment;\n      let pickerDate = picker(eventData).format('YYYY-MM');\n      this.day = parseInt(pickerDate.toString().substring(8, 10));\n      this.month = parseInt(pickerDate.toString().substring(5, 7));\n      this.year = Number(pickerDate.toString().substring(0, 4));\n\n      if (this.customerCode != '' && this.siteCode != '') {\n        this.loadData();\n      }\n    }\n\n    findNoOfShifts() {\n      var _a;\n\n      this.totalShiftsRow = [];\n      this.totalShiftsCol = [];\n      this.grandTotalShifts = 0;\n      let offShift = (_a = this.listOfShiftCodes.find(e => e.textTwo == \"True\")) === null || _a === void 0 ? void 0 : _a.value;\n\n      for (var k = 0; k < this.noOfDays; k++) {\n        let cc = 0;\n\n        for (var i = 0; i < this.listOfRoasters.length; i++) {\n          let rc = 0;\n          let r = this.listOfRoasters[i];\n\n          for (var j = 0; j < r.s.length; j++) {\n            if (r.s[j] == offShift || r.s[j] == '' || r.s[j] == null) {} else {\n              rc++;\n              if (j == k) cc++;\n            }\n          }\n\n          this.totalShiftsRow.push(rc);\n        }\n\n        this.totalShiftsCol.push(cc);\n        this.grandTotalShifts = this.grandTotalShifts + this.totalShiftsCol[k];\n      }\n    } //findTotalNewShifts() {\n    //  let offShift = this.listOfShiftCodes.find(e => e.textTwo == \"True\").value;\n    //  let count = 0;\n    //  for (var i = 0; i < this.noOfDays; i++) {\n    //    if (this.s[i] == offShift || this.s[i] == '' || this.s[i] == null) { }\n    //    else {\n    //      count++;\n    //    }\n    //    this.newTotalShifts = count;\n    //  }\n    //}\n\n\n    RoastersCount() {\n      return this.listOfRoasters.length;\n    }\n\n    getCellInfo(r, c) {\n      return `Date:${new Date(this.year, this.month, this.day).toDateString()}\nShift: ${this.getShiftInfo(r, this.day)}`;\n    }\n\n    getShiftInfo(r, c) {\n      return `${this.listOfRoasters[r].s[c]}`;\n    } //editRoasterEntry(r: number) {\n    //  let roaster: any = this.listOfRoasters[r];\n    //  this.employeeNumber = roaster.employeeNumber;\n    //  this.employeeName = roaster.employeeName;\n    //  this.empCodeControl.setValue(this.employeeNumber);\n    //  this.s = roaster.s.slice();\n    //  for (var i = 1; i <= this.noOfDays; i++) {\n    //    this.shiftsFormControls.controls[i - 1].setValue(this.s[i - 1]);\n    //    this.empCodeControl.setValue(this.employeeNumber);\n    //  }\n    //  this.findTotalNewShifts();\n    //  let ele = <HTMLElement>document.getElementById('inputEntry');\n    //  ele.scrollIntoView();\n    //}\n\n\n    getDay(r) {\n      return r.s[this.day];\n    }\n\n  }\n\n  AttendanceFromMonthlyRoasterComponent.ɵfac = function AttendanceFromMonthlyRoasterComponent_Factory(t) {\n    return new (t || AttendanceFromMonthlyRoasterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.ApiService), i0.ɵɵdirectiveInject(i5.AuthorizeService), i0.ɵɵdirectiveInject(i6.UtilityService), i0.ɵɵdirectiveInject(i7.TranslateService), i0.ɵɵdirectiveInject(i8.NotificationService), i0.ɵɵdirectiveInject(i9.ValidationService));\n  };\n\n  AttendanceFromMonthlyRoasterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AttendanceFromMonthlyRoasterComponent,\n    selectors: [[\"app-attendance-from-monthly-roaster\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 56,\n    vars: 41,\n    consts: [[\"novalidate\", \"\", 1, \"mt-4\", 3, \"formGroup\"], [1, \"modal-body\"], [1, \"outer\"], [1, \"row\", \"rowm0\"], [1, \"col-md-12\", \"col-lg-12\"], [\"hidden\", \"\", 1, \"row\"], [1, \"row\", \"mt-3\"], [1, \"p-3\", 2, \"border\", \"1px solid #f4f4f4\"], [1, \"row\", \"mt-2\"], [1, \"col-md-3\", \"col-lg-3\"], [1, \"mr-sm-2\"], [1, \"form-group\"], [1, \"input-group\", \"mb-2\"], [3, \"isLoading\"], [\"type\", \"text\", \"matInput\", \"\", 1, \"form-control\", 3, \"placeholder\", \"formControl\", \"matAutocomplete\", \"change\"], [3, \"optionSelected\"], [\"auto3\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"control\"], [\"formControlName\", \"siteCode\", 1, \"custom-select\", \"mr-sm-2\", 3, \"change\"], [\"value\", \"\"], [\"formControlName\", \"monthYear\", 1, \"form-control\", \"datapickerinput\", 3, \"matDatepicker\", \"placeholder\", \"dateChange\", \"click\"], [\"matSuffix\", \"\", 3, \"for\"], [\"dp2\", \"\"], [\"class\", \"table-responsive\", 4, \"ngIf\"], [1, \"modal-footer\"], [1, \"col-md-12\", \"col-lg-12\", \"text-center\"], [\"type\", \"button\", 1, \"btn\", \"waves-effect\", \"waves-light\", \"btn-rounded\", \"btn-secondary\", \"btn-midblock\", 3, \"value\", \"click\"], [3, \"value\"], [1, \"table-responsive\"], [\"id\", \"zero_config1\", 1, \"table\", \"table-bordered\", \"no-wrap\"], [4, \"ngFor\", \"ngForOf\"], [3, \"matTooltip\"]],\n    template: function AttendanceFromMonthlyRoasterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r11 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵelement(5, \"div\", 5);\n        i0.ɵɵelementStart(6, \"div\", 6);\n        i0.ɵɵelementStart(7, \"div\", 4);\n        i0.ɵɵelementStart(8, \"div\", 7);\n        i0.ɵɵelementStart(9, \"div\", 8);\n        i0.ɵɵelementStart(10, \"div\", 9);\n        i0.ɵɵelementStart(11, \"label\", 10);\n        i0.ɵɵtext(12);\n        i0.ɵɵpipe(13, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 11);\n        i0.ɵɵelementStart(15, \"div\", 12);\n        i0.ɵɵelement(16, \"auto-loader\", 13);\n        i0.ɵɵelementStart(17, \"input\", 14);\n        i0.ɵɵlistener(\"change\", function AttendanceFromMonthlyRoasterComponent_Template_input_change_17_listener($event) {\n          return ctx.onSelectionCustomerCode($event, \"change\");\n        });\n        i0.ɵɵpipe(18, \"translate\");\n        i0.ɵɵpipe(19, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"mat-autocomplete\", 15, 16);\n        i0.ɵɵlistener(\"optionSelected\", function AttendanceFromMonthlyRoasterComponent_Template_mat_autocomplete_optionSelected_20_listener($event) {\n          return ctx.onSelectionCustomerCode($event, \"select\");\n        });\n        i0.ɵɵtemplate(22, AttendanceFromMonthlyRoasterComponent_mat_option_22_Template, 2, 3, \"mat-option\", 17);\n        i0.ɵɵpipe(23, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(24, \"validation-message\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", 9);\n        i0.ɵɵelementStart(26, \"div\", 11);\n        i0.ɵɵelementStart(27, \"label\", 10);\n        i0.ɵɵtext(28);\n        i0.ɵɵpipe(29, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"select\", 19);\n        i0.ɵɵlistener(\"change\", function AttendanceFromMonthlyRoasterComponent_Template_select_change_30_listener($event) {\n          return ctx.onSelectSiteCode($event);\n        });\n        i0.ɵɵelementStart(31, \"option\", 20);\n        i0.ɵɵtext(32);\n        i0.ɵɵpipe(33, \"translate\");\n        i0.ɵɵpipe(34, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(35, AttendanceFromMonthlyRoasterComponent_option_35_Template, 3, 4, \"option\", 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(36, \"validation-message\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"div\", 9);\n        i0.ɵɵelementStart(38, \"div\", 11);\n        i0.ɵɵelementStart(39, \"label\", 10);\n        i0.ɵɵtext(40);\n        i0.ɵɵpipe(41, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"div\", 11);\n        i0.ɵɵelementStart(43, \"div\", 12);\n        i0.ɵɵelementStart(44, \"input\", 21);\n        i0.ɵɵlistener(\"dateChange\", function AttendanceFromMonthlyRoasterComponent_Template_input_dateChange_44_listener($event) {\n          i0.ɵɵrestoreView(_r11);\n\n          const _r3 = i0.ɵɵreference(48);\n\n          return ctx.closeDatePicker($event, _r3);\n        })(\"click\", function AttendanceFromMonthlyRoasterComponent_Template_input_click_44_listener() {\n          i0.ɵɵrestoreView(_r11);\n\n          const _r3 = i0.ɵɵreference(48);\n\n          return ctx.openDatePicker(_r3);\n        });\n        i0.ɵɵpipe(45, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(46, \"mat-datepicker-toggle\", 22);\n        i0.ɵɵelement(47, \"mat-datepicker\", null, 23);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(49, AttendanceFromMonthlyRoasterComponent_div_49_Template, 17, 9, \"div\", 24);\n        i0.ɵɵelementStart(50, \"div\", 25);\n        i0.ɵɵelementStart(51, \"div\", 6);\n        i0.ɵɵelementStart(52, \"div\", 26);\n        i0.ɵɵelementStart(53, \"input\", 27);\n        i0.ɵɵlistener(\"click\", function AttendanceFromMonthlyRoasterComponent_Template_input_click_53_listener() {\n          return ctx.goBack();\n        });\n        i0.ɵɵpipe(54, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(55, \" \\u00A0 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(21);\n\n        const _r3 = i0.ɵɵreference(48);\n\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(12);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(13, 21, \"Customer_Code\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"isLoading\", ctx.isDataLoading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate2(\"placeholder\", \"\", i0.ɵɵpipeBind1(18, 23, \"Please_Enter\"), \" \", i0.ɵɵpipeBind1(19, 25, \"Customer_Code\"), \"\");\n        i0.ɵɵproperty(\"formControl\", ctx.custCodeControl)(\"matAutocomplete\", _r0);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(23, 27, ctx.filteredCustCodes));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"control\", ctx.custCodeControl);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(29, 29, \"Site_Code\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate2(\"\", i0.ɵɵpipeBind1(33, 31, \"Select\"), \" \", i0.ɵɵpipeBind1(34, 33, \"Site_Code\"), \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.siteCodeList);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"control\", ctx.form.controls.siteCode);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(41, 35, \"Date\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵpropertyInterpolate2(\"placeholder\", \"\", i0.ɵɵpipeBind1(45, 37, \"Select\"), \" \", \"Year_Month\", \"\");\n        i0.ɵɵproperty(\"matDatepicker\", _r3);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"for\", _r3);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.RoastersCount() != 0);\n        i0.ɵɵadvance(4);\n        i0.ɵɵpropertyInterpolate(\"value\", i0.ɵɵpipeBind1(54, 39, \"Cancel\"));\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i10.AutoLoaderComponent, i1.DefaultValueAccessor, i11.MatAutocompleteTrigger, i1.NgControlStatus, i1.FormControlDirective, i11.MatAutocomplete, i12.NgForOf, i13.ValidationMessagesComponent, i1.SelectControlValueAccessor, i1.FormControlName, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i14.MatDatepickerInput, i14.MatDatepickerToggle, i15.MatSuffix, i14.MatDatepicker, i12.NgIf, i16.MatOption, i17.MatTooltip],\n    pipes: [i7.TranslatePipe, i12.AsyncPipe],\n    encapsulation: 2\n  });\n  return AttendanceFromMonthlyRoasterComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}