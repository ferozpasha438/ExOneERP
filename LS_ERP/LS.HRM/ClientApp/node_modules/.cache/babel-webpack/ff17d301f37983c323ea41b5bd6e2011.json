{"ast":null,"code":"import { ZoneIsAbstractError } from \"./errors.js\";\n/**\r\n * @interface\r\n */\n\nexport default class Zone {\n  /**\r\n   * The type of zone\r\n   * @abstract\r\n   * @type {string}\r\n   */\n  get type() {\n    throw new ZoneIsAbstractError();\n  }\n  /**\r\n   * The name of this zone.\r\n   * @abstract\r\n   * @type {string}\r\n   */\n\n\n  get name() {\n    throw new ZoneIsAbstractError();\n  }\n\n  get ianaName() {\n    return this.name;\n  }\n  /**\r\n   * Returns whether the offset is known to be fixed for the whole year.\r\n   * @abstract\r\n   * @type {boolean}\r\n   */\n\n\n  get isUniversal() {\n    throw new ZoneIsAbstractError();\n  }\n  /**\r\n   * Returns the offset's common name (such as EST) at the specified timestamp\r\n   * @abstract\r\n   * @param {number} ts - Epoch milliseconds for which to get the name\r\n   * @param {Object} opts - Options to affect the format\r\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\r\n   * @param {string} opts.locale - What locale to return the offset name in.\r\n   * @return {string}\r\n   */\n\n\n  offsetName(ts, opts) {\n    throw new ZoneIsAbstractError();\n  }\n  /**\r\n   * Returns the offset's value as a string\r\n   * @abstract\r\n   * @param {number} ts - Epoch milliseconds for which to get the offset\r\n   * @param {string} format - What style of offset to return.\r\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\r\n   * @return {string}\r\n   */\n\n\n  formatOffset(ts, format) {\n    throw new ZoneIsAbstractError();\n  }\n  /**\r\n   * Return the offset in minutes for this zone at the specified timestamp.\r\n   * @abstract\r\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\r\n   * @return {number}\r\n   */\n\n\n  offset(ts) {\n    throw new ZoneIsAbstractError();\n  }\n  /**\r\n   * Return whether this Zone is equal to another zone\r\n   * @abstract\r\n   * @param {Zone} otherZone - the zone to compare\r\n   * @return {boolean}\r\n   */\n\n\n  equals(otherZone) {\n    throw new ZoneIsAbstractError();\n  }\n  /**\r\n   * Return whether this Zone is valid.\r\n   * @abstract\r\n   * @type {boolean}\r\n   */\n\n\n  get isValid() {\n    throw new ZoneIsAbstractError();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}