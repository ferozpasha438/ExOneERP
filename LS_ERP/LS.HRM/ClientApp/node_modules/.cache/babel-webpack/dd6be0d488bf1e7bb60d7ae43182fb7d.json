{"ast":null,"code":"import { formatOffset, parseZoneInfo } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\nlet singleton = null;\n/**\r\n * Represents the local zone for this JavaScript environment.\r\n * @implements {Zone}\r\n */\n\nexport default class SystemZone extends Zone {\n  /**\r\n   * Get a singleton instance of the local zone\r\n   * @return {SystemZone}\r\n   */\n  static get instance() {\n    if (singleton === null) {\n      singleton = new SystemZone();\n    }\n\n    return singleton;\n  }\n  /** @override **/\n\n\n  get type() {\n    return \"system\";\n  }\n  /** @override **/\n\n\n  get name() {\n    return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n  /** @override **/\n\n\n  get isUniversal() {\n    return false;\n  }\n  /** @override **/\n\n\n  offsetName(ts, {\n    format,\n    locale\n  }) {\n    return parseZoneInfo(ts, format, locale);\n  }\n  /** @override **/\n\n\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n  /** @override **/\n\n\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n  /** @override **/\n\n\n  equals(otherZone) {\n    return otherZone.type === \"system\";\n  }\n  /** @override **/\n\n\n  get isValid() {\n    return true;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}