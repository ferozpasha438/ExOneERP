{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./AuthorizeService\";\nexport let AuthorizeInterceptor = /*#__PURE__*/(() => {\n  class AuthorizeInterceptor {\n    constructor(authService) {\n      this.authService = authService;\n    }\n\n    intercept(req, next) {\n      return this.processRequestWithToken(req, next);\n    } // Checks if there is an access_token available in the authorize service\n    // and adds it to the request in case it's targeted at the same origin as the\n    // single page application.\n\n\n    processRequestWithToken(req, next) {\n      let token = this.authService.getAccessToken();\n      let dbConnectionString = this.authService.DbConnectionString();\n      let dbHRMConnectionString = this.authService.DbHRMConnectionString();\n\n      if (dbConnectionString && dbConnectionString !== '') {\n        //&& this.isSameOriginUrl(req)) {\n        //req = req.clone({\n        //  setHeaders: {\n        //    Authorization: `Bearer ${token}`,\n        //    Accept-Language:''\n        //  }\n        req = req.clone({\n          headers: new HttpHeaders({\n            // 'Content-Type': 'application/json',\n            'Accept-Language': this.authService.selectedLanguage(),\n            'ConnectionString': this.authService.DbConnectionString(),\n            'HRMConnectionString': this.authService.DbHRMConnectionString(),\n            'ModuleCodes': this.authService.ModuleCodes(),\n            //'Auth-Token': 'jwtToken'\n            'Authorization': `Bearer ${token}`\n          })\n        }); //alert('is calling from the ');\n      } //console.log({\n      //  // 'Content-Type': 'application/json',\n      //  'Accept-Language': this.authService.selectedLanguage(),\n      //  'ConnectionString': this.authService.DbConnectionString(),\n      //  'ModuleCodes': this.authService.ModuleCodes(),\n      //  //'Auth-Token': 'jwtToken'\n      //  'Authorization': `Bearer ${token}`,\n      //});\n\n\n      return next.handle(req);\n    }\n\n  }\n\n  AuthorizeInterceptor.ɵfac = function AuthorizeInterceptor_Factory(t) {\n    return new (t || AuthorizeInterceptor)(i0.ɵɵinject(i1.AuthorizeService));\n  };\n\n  AuthorizeInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthorizeInterceptor,\n    factory: AuthorizeInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthorizeInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}