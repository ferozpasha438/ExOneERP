{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let ValidationService = /*#__PURE__*/(() => {\n  class ValidationService {\n    constructor() {}\n\n    conditionalValidator(predicate, validator, errorNamespace) {\n      return formControl => {\n        if (!formControl.parent) {\n          return null;\n        }\n\n        let error = null;\n\n        if (predicate()) {\n          error = validator(formControl);\n        } //if (errorNamespace && error) {\n        //  const customError = {};\n        //  customError[errorNamespace] = error;\n        //  error = customError\n        //}\n\n\n        return error;\n      };\n    }\n\n    getValidatorErrorMessage(validatorName, validatorValue) {\n      var _a;\n\n      const language = (_a = localStorage.getItem('language')) !== null && _a !== void 0 ? _a : 'en';\n      const config = {\n        'required': language === 'en' ? 'Required' : 'مطلوب',\n        'invalidCreditCard': language == 'en' ? 'Is invalid credit card number' : 'رقم بطاقة ائتمان غير صالح',\n        'invalidEmailAddress': language == 'en' ? 'Invalid email address' : 'عنوان بريد إلكتروني غير صالح',\n        'email': language == 'en' ? 'Invalid email address' : 'عنوان بريد إلكتروني غير صالح',\n        'invalidMobile': language == 'en' ? 'Invalid Mobile no' : 'الجوال غير صالح لا',\n        'invalidCode': language == 'en' ? 'Format : (xx-xx-xxxxx)' : 'التنسيق : (xx-xx-xxxxxx)',\n        'invalidNumber': language == 'en' ? 'Invalid Number' : 'رقم غير صالح',\n        'invalidDecimal': language == 'en' ? 'Invalid Decimal Number' : 'رقم عشري غير صحيح',\n        'invalidPassword': language == 'en' ? 'Invalid password. Password must be at least 6 characters long, and contain a number.' : 'كلمة مرور غير صالحة. يجب أن يكون طول كلمة المرور 6 أحرف على الأقل، وأن تحتوي على رقم.',\n        'minlength': language == 'en' ? `Minimum length ${validatorValue.requiredLength}` : `الحد الأدنى للطول  ${validatorValue.requiredLength}`,\n        'maxlength': language == 'en' ? `Max length ${validatorValue.requiredLength}` : `الحد الأقصى للطول  ${validatorValue.requiredLength}`,\n        'confirmedValidator': language === 'en' ? 'password mismatch' : 'عدم تطابق كلمة المرور'\n      };\n      return config[validatorName];\n    } //emailValidator(control: any) {\n    //  if (control.value.match(/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/)) {\n    //    return null;\n    //  } else {\n    //    return { 'invalidEmailAddress': true };\n    //  }\n    //}\n\n\n    mobileOptionalValidator(control) {\n      if (control.value.match(/^(\\+\\d{1,3}[- ]?)?\\d{10}$/)) {\n        return null;\n      } else if (!control.value) {\n        return null;\n      } else {\n        return {\n          'invalidMobile': true\n        };\n      }\n    }\n\n    mobileValidator(control) {\n      if (control.value.match(/^(\\+\\d{1,3}[- ]?)?\\d{10}$/)) {\n        return null;\n      } else {\n        return {\n          'invalidMobile': true\n        };\n      }\n    }\n\n    mobile9Or10Validator(control) {\n      if (control.value.match(/^(\\+\\d{1,3}[- ]?)?\\d{9}$/) || control.value.match(/^(\\+\\d{1,3}[- ]?)?\\d{10}$/)) {\n        return null;\n      } else {\n        return {\n          'invalidMobile': true\n        };\n      }\n    }\n\n    accountValidator(control) {\n      if (control.value && control.value !== '') {\n        if (control.value.match(/(\\d{2})-(\\d{2})-(\\d{5})/)) {\n          return null;\n        } else {\n          return {\n            'invalidCode': true\n          };\n        }\n      }\n\n      return null;\n    }\n\n    numberValidator(control) {\n      if (control.value.match(/^[0-9]*$/)) {\n        return null;\n      } else {\n        return {\n          'invalidNumber': true\n        };\n      }\n    }\n\n    decimalValidator(control) {\n      if (control.value.match(/^\\d+[.,]?\\d{0,3}$/)) {\n        return null;\n      } else {\n        return {\n          'invalidDecimal': true\n        };\n      }\n    }\n\n  }\n\n  ValidationService.ɵfac = function ValidationService_Factory(t) {\n    return new (t || ValidationService)();\n  };\n\n  ValidationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ValidationService,\n    factory: ValidationService.ɵfac,\n    providedIn: 'root'\n  });\n  return ValidationService;\n})();","map":null,"metadata":{},"sourceType":"module"}