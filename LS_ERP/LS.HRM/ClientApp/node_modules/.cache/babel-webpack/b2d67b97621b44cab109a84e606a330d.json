{"ast":null,"code":"import { ErrorMessage } from \"./utility.constants\";\nimport * as moment from 'moment/moment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./notification.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@ngx-translate/core\";\nexport let UtilityService = /*#__PURE__*/(() => {\n  class UtilityService {\n    constructor(notifyService, router, translate) {\n      this.notifyService = notifyService;\n      this.router = router;\n      this.translate = translate;\n\n      this.getPrintForLocale = printContent => `<div dir='${this.isArabic() ? 'rtl' : 'ltr'}'>${printContent.innerHTML}</div>`;\n\n      this.selectedDateDays = date => date ? this.getDate(date).getDate() : 0;\n\n      this.selectedDate = date => this.getCommonDate(date);\n\n      this.selectedDateTime = date => this.getCommonDate(date, 'T00:00:00');\n\n      this.totalDaysFromTwoDates = (toDay, fromDay) => parseInt(moment(toDay).diff(fromDay, 'day')) + 1;\n\n      this.getDir = () => this.isArabic() ? 'rtl' : 'ltr';\n\n      this.getLastDay = () => {\n        const today1 = new Date();\n        const lastDayOfMonth1 = new Date(today1.getFullYear(), today1.getMonth() + 1, 0);\n        today1.setDate(lastDayOfMonth1.getDate());\n        return today1;\n      };\n\n      this.autoDelay = () => 500;\n\n      this.Lang = () => this.selectedLanguage();\n\n      this.logoUrl = () => {\n        var _a;\n\n        return (_a = localStorage.getItem('logoURL')) !== null && _a !== void 0 ? _a : '';\n      };\n\n      this.localizeError = key => {\n        var _a;\n\n        return this.notifyService.showError((_a = (this.isArabic() ? 'املأ ' : 'Fill ') + this.translate.instant(key)) !== null && _a !== void 0 ? _a : '');\n      };\n    }\n\n    getQueryString(page, pageCount, query, orderBy, approval = \"\", statusId = \"\", id = 0, code = \"\") {\n      let queryParam = `Page=${encodeURIComponent(\"\" + page)}&PageCount=${encodeURIComponent(\"\" + pageCount)}&Query=${encodeURIComponent(\"\" + query)}&OrderBy=${encodeURIComponent(\"\" + orderBy)}&Approval=${encodeURIComponent(\"\" + approval)}&statusId=${encodeURIComponent(\"\" + statusId)}&Id=${encodeURIComponent(\"\" + id)}&code=${encodeURIComponent(\"\" + code)}`;\n      return queryParam; //return params.join('');\n    }\n\n    getStudentQueryString(stuAdmNum = \"\", page, pageCount, query, orderBy, approval = \"\", statusId = \"\", id = 0) {\n      let queryParam = `StuAdmNum=${encodeURIComponent(\"\" + stuAdmNum)}&Page=${encodeURIComponent(\"\" + page)}&PageCount=${encodeURIComponent(\"\" + pageCount)}&Query=${encodeURIComponent(\"\" + query)}&OrderBy=${encodeURIComponent(\"\" + orderBy)}&Approval=${encodeURIComponent(\"\" + approval)}&statusId=${encodeURIComponent(\"\" + statusId)}&Id=${encodeURIComponent(\"\" + id)}`;\n      return queryParam;\n    }\n\n    getTeacherQueryString(teacherCode = \"\", page, pageCount, query, orderBy, approval = \"\", statusId = \"\", id = 0) {\n      let queryParam = `TeacherCode=${encodeURIComponent(\"\" + teacherCode)}&Page=${encodeURIComponent(\"\" + page)}&PageCount=${encodeURIComponent(\"\" + pageCount)}&Query=${encodeURIComponent(\"\" + query)}&OrderBy=${encodeURIComponent(\"\" + orderBy)}&Approval=${encodeURIComponent(\"\" + approval)}&statusId=${encodeURIComponent(\"\" + statusId)}&Id=${encodeURIComponent(\"\" + id)}`;\n      return queryParam;\n    }\n\n    getOprQueryString(page, pageCount, query, orderBy, approval = \"\", statusId = \"\", id = 0, code = \"\", listType = \"\") {\n      let queryParam = `Page=${encodeURIComponent(\"\" + page)}&PageCount=${encodeURIComponent(\"\" + pageCount)}&Query=${encodeURIComponent(\"\" + query)}&OrderBy=${encodeURIComponent(\"\" + orderBy)}&Approval=${encodeURIComponent(\"\" + approval)}&statusId=${encodeURIComponent(\"\" + statusId)}&Id=${encodeURIComponent(\"\" + id)}&code=${encodeURIComponent(\"\" + code)}&listType=${encodeURIComponent(\"\" + listType)}`;\n      return queryParam; //return params.join('');\n    }\n\n    getCalendarQueryString(branchCode, startDate, endDate) {\n      let queryParam = `BranchCode=${encodeURIComponent(\"\" + branchCode)}&StartDate=${encodeURIComponent(\"\" + startDate)}&EndDate=${encodeURIComponent(\"\" + endDate)}`;\n      return queryParam;\n    }\n\n    printForLocale(printContent) {\n      const WindowPrt = window.open('', '', 'left=0,top=0,width=2000,height=1000,toolbar=0,scrollbars=0,status=0');\n      setTimeout(() => {\n        WindowPrt.document.write(this.getPrintForLocale(printContent));\n        WindowPrt.document.close();\n        WindowPrt.focus();\n        WindowPrt.print();\n        WindowPrt.close();\n      }, 50);\n    }\n\n    getStrtingYearDate() {\n      return `${new Date().getFullYear()}-01-01T00:00:00`;\n    }\n\n    getCurrentDate() {\n      let mInvDate1 = moment;\n      const mInvDate = mInvDate1(new Date().toLocaleDateString());\n      return mInvDate.format('YYYY-MM-DD') + 'T00:00:00';\n    }\n\n    getCommonDate(date, time = '') {\n      if (date) {\n        let selectedDate = this.getDate(date);\n        const datePart = selectedDate.getDate() < 10 ? '0' : '';\n        const monthPart = selectedDate.getMonth() + 1 < 10 ? '0' : '';\n        return `${selectedDate.getFullYear()}-${monthPart}${selectedDate.getMonth() + 1}-${datePart}${selectedDate.getDate()}${time}`;\n      }\n\n      return '';\n    }\n\n    getDate(date) {\n      return new Date(date);\n    }\n\n    selectedLanguage() {\n      var _a;\n\n      return (_a = localStorage.getItem('language')) !== null && _a !== void 0 ? _a : 'en-US';\n    }\n\n    isArabic() {\n      return this.selectedLanguage() == 'ar';\n    } //SuccessMessage1 = (): string => \"Successful\";\n    //FillUpMessage1 = (): string => \"Fill up all fields\";\n\n\n    ValidateMessage() {\n      this.notifyService.showSuccess(this.isArabic() ? 'الرجاء التحقق من صحة اسم المستخدم' : 'Please validate username');\n    }\n\n    OkMessage() {\n      this.notifyService.showSuccess(this.isArabic() ? 'ناجح' : 'Successful');\n    }\n\n    FillUpFields() {\n      this.notifyService.showError(this.isArabic() ? 'املأ جميع الحقول' : 'Fill up all fields');\n    } //openCrudDialogOne(dialog: any, component: any, width: string) {\n    //  const dialogRef = dialog.open(component, {\n    //    disableClose: true,\n    //    width: width\n    //  });\n    //  return dialogRef;\n    //}\n\n\n    openCrudDialog(dialog, component, width = '80%', height = '90%') {\n      const widthNumber = width.includes('%') ? width.split('%')[0] : width;\n      const heightNumber = height.includes('%') ? height.split('%')[0] : height;\n      const dialogRef = dialog.open(component, {\n        disableClose: true,\n        width: `${widthNumber}%`,\n        maxWidth: `${widthNumber}vw`,\n        height: `${heightNumber}%`,\n        direction: this.isArabic() ? \"rtl\" : \"ltr\"\n      });\n      return dialogRef;\n    }\n\n    openDeleteConfirmDialog(dialog, component, width = '300px') {\n      const dialogRef = dialog.open(component, {\n        disableClose: true,\n        width: width,\n        direction: this.isArabic() ? \"rtl\" : \"ltr\"\n      });\n      return dialogRef;\n    }\n\n    openDialogCongif(dialog, component, width = 100) {\n      const dialogRef = dialog.open(component, {\n        disableClose: true,\n        width: `${width}%`,\n        maxWidth: `${width}vw`,\n        height: '100%',\n        direction: this.isArabic() ? \"rtl\" : \"ltr\"\n      });\n      return dialogRef;\n    }\n\n    openNormalDialogConfig(dialog, component, width = 100) {\n      const dialogRef = dialog.open(component, {\n        disableClose: true,\n        width: `${width}%`,\n        maxWidth: `${width}vw`,\n        height: '100%'\n      });\n      return dialogRef;\n    } //openSnackBar(message: string) {\n    //  this._snackBar.open(message, 'Close', {\n    //    duration: 2500,\n    //  });\n    //}\n\n\n    ShowApiErrorMessage(error) {\n      try {\n        let httpError = error.error;\n\n        if (error && error.status === 401) {\n          localStorage.clear(); // window.location.href = \"/\";\n\n          location.replace('');\n        } else this.notifyService.showError(httpError === null || httpError === void 0 ? void 0 : httpError.message, \"Error\"); //console.log(Object.keys(error.error));\n        //Object.keys(error.error).forEach(key => {\n        //  console.log('Key : ' + key + ', Error : ' + error.error[key])\n        //})\n        //if (error.error ) {\n        //  alert(error.error.message);\n        //alert(error.error.title);\n        //}\n        //else {\n        //  alert(ErrorMessage);\n        //}      \n\n      } catch (e) {\n        if (error && error.status === 401) {\n          localStorage.clear(); //window.location.href = \"/\";\n\n          location.replace('');\n        } else this.notifyService.showError(ErrorMessage, \"Error\");\n      }\n    }\n\n    hasValue(param) {\n      return param && param.trim() !== '' ? true : false;\n      ;\n    }\n\n    removeSqueres(param) {\n      return param && param.trim() !== '' ? param.split(')')[0].replace('(', '') : '';\n    }\n\n    hasPaymenRoute() {\n      const paymenRoute = localStorage.getItem('hasPaymenRoute');\n      return paymenRoute !== null;\n    }\n\n    formatTime(param) {\n      if (param !== \"\") {\n        return param.split(\":\")[0] + \":\" + param.split(\":\")[1];\n      }\n\n      return param;\n    }\n\n    convertTicksToTimeStamp(ticks) {\n      var ticksInSecs = ticks / 10000000;\n      var hh = Math.floor(ticksInSecs / 3600);\n      var mm = Math.floor(ticksInSecs % 3600 / 60);\n      var ss = ticksInSecs % 60;\n      return this.pad(hh, 2) + ':' + this.pad(mm, 2) + ':' + this.pad(ss, 2);\n    }\n\n    pad(n, width) {\n      var x = n + '';\n      return x.length >= width ? n : new Array(width - x.length + 1).join('0') + n;\n    }\n\n  }\n\n  UtilityService.ɵfac = function UtilityService_Factory(t) {\n    return new (t || UtilityService)(i0.ɵɵinject(i1.NotificationService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.TranslateService));\n  };\n\n  UtilityService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UtilityService,\n    factory: UtilityService.ɵfac,\n    providedIn: 'root'\n  });\n  return UtilityService;\n})();","map":null,"metadata":{},"sourceType":"module"}