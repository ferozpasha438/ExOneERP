{"ast":null,"code":"import _asyncToGenerator from \"E:/LS_Projects/HVS_Projects/HVSWebsite/LS_ERP/LS.HRM/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BehaviorSubject } from 'rxjs';\nimport { default as data } from \"../../assets/i18n/apiuri.json\";\nimport * as i0 from \"@angular/core\";\nexport let AuthorizeService = /*#__PURE__*/(() => {\n  class AuthorizeService {\n    constructor() {\n      // By default pop ups are disabled because they don't work properly on Edge.\n      // If you want to enable pop up authentication simply set this flag to false. \n      //private languageSubject: BehaviorSubject<string> = new BehaviorSubject<string>('');\n      this.userSubject = new BehaviorSubject(false);\n      this.isSubmittingSubject = new BehaviorSubject(false);\n\n      this.Lang = () => this.selectedLanguage();\n    } //public setLanguageChange(language: string) {\n    //  this.languageSubject.next(language);\n    //}\n\n\n    setAuthorize(isAuth) {\n      this.userSubject.next(isAuth);\n    }\n\n    isAuthenticated() {\n      return this.getUserName() !== '' ? true : false;\n    } //public getLanguageChange(): BehaviorSubject<string> {\n    //  return this.languageSubject;\n    //}\n\n\n    getAuthorize() {\n      return this.userSubject;\n    }\n\n    getUserName() {\n      var _a;\n\n      return (_a = localStorage.getItem('userName')) !== null && _a !== void 0 ? _a : '';\n    }\n\n    getUser() {\n      const user = localStorage.getItem('metaData');\n      return JSON.parse(user);\n    }\n\n    getAccessToken() {\n      var _a;\n\n      return (_a = localStorage.getItem('accessToken')) !== null && _a !== void 0 ? _a : ''; //return from('')\n      //  .pipe(mergeMap(() => from(Observable<string>(''))),\n      //    map(user => ''));\n      //return from(this.ensureUserManagerInitialized())\n      //  .pipe(mergeMap(() => from(this.userManager.getUser())),\n      //    map(user => user && user.access_token));\n    }\n\n    SetApiEndPoint(apiEndpoint) {\n      //localStorage.removeItem('apiEndpoint');\n      localStorage.setItem('apiEndpoint', apiEndpoint);\n    }\n\n    ApiEndPoint() {\n      var _a;\n\n      return (_a = localStorage.getItem('apiEndpoint')) !== null && _a !== void 0 ? _a : '';\n    }\n\n    GetSystemSetupApiEndPoint() {\n      var _a;\n\n      return (_a = localStorage.getItem('setupapi')) !== null && _a !== void 0 ? _a : '';\n    }\n\n    GetSchoolApiEndPoint() {\n      var _a;\n\n      return (_a = data.schoolapiurl) !== null && _a !== void 0 ? _a : '';\n    }\n\n    GetOprApiEndPoint() {\n      var _a;\n\n      return (_a = localStorage.getItem('oprEndPoint')) !== null && _a !== void 0 ? _a : '';\n    }\n\n    DbConnectionString() {\n      var _a;\n\n      return (_a = localStorage.getItem('dbConnectionString')) !== null && _a !== void 0 ? _a : '';\n    }\n\n    DbHRMConnectionString() {\n      var _a;\n\n      return (_a = localStorage.getItem('dbHRMConnectionString')) !== null && _a !== void 0 ? _a : '';\n    }\n\n    ModuleCodes() {\n      var _a;\n\n      return (_a = localStorage.getItem('moduleCodes')) !== null && _a !== void 0 ? _a : '';\n    }\n\n    SetSubmitting(isSubmitting) {\n      this.isSubmittingSubject.next(isSubmitting);\n    }\n\n    IsSubmitting() {\n      return this.isSubmittingSubject;\n    }\n\n    selectedLanguage() {\n      var _a;\n\n      return (_a = localStorage.getItem('language')) !== null && _a !== void 0 ? _a : 'en-US';\n    }\n\n    isArabic() {\n      return this.selectedLanguage() == 'ar';\n    } //public isAuthenticated(): Observable<boolean> {\n    //  return this.getUser().pipe(map(u => !!u));\n    //}\n    //public getUser(): Observable<IUser | null> {\n    //  return concat(\n    //    this.userSubject.pipe(take(1), filter(u => !!u)),\n    //    this.getUserFromStorage().pipe(filter(u => !!u), tap(u => this.userSubject.next(u))),\n    //    this.userSubject.asObservable());\n    //}\n    //public getAccessToken(): Observable<string> {\n    //  return from(this.ensureUserManagerInitialized())\n    //    .pipe(mergeMap(() => from(this.userManager.getUser())),\n    //      map(user => user && user.access_token));\n    //}\n    // We try to authenticate the user in three different ways:\n    // 1) We try to see if we can authenticate the user silently. This happens\n    //    when the user is already logged in on the IdP and is done using a hidden iframe\n    //    on the client.\n    // 2) We try to authenticate the user using a PopUp Window. This might fail if there is a\n    //    Pop-Up blocker or the user has disabled PopUps.\n    // 3) If the two methods above fail, we redirect the browser to the IdP to perform a traditional\n    //    redirect flow.\n\n\n    signOut(state) {\n      return _asyncToGenerator(function* () {})();\n    }\n\n  }\n\n  AuthorizeService.ɵfac = function AuthorizeService_Factory(t) {\n    return new (t || AuthorizeService)();\n  };\n\n  AuthorizeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthorizeService,\n    factory: AuthorizeService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthorizeService;\n})();","map":null,"metadata":{},"sourceType":"module"}