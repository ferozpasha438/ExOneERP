{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../api-authorization/AuthorizeService\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http, authService) {\n      this.http = http;\n      this.authService = authService; // Define API\n\n      this.apiURL = ''; // Http Options\n\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Accept-Language': 'en-US',\n          'ConnectionString': this.authService.DbConnectionString(),\n          'HRMConnectionString': this.authService.DbHRMConnectionString(),\n          //'Auth-Token': 'jwtToken'\n          'Authorization': `Bearer ${this.authService.getAccessToken()}`\n        })\n      }; //this.apiURL = this.authService.ApiEndPoint();\n      //authService.SetApiEndPoint(apiendPoint);\n      //alert(authService.ApiEndPoint());\n    } // HttpClient API get() method => Fetch anys list\n\n\n    getall(url) {\n      this.apiURL = this.authService.ApiEndPoint();\n      return this.http.get(`${this.apiURL}/${url}`).pipe(retry(1), catchError(this.handleError));\n    }\n\n    getPagination(url, queryParams) {\n      this.apiURL = this.authService.ApiEndPoint();\n      return this.http.get(`${this.apiURL}/${url}?${queryParams}`).pipe(retry(1), catchError(this.handleError));\n    } // HttpClient API get() method => Fetch any\n\n\n    get(url, id) {\n      this.apiURL = this.authService.ApiEndPoint();\n      return this.http.get(`${this.apiURL}/${url}/${id}`).pipe(retry(1), catchError(this.handleError));\n    }\n\n    getFinanceUrl(url, id) {\n      var _a;\n\n      this.apiURL = (_a = this.authService.getUser()) === null || _a === void 0 ? void 0 : _a.finUrl;\n      return this.http.get(`${this.apiURL}/${url}/${id}`).pipe(retry(1), catchError(this.handleError));\n    }\n\n    getSchoolUrl(url) {\n      this.apiURL = this.authService.GetSchoolApiEndPoint();\n      return this.http.get(`${this.apiURL}/${url}`).pipe(retry(1), catchError(this.handleError));\n    }\n\n    getOprUrl(url) {\n      this.apiURL = this.authService.GetOprApiEndPoint();\n      return this.http.get(`${this.apiURL}/${url}`).pipe(retry(1), catchError(this.handleError));\n    }\n\n    postOprUrl(url, filter) {\n      this.apiURL = this.authService.GetOprApiEndPoint();\n      return this.http.post(`${this.apiURL}/${url}`, filter).pipe(retry(1), catchError(this.handleError));\n    }\n\n    getQueryString(url, queryParams) {\n      this.apiURL = this.authService.ApiEndPoint();\n      return this.http.get(`${this.apiURL}/${url}${queryParams}`).pipe(retry(1), catchError(this.handleError));\n    } // HttpClient API post() method => Create any\n\n\n    post(url, objectItem) {\n      this.apiURL = this.authService.ApiEndPoint();\n      return this.http.post(`${this.apiURL}/${url}`, objectItem);\n    } // HttpClient API post() method => Create any\n\n\n    postData(url, objectItem) {\n      this.apiURL = this.authService.ApiEndPoint();\n      return this.http.post(`${this.apiURL}/${url}`, objectItem);\n    } // HttpClient API put() method => Update any\n\n\n    put(url, id, objectItem) {\n      this.apiURL = this.authService.ApiEndPoint();\n      return this.http.put(`${this.apiURL}/${url}/${id}`, objectItem);\n    } // HttpClient API delete() method => Delete any\n\n\n    delete(url, id) {\n      this.apiURL = this.authService.ApiEndPoint();\n      return this.http.delete(`${this.apiURL}/${url}/${id}`);\n    } // Error handling \n\n\n    handleError(error) {\n      return throwError(error);\n    }\n\n    mobpost(url, objectItem) {\n      this.apiURL = \"http://localhost:56282/api\";\n      return this.http.post(`${this.apiURL}/${url}`, objectItem);\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthorizeService));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}