{"ast":null,"code":"import SystemZone from \"./zones/systemZone.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport Locale from \"./impl/locale.js\";\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\n\nlet now = () => Date.now(),\n    defaultZone = \"system\",\n    defaultLocale = null,\n    defaultNumberingSystem = null,\n    defaultOutputCalendar = null,\n    twoDigitCutoffYear = 60,\n    throwOnInvalid;\n/**\r\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\r\n */\n\n\nexport default class Settings {\n  /**\r\n   * Get the callback for returning the current timestamp.\r\n   * @type {function}\r\n   */\n  static get now() {\n    return now;\n  }\n  /**\r\n   * Set the callback for returning the current timestamp.\r\n   * The function should return a number, which will be interpreted as an Epoch millisecond count\r\n   * @type {function}\r\n   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\r\n   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\r\n   */\n\n\n  static set now(n) {\n    now = n;\n  }\n  /**\r\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\r\n   * Use the value \"system\" to reset this value to the system's time zone.\r\n   * @type {string}\r\n   */\n\n\n  static set defaultZone(zone) {\n    defaultZone = zone;\n  }\n  /**\r\n   * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.\r\n   * The default value is the system's time zone (the one set on the machine that runs this code).\r\n   * @type {Zone}\r\n   */\n\n\n  static get defaultZone() {\n    return normalizeZone(defaultZone, SystemZone.instance);\n  }\n  /**\r\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\n\n\n  static get defaultLocale() {\n    return defaultLocale;\n  }\n  /**\r\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\n\n\n  static set defaultLocale(locale) {\n    defaultLocale = locale;\n  }\n  /**\r\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\n\n\n  static get defaultNumberingSystem() {\n    return defaultNumberingSystem;\n  }\n  /**\r\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\n\n\n  static set defaultNumberingSystem(numberingSystem) {\n    defaultNumberingSystem = numberingSystem;\n  }\n  /**\r\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\n\n\n  static get defaultOutputCalendar() {\n    return defaultOutputCalendar;\n  }\n  /**\r\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\n\n\n  static set defaultOutputCalendar(outputCalendar) {\n    defaultOutputCalendar = outputCalendar;\n  }\n  /**\r\n   * Get the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.\r\n   * @type {number}\r\n   */\n\n\n  static get twoDigitCutoffYear() {\n    return twoDigitCutoffYear;\n  }\n  /**\r\n   * Set the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.\r\n   * @type {number}\r\n   * @example Settings.twoDigitCutoffYear = 0 // cut-off year is 0, so all 'yy' are interpretted as current century\r\n   * @example Settings.twoDigitCutoffYear = 50 // '49' -> 1949; '50' -> 2050\r\n   * @example Settings.twoDigitCutoffYear = 1950 // interpretted as 50\r\n   * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpretted as 50\r\n   */\n\n\n  static set twoDigitCutoffYear(cutoffYear) {\n    twoDigitCutoffYear = cutoffYear % 100;\n  }\n  /**\r\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\r\n   * @type {boolean}\r\n   */\n\n\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n  /**\r\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\r\n   * @type {boolean}\r\n   */\n\n\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n  /**\r\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\r\n   * @return {void}\r\n   */\n\n\n  static resetCaches() {\n    Locale.resetCache();\n    IANAZone.resetCache();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}