{"version":3,"file":"larscom-ngx-translate-module-loader.mjs","sources":["../../../projects/ngx-translate-module-loader/src/lib/module-translate-loader.ts","../../../projects/ngx-translate-module-loader/src/larscom-ngx-translate-module-loader.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { TranslateLoader } from '@ngx-translate/core';\nimport { all as mergeAll } from 'deepmerge';\nimport { forkJoin as ForkJoin, MonoTypeOperatorFunction, Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { IModuleTranslation } from './models/module-translation';\nimport { IModuleTranslationOptions } from './models/module-translation-options';\nimport { Translation } from './models/translation';\n\nconst concatJson = (path: string) => path.concat('.json');\n\nconst PATH_TEMPLATE_REGEX = /{([^}]+)}/gi;\nconst PATH_CLEAN_REGEX = /([^:]\\/)\\/+/gi;\nconst DEFAULT_PATH_TEMPLATE = '{baseTranslateUrl}/{moduleName}/{language}';\n\nexport class ModuleTranslateLoader implements TranslateLoader {\n  private readonly defaultOptions: IModuleTranslationOptions = {\n    disableNamespace: false,\n    lowercaseNamespace: false,\n    deepMerge: true,\n    ...this.options\n  };\n\n  /**\n   * The ModuleTranslateLoader for 'ngx-translate/core'\n   *\n   * @description Fetch multiple translation files (http).\n   *\n   * @param http the HttpClient from 'angular/common'\n   * @param options the configurable options for ModuleTranslateLoader\n   *\n   * @see https://github.com/larscom/ngx-translate-module-loader\n   */\n  constructor(private readonly http: HttpClient, private readonly options: IModuleTranslationOptions) {}\n\n  public getTranslation(language: string): Observable<Translation> {\n    const { defaultOptions: options } = this;\n    return this.mergeTranslations(this.getModuleTranslations(language, options), options);\n  }\n\n  private mergeTranslations(\n    moduleTranslations: Observable<Translation>[],\n    { deepMerge, translateMerger }: IModuleTranslationOptions\n  ): Observable<Translation> {\n    return ForkJoin(moduleTranslations).pipe(\n      map((translations) => {\n        return translateMerger\n          ? translateMerger(translations)\n          : deepMerge\n          ? mergeAll<Translation>(translations)\n          : translations.reduce((acc, curr) => ({ ...acc, ...curr }), Object());\n      })\n    );\n  }\n\n  private getModuleTranslations(language: string, options: IModuleTranslationOptions): Observable<Translation>[] {\n    const { modules } = options;\n\n    return modules.map((module) => {\n      const { moduleName } = module;\n      return moduleName\n        ? this.fetchTranslationForModule(language, options, module)\n        : this.fetchTranslation(language, options, module);\n    });\n  }\n\n  private fetchTranslation(\n    language: string,\n    { translateError, version }: IModuleTranslationOptions,\n    { pathTemplate, baseTranslateUrl, translateMap }: IModuleTranslation\n  ): Observable<Translation> {\n    const pathOptions = Object({ baseTranslateUrl, language });\n    const template = pathTemplate || DEFAULT_PATH_TEMPLATE;\n\n    const cleanedPath = concatJson(\n      template.replace(PATH_TEMPLATE_REGEX, (_, m1: string) => pathOptions[m1] || '')\n    ).replace(PATH_CLEAN_REGEX, '$1');\n\n    const path = version ? `${cleanedPath}?v=${version}` : cleanedPath;\n\n    return this.http.get<Translation>(path).pipe(\n      map((translation) => (translateMap ? translateMap(translation) : translation)),\n      this.catchError(cleanedPath, translateError)\n    );\n  }\n\n  private fetchTranslationForModule(\n    language: string,\n    { disableNamespace, lowercaseNamespace, translateError, version }: IModuleTranslationOptions,\n    { pathTemplate, baseTranslateUrl, moduleName, namespace, translateMap }: IModuleTranslation\n  ): Observable<Translation> {\n    const pathOptions = Object({ baseTranslateUrl, moduleName, language });\n    const template = pathTemplate || DEFAULT_PATH_TEMPLATE;\n\n    const namespaceKey = namespace\n      ? namespace\n      : lowercaseNamespace\n      ? moduleName!.toLowerCase()\n      : moduleName!.toUpperCase();\n\n    const cleanedPath = concatJson(\n      template.replace(PATH_TEMPLATE_REGEX, (_, m1: string) => pathOptions[m1] || '')\n    ).replace(PATH_CLEAN_REGEX, '$1');\n\n    const path = version ? `${cleanedPath}?v=${version}` : cleanedPath;\n\n    return this.http.get<Translation>(path).pipe(\n      map((translation) => {\n        return translateMap\n          ? translateMap(translation)\n          : disableNamespace\n          ? translation\n          : Object({ [namespaceKey]: translation });\n      }),\n      this.catchError(cleanedPath, translateError)\n    );\n  }\n\n  private catchError<T>(\n    path: string,\n    translateError?: (error: any, path: string) => void\n  ): MonoTypeOperatorFunction<T> {\n    return catchError((e) => {\n      if (translateError) {\n        translateError(e, path);\n      }\n\n      console.error('Unable to load translation file:', path);\n      return of(Object());\n    });\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["ForkJoin","mergeAll"],"mappings":"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"}